<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>maoqitian</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.maoqitian.com/"/>
  <updated>2019-01-10T15:18:26.663Z</updated>
  <id>https://www.maoqitian.com/</id>
  
  <author>
    <name>maoqitian</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android 源码编译</title>
    <link href="https://www.maoqitian.com/2019/01/10/Android-source-code-compilation/"/>
    <id>https://www.maoqitian.com/2019/01/10/Android-source-code-compilation/</id>
    <published>2019-01-10T12:23:03.000Z</published>
    <updated>2019-01-10T15:18:26.663Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>android源码编译的四个流程:1.源码下载;2.构建编译环境;3.编译源码;4运行.</p></blockquote><h2 id="Ubuntu-18-04（虚拟机）环境下编译Android-源码"><a href="#Ubuntu-18-04（虚拟机）环境下编译Android-源码" class="headerlink" title="Ubuntu 18.04（虚拟机）环境下编译Android 源码"></a>Ubuntu 18.04（虚拟机）环境下编译Android 源码</h2><h3 id="1-源码下载"><a href="#1-源码下载" class="headerlink" title="1.源码下载"></a>1.源码下载</h3><ul><li><p>首先确保自己已经安装了Git.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git </span><br><span class="line">git config –global user.email “test@test.com” </span><br><span class="line">git config –global user.name “test”</span><br></pre></td></tr></table></figure></li><li><p>使用清华大学镜像</p><ul><li><a href="https://mirror.tuna.tsinghua.edu.cn/help/AOSP/" target="_blank" rel="noopener">Android 镜像使用帮助</a></li><li>首先要下载repo 工具</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/bin</span><br><span class="line">PATH=~/bin:$PATH</span><br><span class="line">curl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo</span><br><span class="line">chmod a+x ~/bin/repo</span><br><span class="line">//拒绝连接可以使用tuna的git-repo镜像</span><br><span class="line">详情查看网址https://mirrors.tuna.tsinghua.edu.cn/help/git-repo/</span><br></pre></td></tr></table></figure><ul><li>使用每月更新的初始化包</li><li><p>下载地址 <a href="https://mirrors.tuna.tsinghua.edu.cn/aosp-monthly/aosp-latest.tar" target="_blank" rel="noopener">每月更新的初始化包</a></p></li><li><p>由于所有代码都是从隐藏的 .repo 目录中 checkout 出来的，所以只保留了 .repo 目录，下载后解压 再 repo sync 一遍即可得到完整的目录</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">使用方法如下:</span><br><span class="line"></span><br><span class="line">wget -c https://mirrors.tuna.tsinghua.edu.cn/aosp-mo nthly/aosp-latest.tar # 下载初始化包</span><br><span class="line">tar xf aosp-latest.tar</span><br><span class="line">cd AOSP   # 解压得到的 AOSP 工程目录</span><br><span class="line"># 这时 ls 的话什么也看不到，因为只有一个隐藏的 .repo 目录</span><br><span class="line">repo sync # 正常同步一遍即可得到完整目录</span><br><span class="line"># 或 repo sync -l 仅checkout代码</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-构建编译环境"><a href="#2-构建编译环境" class="headerlink" title="2.构建编译环境"></a>2.构建编译环境</h3><h4 id="硬件要求"><a href="#硬件要求" class="headerlink" title="硬件要求:"></a>硬件要求:</h4><ul><li>64位的操作系统只能编译2.3.x以上的版本,如果你想要编译2.3.x以下的,那么需要32位的操作系统.<br>  磁盘空间越多越好,至少在100GB以上.意思就是,你可以去买个大点的硬盘了啊<br>  如果你想要在是在虚拟机运行linux,那么至少需要16GB的RAM/swap. </li></ul><h4 id="软件要求"><a href="#软件要求" class="headerlink" title="软件要求"></a>软件要求</h4><ul><li>安装 openJDK 8   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install openjdk-8-jdk</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>依赖设置:</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-dev g++-multilib </span><br><span class="line">sudo apt-get install -y git flex bison gperf build-essential libncurses5-dev:i386 </span><br><span class="line">sudo apt-get install tofrodos python-markdown libxml2-utils xsltproc zlib1g-dev:i386 </span><br><span class="line">sudo apt-get install dpkg-dev libsdl1.2-dev libesd0-dev</span><br><span class="line">sudo apt-get install git-core gnupg flex bison gperf build-essential  </span><br><span class="line">sudo apt-get install zip curl zlib1g-dev gcc-multilib g++-multilib </span><br><span class="line">sudo apt-get install libc6-dev-i386 </span><br><span class="line">sudo apt-get install lib32ncurses5-dev x11proto-core-dev libx11-dev </span><br><span class="line">sudo apt-get install libgl1-mesa-dev libxml2-utils xsltproc unzip m4</span><br><span class="line">sudo apt-get install lib32z-dev ccache</span><br></pre></td></tr></table></figure></li><li><p>依赖设置中有可能会出现“无法定位软件包 libesd0-dev” 这个问题</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">解决方案：</span><br><span class="line">在etc/apt   的sources.list 添加镜像源   deb http://archive.ubuntu.com/ubuntu/ trusty main universe restricted multiverse</span><br><span class="line"></span><br><span class="line">然后 sudo apt-get update  接着继续使用该命令安装就可以了</span><br></pre></td></tr></table></figure></li><li><p>操作系统要求 </p><p>  Android版本 | 编译要求的Ubuntu最低版本<br>  —|—<br>  Android 6.0至AOSP master | Ubuntu 14.04<br>  Android 2.3.x至Android 5.x | Ubuntu 12.04<br>  Android 1.5至Android 2.2.x | Ubuntu 10.04</p></li><li><p>JDK版本要求</p></li></ul><table><thead><tr><th>Android版本</th><th>编译要求的JDK版本</th></tr></thead><tbody><tr><td>AOSP的Android主线</td><td>OpenJDK 8</td></tr><tr><td>Android 5.x至android 6.0</td><td>Oracle JDK 7</td></tr><tr><td>Android 2.3.x至Android 4.4.x</td><td>Oracle JDK 6</td></tr><tr><td>Android 1.5至Android 2.2.x</td><td>Oracle JDK 5</td></tr></tbody></table><ul><li><p>官方编译环境搭建文档地址</p><p><a href="https://source.android.com/source/initializing#installing-required-packages-ubuntu-1404" target="_blank" rel="noopener">搭建编译环境</a></p></li></ul><h3 id="初始化编译环境"><a href="#初始化编译环境" class="headerlink" title="初始化编译环境"></a>初始化编译环境</h3>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source build/envsetup.sh </span><br><span class="line">或者</span><br><span class="line">. build/envsetup.sh</span><br></pre></td></tr></table></figure><ul><li><p>选择目标</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">. lunch aosp_arm64-eng</span><br></pre></td></tr></table></figure></li><li><p>该命令表示针对模拟器进行完整编译，并且所有调试功能均处于启用状态。<br> 如果您没有提供任何参数就运行命令，lunch 将提示您从菜单中选择一个目标。<br> 所有编译目标都采用 BUILD-BUILDTYPE 形式，其中 BUILD 是表示特定功能组合的代号。</p></li><li><p>BUILDTYPE 是以下类型之一：</p><pre><code>编译类型 | 使用情况---|---user | 权限受限；适用于生产环境（没有root权和dedug等）userdebug |在user版本的基础上开放了root权限和debug权限.eng | 开发工程师的版本,拥有最大的权限,此外还附带了许多debug工具</code></pre></li></ul><h3 id="编译源码"><a href="#编译源码" class="headerlink" title="编译源码"></a>编译源码</h3><ul><li><p>您可以使用make编译任何代码。GNUMake可以借助 -jN参数处理并行任务，通常使用的任务数N介于编译时所用计算机上硬件线程数的1-2倍之间。例如，在一台双核 E5520 计算机（2 个 CPU，每个 CPU 4 个内核，每个内核2个线程）上，要实现最快的编译速度，可以使用介于make -j16 到 make -j32 之间的命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j8</span><br></pre></td></tr></table></figure></li><li><p>编译中<br>  <img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Android%20%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/Android%E6%BA%90%E7%A0%81%E7%AD%89%E5%BE%85%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B.png" alt="image"></p></li></ul><h3 id="编译完成"><a href="#编译完成" class="headerlink" title="编译完成"></a>编译完成</h3><p>  <img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Android%20%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/%E7%BC%96%E8%AF%91%E5%AE%8C%E6%88%90.png" alt="image"></p><ul><li><p>运行模拟器</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//依次输入以下命令（如果是在编译成功源码之后直接想运行模拟器，则直接输入emulator命令就行，因为前面编译源码已经输入过以上两条命令）</span><br><span class="line"></span><br><span class="line">. build/envsetup.sh</span><br><span class="line"></span><br><span class="line">lunch(选择刚才你编译源码设置的目标版本)</span><br><span class="line"></span><br><span class="line">emulator</span><br></pre></td></tr></table></figure><p>   <img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Android%20%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/%E8%BF%90%E8%A1%8C%E6%A8%A1%E6%8B%9F%E5%99%A8.png" alt="image"></p></li></ul><h3 id="将源码导入Android-Studio-查看"><a href="#将源码导入Android-Studio-查看" class="headerlink" title="将源码导入Android Studio 查看"></a>将源码导入Android Studio 查看</h3><ul><li><p>编译idegen</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source build/envsetup.sh // 将执行文件设置为临时变量</span><br><span class="line">mmm development/tools/idegen/  //生成idegen.jar文件（#### build completed successfully (49 seconds) #### 标识生成idegen.jar文件）</span><br></pre></td></tr></table></figure></li><li><p>执行脚本 idegen.sh</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">. development/tools/idegen/idegen.sh</span><br></pre></td></tr></table></figure><p>  看到下图，表示编译idegen完成，执行成功后在asop的根目录下生成android.ipr和android.iml两个个文件：</p><ul><li>android.ipr 一般保存了工程相关的设置，比如modules和modules libraries的路径，编译器配置，入口点等。</li><li><p>android.iml 用来描述modules。它包括modules路径、 依赖关系，顺序设置等。一个项目可以包含多个 *.iml 文件。</p><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Android%20%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/%E7%BC%96%E8%AF%91idegen.png" alt="image"></p></li><li><p>打开Android studio，点击File&gt;Open，选择刚刚生成的android.ipr导入就可以了，依据个人机子性能问题，导入时间有快有慢。</p></li></ul></li></ul><h3 id="编译中遇到的坑"><a href="#编译中遇到的坑" class="headerlink" title="编译中遇到的坑"></a>编译中遇到的坑</h3><ul><li><p>Error: library-pathout/host/linux-x86/lib64/libsepolwrap.so does not exist</p><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Android%20%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/Android%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%A4%B1%E8%B4%A51.png" alt="image"> </p></li><li><p>解决 ： </p><blockquote><p>1.重新同步代码 并加入sudo apt-get install dpkg-dev libsdl1.2-dev libesd0-dev<br>2.确认是否配置好了JDK的环境变量 </p></blockquote></li><li><p>openJDK 配置环境变量方法</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.用gedit文本编辑器在/etc/profile中添加环境变量：</span><br><span class="line">命令 ： sudo gedit /etc/profile</span><br><span class="line"></span><br><span class="line">2.在打开的/etc/profile文件末尾添加下面几行：</span><br><span class="line">export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre </span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib </span><br><span class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>最后<br>到此，Android源码编译完成，源码编译是一个需要耐心的过程，希望看到文章的你也可以编译成功。文章中如果有错误，请大家给我提出来，大家一起学习进步，如果觉得我的文章给予你帮助，也请给我一个喜欢或者关注。    </p></blockquote><ul><li><p>参考资料</p><p><a href="https://source.android.com/source/initializing#optimizing-a-build-environment" target="_blank" rel="noopener">搭建编译环境</a></p><p><a href="https://blog.csdn.net/mcryeasy/article/details/60466837" target="_blank" rel="noopener">动手实现Android源码（AOSP）的下载、编译、运行、导入、调试</a></p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/" target="_blank" rel="noopener">Android 镜像使用帮助</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;android源码编译的四个流程:1.源码下载;2.构建编译环境;3.编译源码;4运行.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Ubuntu-18-04（虚拟机）环境下编译Android-源码&quot;&gt;&lt;a href=&quot;#Ubuntu-18
      
    
    </summary>
    
      <category term="Android进阶" scheme="https://www.maoqitian.com/categories/Android%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Android" scheme="https://www.maoqitian.com/tags/Android/"/>
    
      <category term="源码编译" scheme="https://www.maoqitian.com/tags/%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://www.maoqitian.com/2019/01/04/hello-world/"/>
    <id>https://www.maoqitian.com/2019/01/04/hello-world/</id>
    <published>2019-01-04T14:44:09.698Z</published>
    <updated>2019-01-04T14:44:09.699Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
