<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>maoqitian</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.maoqitian.com/"/>
  <updated>2019-01-14T08:05:09.090Z</updated>
  <id>https://www.maoqitian.com/</id>
  
  <author>
    <name>maoqitian</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Jenkins+Gitlab+Maven+Tomcat 持续集成，自动部署项目</title>
    <link href="https://www.maoqitian.com/2019/01/14/Jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    <id>https://www.maoqitian.com/2019/01/14/Jenkins持续集成/</id>
    <published>2019-01-14T07:55:49.000Z</published>
    <updated>2019-01-14T08:05:09.090Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>持续集成：Continuous Integration，简称CI，意思是，在一个项目中，任何人对代码库的任何改动，都会触发CI服务器自动对项目进行构建，自动运行测试，甚至自动部署到测试环境。这样做的好处就是，随时发现问题，随时修复。因为修复问题的成本随着时间的推移而增长，越早发现，修复成本越低。当你想要更新你的项目，只要动手提交代码到你的代码仓库，剩余的更新部署操作就只管交由CI服务器来完成就好，这次使用的CI工具是JenKins。</p><ul><li>搭建Jenkins持续集成服务器可以分为两大步骤，一是在服务器安装好所需的软件，二是配置我们的持续集成项目</li></ul></blockquote><h3 id="安装所需的各种软件"><a href="#安装所需的各种软件" class="headerlink" title="安装所需的各种软件"></a>安装所需的各种软件</h3><h4 id="安装启动-Jenkins"><a href="#安装启动-Jenkins" class="headerlink" title="安装启动 Jenkins"></a>安装启动 Jenkins</h4><ul><li>从Jenkins<a href="https://jenkins.io/" target="_blank" rel="noopener">官方网站</a>下载最新的rpm包<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">执行命令 rpm -ivh xxx.rpm  安装Jenkins</span><br><span class="line"></span><br><span class="line">//启动JenKins</span><br><span class="line">/etc/init.d/jenkins start </span><br><span class="line"></span><br><span class="line">浏览器输入 http://xxx服务器地址:8080/</span><br><span class="line"></span><br><span class="line">//默认端口号是8080</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/Jenkins%E5%90%AF%E5%8A%A81.png" alt="JenKins启动1"><br><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/JenKins%E5%90%AF%E5%8A%A8.png" alt="JenKins启动"></p><ul><li>JenKins默认端口号是8080，这与Tomcat默认端口号冲突，所有我们可以把Jenkins的端口号改成我们自己定义的端口号 9090<ul><li>修改端口号的文件为 /etc/sysconfig/jenkins，字段为JENKINS_PORT<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//执行命令进行修改，如果碰到无法启动Jnekins,无法启动（如遇此Starting Jenkins bash: /usr/bin/java: No such file or directory错误 ）修改 /etc/init.d/jenkins 加入 /opt/jdk1.8.0_181/bin/java原因</span><br><span class="line">//是Java的环境变量没有找到，一般使用centos服务默认安装openjdk，如果自己卸载openJdk并重新安装sun的JDK,则也需要在该文件中加入路径，如图所示</span><br><span class="line"></span><br><span class="line">vim /etc/sysconfig/jenkins </span><br><span class="line"></span><br><span class="line">//添加Java地址</span><br><span class="line"></span><br><span class="line">vim /etc/init.d/jenkins</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/%E4%BF%AE%E6%94%B9Jenkins%E7%AB%AF%E5%8F%A3.png" alt="修改Jenkins端口"><br><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/%E6%B7%BB%E5%8A%A0Java%E5%9C%B0%E5%9D%80.png" alt="添加Java地址"></p><ul><li>修改端口无法启动的情况，有可能是服务器防火墙没有添加端口的监听，导致无法访问</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/iptables</span><br><span class="line">  </span><br><span class="line">查看是否监听端口(如果配置了自己定义的端口，需要先访问该端口一次才能看到监听)</span><br><span class="line">  </span><br><span class="line">netstat -ntlp</span><br><span class="line">  </span><br><span class="line">//重启防火墙配置（不重启端口还是无法生效）</span><br><span class="line">service iptables restart</span><br></pre></td></tr></table></figure><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/%E6%B7%BB%E5%8A%A0%E6%96%B0%E7%9B%91%E5%90%AC%E7%9A%84%E7%AB%AF%E5%8F%A3.png" alt="添加新监听的端口"></p><h4 id="关闭Jenkins"><a href="#关闭Jenkins" class="headerlink" title="关闭Jenkins"></a>关闭Jenkins</h4><ul><li>只需要在访问jenkins服务器的网址url地址后加上exit。例如我jenkins的地址<a href="http://localhost:8080/，那么我只需要在浏览器地址栏上输入http://xxx:9090/exit" target="_blank" rel="noopener">http://localhost:8080/，那么我只需要在浏览器地址栏上输入http://xxx:9090/exit</a> 网址就能关闭jenkins服务.<h4 id="重启Jenkies"><a href="#重启Jenkies" class="headerlink" title="重启Jenkies"></a>重启Jenkies</h4></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//xxx:8080 是搭建Jenkins服务器地址</span><br><span class="line">http://xxx:8080/restart</span><br></pre></td></tr></table></figure><ul><li><p>重新加载配置信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/reload</span><br></pre></td></tr></table></figure></li><li><p>Jenkins的卸载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 卸载软件：rpm -e jenkins</span><br><span class="line"></span><br><span class="line">2. 删除遗留文件: find / -iname jenkins | xargs -n 1000 rm -rf</span><br></pre></td></tr></table></figure></li></ul><h4 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">查看Java相关的包信息： </span><br><span class="line"> rpm -qa|grep java （或rpm -qa|grep jdk，rpm安装后，包名里没有Java）</span><br><span class="line">卸载 </span><br><span class="line">yum -y remove java [包名] </span><br><span class="line">例如 </span><br><span class="line">yum –y remove java java-1.8.0-openjdk-1.8.0.131-3.b12.el7_3.x86_64 </span><br><span class="line"></span><br><span class="line">jdk 卸载方法 https://blog.csdn.net/xyj0808xyj/article/details/52444694</span><br><span class="line"></span><br><span class="line">//解压到指定目录</span><br><span class="line">tar -zxvf jdk-8u181-linux-x64.tar.gz -C /opt/</span><br><span class="line"></span><br><span class="line">//编辑配置文件</span><br><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line">export JAVA_HOME=/opt/jdk1.8.0_181</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib:$JAVA_HOME/jre/lib:$CLASSPATH </span><br><span class="line">  </span><br><span class="line">//更新配置文件</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h4 id="安装Tomcat"><a href="#安装Tomcat" class="headerlink" title="安装Tomcat"></a>安装Tomcat</h4><ul><li>官网下载 <a href="https://tomcat.apache.org/download-80.cgi" target="_blank" rel="noopener">Tomcat8.5</a></li><li>直接解压到服务器（注意这里指的服务器是项目部署的服务器，应该是和部署JenKins的服务器不同） </li><li>强制关闭 tomcat 命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//强制关闭</span><br><span class="line">ps -ef|grep tomcat</span><br><span class="line">    </span><br><span class="line">//杀掉无法关闭进程</span><br><span class="line">kill -9 XXXX</span><br></pre></td></tr></table></figure></li></ul><h4 id="安装-git-安装在部署JenKins服务器上"><a href="#安装-git-安装在部署JenKins服务器上" class="headerlink" title="安装 git (安装在部署JenKins服务器上)"></a>安装 git (安装在部署JenKins服务器上)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">安装依赖</span><br><span class="line">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel asciidoc</span><br><span class="line"></span><br><span class="line">yum install  gcc perl-ExtUtils-MakeMaker</span><br><span class="line"></span><br><span class="line">如果已经安装了git,但是版本太老，可以先卸载</span><br><span class="line">yum remove git </span><br><span class="line"></span><br><span class="line">下载git包解压</span><br><span class="line">tar -vxf git-2.15.1.tar.gz -C /opt</span><br><span class="line"></span><br><span class="line">进入git 目录</span><br><span class="line">cd /opt/git-2.18.0/</span><br><span class="line"></span><br><span class="line">执行以下命令</span><br><span class="line"></span><br><span class="line">make prefix=/usr/local/git all</span><br><span class="line"></span><br><span class="line">make prefix=/usr/local/git install</span><br><span class="line"></span><br><span class="line">echo &quot;export PATH=$PATH:/usr/local/git/bin&quot; &gt;&gt; /etc/profile  //配置环境变量</span><br><span class="line"></span><br><span class="line">source /etc/profile //跟新配置文件</span><br><span class="line"></span><br><span class="line">git --version 查看git版本</span><br></pre></td></tr></table></figure><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/%E5%AE%89%E8%A3%85git%E7%89%88%E6%9C%AC.png" alt="安装git版本"></p><h4 id="安装-maven-安装在部署JenKins服务器上"><a href="#安装-maven-安装在部署JenKins服务器上" class="headerlink" title="安装 maven(安装在部署JenKins服务器上)"></a>安装 maven(安装在部署JenKins服务器上)</h4><ul><li>后台项目为spring-boot搭建，需要安装maven</li><li>下载 <a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">maven 3.5.4</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">执行以下命令</span><br><span class="line">tar -zxvf apache-maven-3.3.9-bin.tar.gz -C /opt</span><br><span class="line"></span><br><span class="line">在/etc/profile文件末尾增加以下配置</span><br><span class="line">M2_HOME=/opt/apache-maven-3.5.4 （注意这里是maven的安装路径）</span><br><span class="line"> export PATH=$&#123;M2_HOME&#125;/bin:$&#123;PATH&#125;</span><br><span class="line"> </span><br><span class="line">重载/etc/profile这个文件</span><br><span class="line">  source /etc/profile</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/maven%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.png" alt="maven安装成功"></p><h4 id="GitLab服务器配置"><a href="#GitLab服务器配置" class="headerlink" title="GitLab服务器配置"></a>GitLab服务器配置</h4><ul><li>由于公司已经搭建好Gitlab服务器，所以我也没有配置过Gitlab，不过Gitlab配置网上已经有很多资料，可以自行百度。</li></ul><h3 id="Jenkins基础工具配置、新建项目配置"><a href="#Jenkins基础工具配置、新建项目配置" class="headerlink" title="Jenkins基础工具配置、新建项目配置"></a>Jenkins基础工具配置、新建项目配置</h3><h4 id="Jenkins配置"><a href="#Jenkins配置" class="headerlink" title="Jenkins配置"></a>Jenkins配置</h4><ul><li>第一次进入Jnekins,首先根据提示找到安装服务器的密码</li><li>如果服务器可以联网，则选择他推荐的插件直接安装，如果服务器无法连接外网，只是在公司内网环境，则可以离线下载插件再上传到我们服务器的Jenkin中，<a href="https://plugins.jenkins.io/" target="_blank" rel="noopener">离线插件下载地址</a>，这种方式需要耐心，因为需要安装的插件可不止一两个，如果你的服务器不能上网，我这有一份下载好的插件，可以自行去下载（<a href="https://github.com/maoqitian/MaoMdPhoto/tree/master/Jenkins%E6%8F%92%E4%BB%B6" target="_blank" rel="noopener">下载地址</a>）</li><li>在Jenkins系统管理模块的系统配置中配置我们的Gitlab,需要登录到Gitlab中获取APIToken<br><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AEGitLab.png" alt="系统配置GitLab"><br><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/%E8%8E%B7%E5%8F%96API%20Token.png" alt="获取API Token"><br><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/GitLab%20API%20Token%E9%85%8D%E7%BD%AE%20.png" alt="GitLab API Token配置 "><h4 id="生成ssh-key（在部署Jenkins服务器上生成）"><a href="#生成ssh-key（在部署Jenkins服务器上生成）" class="headerlink" title="生成ssh key（在部署Jenkins服务器上生成）"></a>生成ssh key（在部署Jenkins服务器上生成）</h4></li><li>配置SSH KEY ,用于后续项目可以通过Jenkins部署到应用服务器</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//输入命令，一路回车</span><br><span class="line">ssh-keygen -t rsa </span><br><span class="line">         </span><br><span class="line">//现在你的私钥被放在了~/.ssh/id_rsa 这个文件里，而公钥被放在了 ~/.ssh/id_rsa.pub 这个文件里</span><br><span class="line">         </span><br><span class="line">//可以将私钥配置到JneKins的系统设置中，配置框选项是需要Jenkins安装SSH插件的，如下图所示</span><br><span class="line">         </span><br><span class="line">//公钥则配置到各个应用服务器的这个目录下/root/.ssh/authorized_keys，没有authorized_keys则创建这个文件，如下图所示</span><br><span class="line">         </span><br><span class="line">//最后测试应用服务器是否都能成功连接，如下图所示</span><br></pre></td></tr></table></figure><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/ssh%E7%A7%81%E9%92%A5%E9%85%8D%E7%BD%AE.png" alt="ssh私钥配置"><br><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/%E5%85%AC%E9%92%A5%E5%A4%8D%E5%88%B6%E5%88%B0%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8authorized_keys.png" alt="公钥复制到应用服务器authorized_keys"><br><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/%E6%B5%8B%E8%AF%95%E9%85%8D%E7%BD%AE%E5%85%AC%E9%92%A5%E7%9A%84%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%98%AF%E5%90%A6%E8%BF%9E%E6%8E%A5%E6%88%90%E5%8A%9F.png" alt="测试配置公钥的应用服务器是否连接成功"></p><h4 id="工具配置"><a href="#工具配置" class="headerlink" title="工具配置"></a>工具配置</h4><ul><li>接下来还是系统管理模块中的全局工具配置 Jenkins的 JDK、git和maven。前面我们已经把这些工具都给安装了，现在配置到Jenkins中，如下图所示</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/%E9%85%8D%E7%BD%AEJenkins%20jdk%20git.png" alt="配置Jenkins jdk git"><br><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/%E9%85%8D%E7%BD%AEJenkins%20maven.png" alt="配置Jenkins maven"></p><h4 id="新建项目配置"><a href="#新建项目配置" class="headerlink" title="新建项目配置"></a>新建项目配置</h4><ul><li>新建一个maven项目（没有maven项目选项则需要下载对应插件）</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/%E6%96%B0%E5%BB%BAmaven%E9%A1%B9%E7%9B%AE.png" alt="新建maven项目"></p><ul><li>首先配置源码管理，如图</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%BA%90%E7%A0%81%E7%AE%A1%E7%90%86%E9%85%8D%E7%BD%AE.png" alt="新建项目源码管理配置"></p><ul><li>配置项目构建触发器（Gitlab Hook Plugin， Outbound WebHook for build events，Build Authorization Token Root， Success<br>Build Token Trigger插件）</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/%E9%85%8D%E7%BD%AE%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8.png" alt="配置项目构建触发器"></p><ul><li>配置maven项目编译</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/%E9%85%8D%E7%BD%AEmaven%E9%A1%B9%E7%9B%AE%E7%BC%96%E8%AF%91.png" alt="配置maven项目编译"></p><ul><li>项目构建成功后部署应用服务器的配置 </li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E6%88%90%E5%8A%9F%E5%90%8E%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E9%85%8D%E7%BD%AE.png" alt="项目构建成功后部署应用服务器的配置"></p><ul><li>Tomcat重启脚本(应当放在与Tomcat目录同路径下)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#! /bin/sh</span><br><span class="line">echo &apos;####################开始自动部署####################&apos;</span><br><span class="line">export JAVA_HOME=/usr/local/jdk1.8.0_181</span><br><span class="line">path=`pwd` #当前路径</span><br><span class="line">tomcatPath=/data/XXXX/tomcat_gxxmt_8080 #指定tomcat文件目录名称</span><br><span class="line">cd ../$tomcatPath/bin #进入tomcat的bin目录</span><br><span class="line">PID=$(ps -fu `whoami`|grep tomcat|grep -v grep|awk &apos;&#123;print $2&#125;&apos;)</span><br><span class="line">if [ -z &quot;$PID&quot; ];then</span><br><span class="line"> echo &quot;no tomcat process&quot;</span><br><span class="line">else</span><br><span class="line">./shutdown.sh #停止tomcat服务</span><br><span class="line">fi</span><br><span class="line">cd ../webapps #进入tomcat的webapps目录</span><br><span class="line">rm -rf XXXX-api</span><br><span class="line">echo &apos;####################删除完成####################&apos;</span><br><span class="line">#rm -fr gxxmt-api.war #删除test文件目录</span><br><span class="line">#mv gxxmt-api.war gxxmt-api.war.$(date +%Y%m%d) #备份webapps下的test16 cp $path/test.war ./ #复制test.war到webapps路径下</span><br><span class="line">#cd /var/lib/jenkins/workspace/gxxmt-api/gxxmt-api/target/</span><br><span class="line">#cp gxxmt-api.war /data/gxxmt/tomcat_gxxmt_8080/webapps/</span><br><span class="line">cd ../bin</span><br><span class="line">./startup.sh #启动tomcat服务</span><br><span class="line">echo &apos;####################部署结束####################&apos;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>项目构建成功并发布到了对应服务器执行对应脚本，这里就可以看到JenKins的灵活性，可以配置多台发布的应用服务器的多个Tomcat,灵活自动部署应用服务器配置</p></li><li><p>项目构建编译部署成功</p></li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E7%BC%96%E8%AF%91%E9%83%A8%E7%BD%B2%E6%88%90%E5%8A%9F.png" alt="项目构建编译部署成功"></p><h3 id="集成部署遇到的问题"><a href="#集成部署遇到的问题" class="headerlink" title="集成部署遇到的问题"></a>集成部署遇到的问题</h3><h4 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h4><ul><li>ERROR: Exception when publishing, exception message [Exec timed out or was interrupted after 120,000 ms]（执行脚本没有正常退出，导致部署超时）<br><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/%E9%94%99%E8%AF%AF1.png" alt="错误1"></li><li><p>解决：脚本执行加入忽略输入（nohup ….）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nohup sh /data/gxxmt-api/restart.sh</span><br><span class="line">//当我们使用nohup命令的的时候，日志会被打印到nohup.out文件中去。</span><br><span class="line">//如果我们不做任何处理，会随着每次的重新启动，nohup.out会越来越大</span><br><span class="line">//。所以我在我执行的脚本中添加了</span><br><span class="line">cp /dev/null nohup.out</span><br></pre></td></tr></table></figure></li><li><p>在jenkins项目配置SSH Publishers勾选了Exec in pty，表示执行完脚本立即退出<br><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/%E9%94%99%E8%AF%AF1%E8%A7%A3%E5%86%B3%E5%8B%BE%E9%80%89Exec%20in%20pty.png" alt="错误1解决勾选Exec in pty"></p><h4 id="问题二，Jenkins目录迁移"><a href="#问题二，Jenkins目录迁移" class="headerlink" title="问题二，Jenkins目录迁移"></a>问题二，Jenkins目录迁移</h4></li><li>jenkins主目录迁移，jenkins默认主目录一般都是安装在系统盘，运行一段时间后项目部署的历史版本，日志文件，工作控件都会占用大量的系统空间，这样就会引发系统盘磁盘空间不足，首先我们可以修改jenkins主目录<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//更改主目录</span><br><span class="line">vim /etc/sysconfig/jenkins</span><br><span class="line">JENKINS_HOME=&quot;/data/jenkins&quot;</span><br><span class="line"></span><br><span class="line">复制 /var/lib/jenkins/ 目录到 /data目录下</span><br><span class="line"></span><br><span class="line">修改目录用户权限</span><br><span class="line"></span><br><span class="line">chown -R jenkins:jenkins /data/jenkins</span><br><span class="line"></span><br><span class="line">重启 /etc/sysconfig/jenkins restart</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/%E4%B8%BB%E7%9B%AE%E5%BD%95%E4%BF%AE%E6%94%B9%E6%88%90%E5%8A%9F.png" alt="主目录修改成功"></p><ul><li>其次我们还可以在项目配置中设置丢弃历史构建</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/%E8%AE%BE%E7%BD%AE%E4%B8%A2%E5%BC%83%E5%8E%86%E5%8F%B2%E6%9E%84%E5%BB%BA.png" alt="设置丢弃历史构建"></p><h4 id="问题三，代码提交触发构建"><a href="#问题三，代码提交触发构建" class="headerlink" title="问题三，代码提交触发构建"></a>问题三，代码提交触发构建</h4><ul><li>Url is blocked: Requests to the local network are not allowed Gitlab设置Jenkins的webhook地址无法设置</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/WebHook%E5%9C%B0%E5%9D%80%E6%97%A0%E6%B3%95%E8%AE%BE%E7%BD%AE.png" alt="WebHook地址无法设置"></p><ul><li>升级新版Gitlab，要允许WebHook，需要在在Gitlab的Admin账户中，在settings标签下面，找到OutBound Request，勾选上Allow requests to the local network from hooks and services ，保存更改即可解决问题（如下图所示）</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/Gitlab%20%E5%85%81%E8%AE%B8WebHook.png" alt="Gitlab 允许WebHook"></p><h4 id="问题四"><a href="#问题四" class="headerlink" title="问题四"></a>问题四</h4><ul><li>Gradle 编译Android 项目 /lib64/libc.so.6: version `GLIBC_2.14’ not found，系统是CentOS 6.9，最高支持glibc的版本为2.12，而研发程序要2.14版本，所以需要升级。<br>  <img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/glibc_2.14%E5%BA%93%E6%97%A0%E6%B3%95%E6%89%BE%E5%88%B0.png" alt="glibc_2.14库无法找到"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">//查看系统版本</span><br><span class="line">cat /etc/redhat-release</span><br><span class="line">//查看glibc库版本</span><br><span class="line">strings /lib64/libc.so.6 |grep GLIBC_</span><br><span class="line">//下载glibc库 并安装</span><br><span class="line">#下载</span><br><span class="line">wget http://ftp.gnu.org/gnu/glibc/glibc-2.14.tar.gz </span><br><span class="line">wget http://ftp.gnu.org/gnu/glibc/glibc-ports-2.14.tar.gz </span><br><span class="line">#解压</span><br><span class="line">tar -xvf  glibc-2.14.tar.gz </span><br><span class="line">tar -xvf  glibc-ports-2.14.tar.gz</span><br><span class="line">#创建相关目录</span><br><span class="line">mv glibc-ports-2.14 glibc-2.14/ports</span><br><span class="line">mkdir glibc-build-2.14</span><br><span class="line">cd glibc-build-2.14/ </span><br><span class="line"></span><br><span class="line">#生成C编译的环境</span><br><span class="line">yum -y install gcc</span><br><span class="line"></span><br><span class="line">#编译C</span><br><span class="line">../glibc-2.14/configure  --prefix=/usr --disable-profile --enable-add-ons --with-headers=/usr/include --with-binutils=/usr/bin</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"># 安装刚才编译好的 libc.so</span><br><span class="line">makeinstall </span><br><span class="line"></span><br><span class="line"># 查看glibc库版本</span><br><span class="line">strings /lib64/libc.so.6 |grep GLIBC_</span><br></pre></td></tr></table></figure></li></ul><h3 id="最后说点"><a href="#最后说点" class="headerlink" title="最后说点"></a>最后说点</h3><ul><li><p>到此，我们的持续集成服务器已经搭建完成，这时候你只要动手提交一下代码到你前面构建触发器设置的分支（一般为主分支），剩余的项目构建，部署等一系列重复繁琐的工作就交由Jenkins帮我们自动完成就可以了，省时又方便。文章中如果有错误，请大家给我提出来，大家一起学习进步，如果觉得我的文章给予你帮助，也请给我一个喜欢或者关注。</p></li><li><p>参考链接:</p><ul><li><p><a href="https://blog.csdn.net/xiyatu123/article/details/53039749" target="_blank" rel="noopener">jenkins的安装与使用（基于 centos 7）</a></p></li><li><p><a href="https://www.jianshu.com/p/d4f2953f3ce0" target="_blank" rel="noopener">jenkins maven Spring Boot git Linux持续集成环境搭建教程</a></p></li><li><a href="https://blog.csdn.net/ouyang_peng/article/details/79974407" target="_blank" rel="noopener">解决SDK升级到27.0.3遇到的GLIBC_2.14 not found</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;持续集成：Continuous Integration，简称CI，意思是，在一个项目中，任何人对代码库的任何改动，都会触发CI服务器自动对项目进行构建，自动运行测试，甚至自动部署到测试环境。这样做的好处就是，随时发现问题，随时修复。因为修复问题的成
      
    
    </summary>
    
      <category term="持续集成（CI）" scheme="https://www.maoqitian.com/categories/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%88CI%EF%BC%89/"/>
    
    
      <category term="CentOS" scheme="https://www.maoqitian.com/tags/CentOS/"/>
    
      <category term="Maven" scheme="https://www.maoqitian.com/tags/Maven/"/>
    
      <category term="Jenkins" scheme="https://www.maoqitian.com/tags/Jenkins/"/>
    
      <category term="git" scheme="https://www.maoqitian.com/tags/git/"/>
    
      <category term="GitLab" scheme="https://www.maoqitian.com/tags/GitLab/"/>
    
      <category term="Tomcat" scheme="https://www.maoqitian.com/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>FastDFS服务器集群部署和集成客户端到SpringBoot</title>
    <link href="https://www.maoqitian.com/2019/01/12/FastDFS%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2%E5%92%8C%E9%9B%86%E6%88%90%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%88%B0SpringBoot/"/>
    <id>https://www.maoqitian.com/2019/01/12/FastDFS服务器集群部署和集成客户端到SpringBoot/</id>
    <published>2019-01-12T08:33:11.000Z</published>
    <updated>2019-01-14T08:11:04.928Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题，同时也能做到在集群环境下一台机子上传文件，同时该组下的其他节点下也备份了上传的文件。做分布式系统开发时，其中要解决的一个问题就是图片、音视频、文件共享的问题和数据备份，分布式文件系统正好可以解决这个需求。FastDFS的服务主要有两个角色Tracker和Storage，Tracker服务用于负责调度storage节点与client通信，在访问上起负载均衡的作用，和记录storage节点的运行状态，是连接client和storage节点的枢纽，Storage用于保存文件</p></blockquote><h3 id="1-FastDFS集群部署"><a href="#1-FastDFS集群部署" class="headerlink" title="1.FastDFS集群部署"></a>1.FastDFS集群部署</h3><h4 id="整体部署模块图"><a href="#整体部署模块图" class="headerlink" title="整体部署模块图"></a>整体部署模块图</h4><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/FastDFS/FastDFS%E9%83%A8%E7%BD%B2%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="FastDFS部署示意图"></p><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>centos系统版本</td><td>6.9</td></tr><tr><td>libfatscommon</td><td>FastDFS分离出的一些公用函数包</td></tr><tr><td>FastDFS</td><td>FastDFS主程序</td></tr><tr><td>fastdfs-nginx-module</td><td>FastDFS和nginx的关联模块</td></tr><tr><td>nginx</td><td>nginx1.15.5</td></tr></tbody></table><h4 id="安装编译环境"><a href="#安装编译环境" class="headerlink" title="安装编译环境"></a>安装编译环境</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install git gcc gcc-c++ make automake autoconf libtool pcre pcre-devel zlib zlib-devel openssl-devel wget vim -y</span><br></pre></td></tr></table></figure><h4 id="磁盘安装路径说明"><a href="#磁盘安装路径说明" class="headerlink" title="磁盘安装路径说明"></a>磁盘安装路径说明</h4><table><thead><tr><th>说明</th><th>位置</th></tr></thead><tbody><tr><td>FastDFS所以安装包安装位置</td><td>/usr/local/src</td></tr><tr><td>tracker数据</td><td>/data/fdfs/tracker</td></tr><tr><td>Storage数据</td><td>/data/fdfs/Storage</td></tr><tr><td>配置文件路径</td><td>/etc/fdfs</td></tr></tbody></table><h4 id="安装libfatscommon"><a href="#安装libfatscommon" class="headerlink" title="安装libfatscommon"></a>安装libfatscommon</h4><ul><li><p><a href="https://github.com/happyfish100/libfastcommon" target="_blank" rel="noopener">下载libfatscommon</a></p></li><li><p>解压、安装</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unzip libfastcommon-master.zip</span><br><span class="line">cd libfastcommon-master</span><br><span class="line">./make.sh &amp;&amp; ./make.sh install #编译安装</span><br></pre></td></tr></table></figure><h4 id="安装FastDFS"><a href="#安装FastDFS" class="headerlink" title="安装FastDFS"></a>安装FastDFS</h4><ul><li><a href="https://github.com/happyfish100/fastdfs" target="_blank" rel="noopener">下载FastDFS</a></li><li>解压、安装</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">unzip fastdfs-master.zip</span><br><span class="line">cd fastdfs-master</span><br><span class="line">./make.sh &amp;&amp; ./make.sh install #编译安装</span><br><span class="line">cp /etc/fdfs/tracker.conf.sample /etc/fdfs/tracker.conf</span><br><span class="line">cp /etc/fdfs/storage.conf.sample /etc/fdfs/storage.conf</span><br><span class="line">cp /etc/fdfs/client.conf.sample /etc/fdfs/client.conf #客户端文件，测试用</span><br><span class="line">cp /usr/local/src/fastdfs/conf/http.conf /etc/fdfs/ #供nginx访问使用</span><br><span class="line">cp /usr/local/src/fastdfs/conf/mime.types /etc/fdfs/ #供nginx访问使用</span><br></pre></td></tr></table></figure><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/FastDFS/etc%E7%9B%AE%E5%BD%95%E4%B8%8Bfdfs%E7%9B%AE%E5%BD%95.png" alt="etc目录下fdfs目录">    </p><h4 id="安装fastdfs-nginx-module"><a href="#安装fastdfs-nginx-module" class="headerlink" title="安装fastdfs-nginx-module"></a>安装fastdfs-nginx-module</h4><ul><li><a href="https://github.com/happyfish100/fastdfs-nginx-module" target="_blank" rel="noopener">下载fastdfs-nginx-module</a></li><li>解压、安装</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unzip fastdfs-nginx-module-master.zip</span><br><span class="line">cp /usr/local/src/fastdfs-nginx-module-master/src/mod_fastdfs.conf /etc/fdfs #复制配置文件到fdfs目录</span><br></pre></td></tr></table></figure><h4 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h4><ul><li><a href="http://nginx.org/download/nginx-1.15.5.tar.gz" target="_blank" rel="noopener">下载nginx</a> </li><li>解压、安装</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.15.5.tar.gz</span><br><span class="line">cd nginx-1.15.5</span><br><span class="line">#添加fastdfs-nginx-module模块</span><br><span class="line">./configure --add-module=/usr/local/src/fastdfs-nginx-module-master/src/ </span><br><span class="line">make &amp;&amp; make install #编译安装</span><br></pre></td></tr></table></figure><h4 id="FastDFS集群部署配置"><a href="#FastDFS集群部署配置" class="headerlink" title="FastDFS集群部署配置"></a>FastDFS集群部署配置</h4><ul><li><p>tracker配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#服务器ip为 xxx.xxx.78.12, xxx.xxx.78.13</span><br><span class="line">vim /etc/fdfs/tracker.conf</span><br><span class="line">#需要修改的内容如下</span><br><span class="line">port=22122  # tracker服务器端口（默认22122,一般不修改）</span><br><span class="line">base_path=/data/fdfs/tracker #存储日志和数据的根目录</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/FastDFS/tracker%E9%85%8D%E7%BD%AE.png" alt="tracker配置"></p><ul><li>Storage配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/fdfs/storage.conf</span><br><span class="line">#需要修改的内容如下</span><br><span class="line">port=23000  # storage服务端口（默认23000,一般不修改）</span><br><span class="line">base_path=/data/fdfs/storage  # 数据和日志文件存储根目录</span><br><span class="line">store_path0=/data/fdfs/storage  # 第一个存储目录</span><br><span class="line">tracker_server=xxx.xxx.78.12:22122  # 服务器1</span><br><span class="line">tracker_server=xxx.xxx.78.13:22122  # 服务器2</span><br><span class="line">http.server_port=8888  # http访问文件的端口(默认8888,看情况修改,和nginx中保持一致)</span><br></pre></td></tr></table></figure><ul><li>client配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/fdfs/client.conf</span><br><span class="line">#需要修改的内容如下</span><br><span class="line">base_path=/home/moe/dfs</span><br><span class="line">tracker_server=xxx.xxx.78.12:22122  # 服务器1</span><br><span class="line">tracker_server=xxx.xxx.78.13:22122  # 服务器2</span><br></pre></td></tr></table></figure><ul><li>配置nginx访问<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/fdfs/mod_fastdfs.conf</span><br><span class="line">#需要修改的内容如下</span><br><span class="line">tracker_server=xxx.xxx.78.12:22122  # 服务器1</span><br><span class="line">tracker_server=xxx.xxx.78.13:22122  # 服务器2</span><br><span class="line">url_have_group_name=true</span><br><span class="line">store_path0=/data/fdfs/storage</span><br><span class="line"></span><br><span class="line">#配置nginx.config</span><br><span class="line">vim /usr/local/nginx/conf/nginx.conf</span><br><span class="line">#添加如下配置</span><br><span class="line">server &#123;</span><br><span class="line">listen       8888;    ## 该端口为storage.conf中的http.server_port相同</span><br><span class="line">server_name  localhost;</span><br><span class="line">location ~/group[0-9]/ &#123;</span><br><span class="line">   ngx_fastdfs_module;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">error_page   500 502 503 504  /50x.html;</span><br><span class="line">location = /50x.html &#123;</span><br><span class="line">root   html;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="启动服务、测试"><a href="#启动服务、测试" class="headerlink" title="启动服务、测试"></a>启动服务、测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">启动之前我们还需要在防火墙开通端口</span><br><span class="line">vim  /etc/sysconfig/iptables</span><br><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 22122 -j ACCEPT</span><br><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 23000 -j ACCEPT</span><br><span class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 8888 -j ACCEPT</span><br><span class="line"></span><br><span class="line">service iptables restart #重启防火墙</span><br></pre></td></tr></table></figure><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/FastDFS/%E9%98%B2%E7%81%AB%E5%A2%99%E7%AB%AF%E5%8F%A3.png" alt="防火墙端口"></p><ul><li>每个服务的启动、关闭和重启操作<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#tracker</span><br><span class="line">/etc/init.d/fdfs_trackerd start #启动tracker服务</span><br><span class="line">/etc/init.d/fdfs_trackerd restart #重启动tracker服务</span><br><span class="line">/etc/init.d/fdfs_trackerd stop #停止tracker服务</span><br><span class="line">chkconfig fdfs_trackerd on #自启动tracker服务</span><br><span class="line"></span><br><span class="line">#storage</span><br><span class="line">/etc/init.d/fdfs_storaged start #启动storage服务</span><br><span class="line">/etc/init.d/fdfs_storaged restart #重动storage服务</span><br><span class="line">/etc/init.d/fdfs_storaged stop #停止动storage服务</span><br><span class="line">chkconfig fdfs_storaged on #自启动storage服务</span><br><span class="line"></span><br><span class="line">#nginx</span><br><span class="line">/usr/local/nginx/sbin/nginx #启动nginx</span><br><span class="line">/usr/local/nginx/sbin/nginx -s reload #重启nginx</span><br><span class="line">/usr/local/nginx/sbin/nginx -s stop #停止nginx</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/FastDFS/%E6%9F%A5%E7%9C%8B%E8%BF%90%E8%A1%8C%E7%9A%84%E6%9C%8D%E5%8A%A1.png" alt="查看运行的服务"></p><h4 id="检测集群"><a href="#检测集群" class="headerlink" title="检测集群"></a>检测集群</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 会显示会有几台storage服务器,有2台就会显示 Storage 1-Storage 2的详细信息</span><br><span class="line">/usr/bin/fdfs_monitor /etc/fdfs/storage.conf</span><br></pre></td></tr></table></figure><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/FastDFS/%E6%A3%80%E6%B5%8B%E9%9B%86%E7%BE%A41.png" alt="检测集群1"></p><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/FastDFS/%E6%A3%80%E6%B5%8B%E9%9B%86%E7%BE%A42.png" alt="检测集群2"></p><h4 id="图片上传测试"><a href="#图片上传测试" class="headerlink" title="图片上传测试"></a>图片上传测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#上传成功返回 文件访问 ID</span><br><span class="line"># fdfs_upload_file 客户端配置文件      上传文件路径</span><br><span class="line">fdfs_upload_file /etc/fdfs/client.conf /data/test.png</span><br></pre></td></tr></table></figure><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/FastDFS/%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E6%88%90%E5%8A%9F.png" alt="上传文件成功"></p><h4 id="测试文件访问"><a href="#测试文件访问" class="headerlink" title="测试文件访问"></a>测试文件访问</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://xxx.xxx.78.12/group1/M00/00/00/rB9ODFvXuSiAWBYBAALSAkm_6RQ360.png</span><br><span class="line">http://xxx.xxx.78.13/group1/M00/00/00/rB9ODFvXuSiAWBYBAALSAkm_6RQ360.png</span><br></pre></td></tr></table></figure><ul><li>测试nginx默认端口80 访问刚刚上传的文件，两个地址都能访问通一个文件，达到数据备份目的。</li></ul><blockquote><p>至此，FastDFS服务器部署完成    </p></blockquote><h3 id="FastDFS客户端集成到SpringBoot"><a href="#FastDFS客户端集成到SpringBoot" class="headerlink" title="FastDFS客户端集成到SpringBoot"></a>FastDFS客户端集成到SpringBoot</h3><h4 id="编译获取FastDFS-jar包"><a href="#编译获取FastDFS-jar包" class="headerlink" title="编译获取FastDFS jar包"></a>编译获取FastDFS jar包</h4><ul><li>首先根据官方源码提示，我们先下载源码使用maven编译成jar包放到公司maven私服（Nexus），或者你本地的maven私服（也有其他ant等方式，具体请查看github）<a href="https://github.com/happyfish100/fastdfs-client-java" target="_blank" rel="noopener">FastDFS-java-client-SDK源码下载地址</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#编译jar包（解压下载的FastDFS-java-client-SDK源码，使用mvn命令需要先有maven环境）</span><br><span class="line">mvn clean install</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/FastDFS/%E7%BC%96%E8%AF%91%E6%89%93%E5%8C%85FastDFS-java-client.png" alt="编译打包FastDFS-java-client"></p><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/FastDFS/fastdfs-client-java%E6%89%93%E5%8C%85%E6%88%90%E5%8A%9F.png" alt="fastdfs-client-java打包成功"></p><h4 id="maven项目pom-xml中添加依赖"><a href="#maven项目pom-xml中添加依赖" class="headerlink" title="maven项目pom.xml中添加依赖"></a>maven项目pom.xml中添加依赖</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.csource&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;fastdfs-client-java&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.27-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ul><li>接下来我们在项目resources目录下添加fdfs_client.conf文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">connect_timeout = 30</span><br><span class="line">network_timeout = 30</span><br><span class="line">charset = UTF-8</span><br><span class="line">http.tracker_http_port = 80</span><br><span class="line">http.anti_steal_token = no</span><br><span class="line">http.secret_key = 123456</span><br><span class="line">#前面配置的集群tracker服务器地址</span><br><span class="line">tracker_server = xxx.xxx.78.12:22122</span><br><span class="line">tracker_server = xxx.xxx.78.13:22122</span><br></pre></td></tr></table></figure><h4 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h4><ul><li>写一个上传文件对象类</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @Author: maoqitian</span><br><span class="line"> * @Date: 2018/10/26 0026 17:57</span><br><span class="line"> * @Description: FastDFS 文件类</span><br><span class="line"> */</span><br><span class="line"> public class FastDFSFileEntity &#123;</span><br><span class="line"> //文件名称</span><br><span class="line"> private String name;</span><br><span class="line"> //内容</span><br><span class="line"> private byte[] content;</span><br><span class="line"> //文件类型</span><br><span class="line"> private String ext;</span><br><span class="line"> //md5值</span><br><span class="line"> private String md5;</span><br><span class="line"> //作者</span><br><span class="line"> private String author;</span><br><span class="line"> public FastDFSFileEntity(String name, byte[] content, String ext, String height,</span><br><span class="line">                  String width, String author) &#123;</span><br><span class="line">   super();</span><br><span class="line">   this.name = name;</span><br><span class="line">   this.content = content;</span><br><span class="line">   this.ext = ext;</span><br><span class="line">   this.author = author;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public FastDFSFileEntity(String name, byte[] content, String ext) &#123;</span><br><span class="line">   super();</span><br><span class="line">   this.name = name;</span><br><span class="line">   this.content = content;</span><br><span class="line">   this.ext = ext;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public String getName() &#123;</span><br><span class="line">   return name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public void setName(String name) &#123;</span><br><span class="line">   this.name = name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public byte[] getContent() &#123;</span><br><span class="line">   return content;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public void setContent(byte[] content) &#123;</span><br><span class="line">   this.content = content;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public String getExt() &#123;</span><br><span class="line">   return ext;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public void setExt(String ext) &#123;</span><br><span class="line">   this.ext = ext;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public String getMd5() &#123;</span><br><span class="line">   return md5;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public void setMd5(String md5) &#123;</span><br><span class="line">   this.md5 = md5;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public String getAuthor() &#123;</span><br><span class="line">   return author;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public void setAuthor(String author) &#123;</span><br><span class="line">   this.author = author;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>编写FastDFS操作类，主要是加载初始化配置Tracker服务器，文件上传，下载，删除等操作工具类</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @Author: maoqitian</span><br><span class="line"> * @Date: 2018/10/29 0029 9:30</span><br><span class="line"> * @Description: FastDFS 操作类</span><br><span class="line"> */</span><br><span class="line"> public class FastDFSClient &#123;</span><br><span class="line"></span><br><span class="line">  private static org.slf4j.Logger logger = LoggerFactory.getLogger(FastDFSClient.class);</span><br><span class="line">  //双重守护单例</span><br><span class="line">  private static volatile FastDFSClient mInstance;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 加载配置信息</span><br><span class="line">   **/</span><br><span class="line">  static &#123;</span><br><span class="line">   try &#123;</span><br><span class="line">       String filePath=new ClassPathResource(&quot;fdfs_client.conf&quot;).getFile().getAbsolutePath();</span><br><span class="line">       ClientGlobal.init(filePath);</span><br><span class="line">   &#125;catch (Exception e)&#123;</span><br><span class="line">       logger.error(&quot;FastDFS Client Init Fail!&quot;,e);</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  private FastDFSClient()&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   public static FastDFSClient getInstance()&#123;</span><br><span class="line">   if(mInstance == null)&#123;</span><br><span class="line">      synchronized (FastDFSClient.class)&#123;</span><br><span class="line">          if(mInstance == null)&#123;</span><br><span class="line">              mInstance=new FastDFSClient();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   return mInstance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * @Author maoqitian</span><br><span class="line">   * @Description 上传文件</span><br><span class="line">   * @Date 2018/10/29 0029 9:42</span><br><span class="line">   * @Param [fastDFSFileEntity]</span><br><span class="line">   * @return java.lang.String[]</span><br><span class="line">   **/</span><br><span class="line">   public  String[] upload(FastDFSFileEntity file)&#123;</span><br><span class="line">   logger.info(&quot;File Name: &quot; + file.getName() + &quot;File Length:&quot; + file.getContent().length);</span><br><span class="line"></span><br><span class="line">   NameValuePair[] metalist=new NameValuePair[1];</span><br><span class="line"></span><br><span class="line">   metalist[0]=new NameValuePair(&quot;author&quot;,file.getAuthor());</span><br><span class="line"></span><br><span class="line">   long startTime = System.currentTimeMillis();</span><br><span class="line">   String[] uploadResults= null;</span><br><span class="line">   StorageClient storageClient=null;</span><br><span class="line">   try &#123;</span><br><span class="line"></span><br><span class="line">       storageClient=getTrackerClient();</span><br><span class="line">       uploadResults = storageClient.upload_file(file.getContent(),file.getExt(),metalist);</span><br><span class="line">   &#125;catch (IOException e)&#123;</span><br><span class="line">       logger.error(&quot;IO Exception when uploadind the file:&quot;+file.getName(),e);</span><br><span class="line">   &#125;</span><br><span class="line">   catch (Exception e)&#123;</span><br><span class="line">       logger.error(&quot;Non IO Exception when uploadind the file:&quot;+file.getName(),e);</span><br><span class="line">   &#125;</span><br><span class="line">   logger.info(&quot;upload_file time used:&quot; + (System.currentTimeMillis() - startTime) + &quot; ms&quot;);</span><br><span class="line">   if(uploadResults==null &amp;&amp; storageClient!=null)&#123;</span><br><span class="line">       logger.error(&quot;upload file fail, error code:&quot; + storageClient.getErrorCode());</span><br><span class="line">   &#125;</span><br><span class="line">   String groupName = uploadResults[0];</span><br><span class="line">   String remoteFileName = uploadResults[1];</span><br><span class="line"></span><br><span class="line">   logger.info(&quot;upload file successfully!!!&quot; + &quot;group_name:&quot; + groupName + &quot;, remoteFileName:&quot; + &quot; &quot; + remoteFileName);</span><br><span class="line">   return uploadResults;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   public  FileInfo getFile(String groupName, String remoteFileName) &#123;</span><br><span class="line">   try &#123;</span><br><span class="line">       StorageClient storageClient = getTrackerClient();</span><br><span class="line">       return storageClient.get_file_info(groupName, remoteFileName);</span><br><span class="line">   &#125; catch (IOException e) &#123;</span><br><span class="line">       logger.error(&quot;IO Exception: Get File from Fast DFS failed&quot;, e);</span><br><span class="line">   &#125; catch (Exception e) &#123;</span><br><span class="line">       logger.error(&quot;Non IO Exception: Get File from Fast DFS failed&quot;, e);</span><br><span class="line">   &#125;</span><br><span class="line">   return null;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public  InputStream downFile(String groupName, String remoteFileName) &#123;</span><br><span class="line">   try &#123;</span><br><span class="line">       StorageClient storageClient = getTrackerClient();</span><br><span class="line">       byte[] fileByte = storageClient.download_file(groupName, remoteFileName);</span><br><span class="line">       InputStream ins = new ByteArrayInputStream(fileByte);</span><br><span class="line">       return ins;</span><br><span class="line">   &#125; catch (IOException e) &#123;</span><br><span class="line">       logger.error(&quot;IO Exception: Get File from Fast DFS failed&quot;, e);</span><br><span class="line">   &#125; catch (Exception e) &#123;</span><br><span class="line">       logger.error(&quot;Non IO Exception: Get File from Fast DFS failed&quot;, e);</span><br><span class="line">   &#125;</span><br><span class="line">   return null;</span><br><span class="line">   &#125;</span><br><span class="line">   /**</span><br><span class="line">    * @Author maoqitian</span><br><span class="line">    * @Description</span><br><span class="line">    * @Date 2018/10/31 0031 11:19</span><br><span class="line">    * @Param [remoteFileName]</span><br><span class="line">    * @return int -1 失败 0成功</span><br><span class="line">    **/</span><br><span class="line">   public int deleteFile(String remoteFileName)</span><br><span class="line">       throws Exception &#123;</span><br><span class="line">   StorageClient storageClient = getTrackerClient();</span><br><span class="line">   int i = storageClient.delete_file(&quot;group1&quot;, remoteFileName);</span><br><span class="line">   logger.info(&quot;delete file successfully!!!&quot; + i);</span><br><span class="line">   return i;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public StorageServer[] getStoreStorages(String groupName)</span><br><span class="line">       throws IOException &#123;</span><br><span class="line">   TrackerClient trackerClient = new TrackerClient();</span><br><span class="line">   TrackerServer trackerServer = trackerClient.getConnection();</span><br><span class="line">   return trackerClient.getStoreStorages(trackerServer, groupName);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    public ServerInfo[] getFetchStorages(String groupName,</span><br><span class="line">                                           String remoteFileName) throws IOException &#123;</span><br><span class="line">   TrackerClient trackerClient = new TrackerClient();</span><br><span class="line">   TrackerServer trackerServer = trackerClient.getConnection();</span><br><span class="line">   return trackerClient.getFetchStorages(trackerServer, groupName, remoteFileName);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public  String getTrackerUrl() throws IOException &#123;</span><br><span class="line">   return &quot;http://&quot;+getTrackerServer().getInetSocketAddress().getHostString()+&quot;:&quot;+ClientGlobal.getG_tracker_http_port()+&quot;/&quot;;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   /**</span><br><span class="line">    * @Author maoqitian</span><br><span class="line">    * @Description 获取 StorageClient</span><br><span class="line">    * @Date 2018/10/29 0029 10:33</span><br><span class="line">    * @Param []</span><br><span class="line">    * @return org.csource.fastdfs.StorageClient</span><br><span class="line">    **/</span><br><span class="line">   private StorageClient getTrackerClient() throws IOException&#123;</span><br><span class="line">   TrackerServer trackerServer=getTrackerServer();</span><br><span class="line">   StorageClient storageClient=new StorageClient(trackerServer,null);</span><br><span class="line">   return storageClient;</span><br><span class="line">   &#125;</span><br><span class="line">   /**</span><br><span class="line">    * @Author maoqitian</span><br><span class="line">    * @Description 获取 TrackerServer</span><br><span class="line">    * @Date 2018/10/29 0029 10:34</span><br><span class="line">    * @Param []</span><br><span class="line">    * @return org.csource.fastdfs.TrackerServer</span><br><span class="line">    **/</span><br><span class="line">   private  TrackerServer getTrackerServer() throws IOException &#123;</span><br><span class="line">   TrackerClient trackerClient=new TrackerClient();</span><br><span class="line">   TrackerServer trackerServer = trackerClient.getConnection();</span><br><span class="line">   return trackerServer;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>Controller编写，接收请求并上传文件返回文件访问路径（这里写一个文件上传的例子，其他文件下载，删除等功能可根据自己需求进行编写）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">  /**</span><br><span class="line">* @Author maoqitian</span><br><span class="line">* @Description  上传文件</span><br><span class="line">* @Date 2018/10/30 0030 15:07</span><br><span class="line">* @Param [file]</span><br><span class="line">* @return com.gxxmt.common.utils.ResultApi</span><br><span class="line">**/</span><br><span class="line"> @RequestMapping(&quot;/upload&quot;)</span><br><span class="line"> public ResultApi upload(@RequestParam(&quot;file&quot;) MultipartFile file) throws Exception &#123;</span><br><span class="line">if (file.isEmpty()) &#123;</span><br><span class="line">throw new RRException(&quot;上传文件不能为空&quot;);</span><br><span class="line">&#125;</span><br><span class="line">String url;</span><br><span class="line">//此处域名获取可以根据自需求编写</span><br><span class="line">String domainUrl = OSSFactory.build().getDomainPath();</span><br><span class="line">logger.info(&quot;配置的域名为&quot;+domainUrl);</span><br><span class="line">if (StringUtils.isNotBlank(domainUrl))&#123;</span><br><span class="line">url = uploadFile(file,domainUrl);</span><br><span class="line">return ResultApi.success.put(&quot;url&quot;,url);</span><br><span class="line">&#125;else &#123;</span><br><span class="line">return ResultApi.error(&quot;域名配置为空,请先配置对象存储域名&quot;);</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line">   * @Author maoqitian</span><br><span class="line">   * @Description 上传文件到 FastDFS</span><br><span class="line">   * @Date 2018/10/29 0029 11:11</span><br><span class="line">   * @Param [file]</span><br><span class="line">* @Param [domainName] 域名</span><br><span class="line">* @return path 文件访问路径</span><br><span class="line">   **/</span><br><span class="line">public String uploadFile(MultipartFile file,String domainName) throws IOException &#123;</span><br><span class="line"></span><br><span class="line">String[] fileAbsolutePath=&#123;&#125;;</span><br><span class="line">String fileName=file.getOriginalFilename();</span><br><span class="line">String ext=fileName.substring(fileName.lastIndexOf(&quot;.&quot;)+1);</span><br><span class="line">byte[] file_buff=null;</span><br><span class="line">InputStream inputStream = file.getInputStream();</span><br><span class="line">if(inputStream!=null)&#123;</span><br><span class="line">int available = inputStream.available();</span><br><span class="line">file_buff=new byte[available];</span><br><span class="line">inputStream.read(file_buff);</span><br><span class="line">&#125;</span><br><span class="line">inputStream.close();</span><br><span class="line">FastDFSFileEntity fastDFSFileEntity=new FastDFSFileEntity(fileName,file_buff,ext);</span><br><span class="line">try &#123;</span><br><span class="line">fileAbsolutePath=FastDFSClient.getInstance().upload(fastDFSFileEntity);</span><br><span class="line">logger.info(fileAbsolutePath.toString());</span><br><span class="line">&#125;catch (Exception e)&#123;</span><br><span class="line">logger.error(&quot;upload file Exception!&quot;,e);</span><br><span class="line">throw new RRException(&quot;文件上传出错&quot;+e);</span><br><span class="line">&#125;</span><br><span class="line">if(fileAbsolutePath == null)&#123;</span><br><span class="line">logger.error(&quot;upload file failed,please upload again!&quot;);</span><br><span class="line">throw new RRException(&quot;文件上传失败，请重新上传&quot;);</span><br><span class="line">&#125;</span><br><span class="line">String path=domainName+fileAbsolutePath[0]+ &quot;/&quot;+fileAbsolutePath[1];</span><br><span class="line">return path;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="测试部署成果"><a href="#测试部署成果" class="headerlink" title="测试部署成果"></a>测试部署成果</h4><ul><li>上传一个图片，由日志打印我们可以看出图片已经上传成功 </li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/FastDFS/FastDFS-java-client%20%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E6%88%90%E5%8A%9F.png" alt="FastDFS-java-client 上传图片成功"></p><ul><li>测试访问上传的图片</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/FastDFS/%E6%B5%8B%E8%AF%95%E4%B8%8A%E4%BC%A0%E7%9A%84%E5%9B%BE%E7%89%87%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E8%BF%9B%E8%A1%8C%E8%AE%BF%E9%97%AE.png" alt="测试上传的图片是否可以进行访问"></p><h3 id="最后说点"><a href="#最后说点" class="headerlink" title="最后说点"></a>最后说点</h3><ul><li>到此，FastDFS服务器集群部署和集成客户端到SpringBoot中已经完成，以后我们就可以愉快的使用FastDFS服务保存我们的图片等并备份。如果文章中有写得不对的地方，请给我留言指出，大家一起学习进步。如果觉得我的文章给予你帮助，也请给我一个喜欢和关注。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题，同时也能做到在集群环境下一台机子上传文件，同时该组下的其他节点下也备份了上传的文件。
      
    
    </summary>
    
      <category term="后端" scheme="https://www.maoqitian.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="FastDFS" scheme="https://www.maoqitian.com/tags/FastDFS/"/>
    
      <category term="spring boot" scheme="https://www.maoqitian.com/tags/spring-boot/"/>
    
      <category term="Java" scheme="https://www.maoqitian.com/tags/Java/"/>
    
      <category term="CentOS" scheme="https://www.maoqitian.com/tags/CentOS/"/>
    
      <category term="Maven" scheme="https://www.maoqitian.com/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Android 源码编译</title>
    <link href="https://www.maoqitian.com/2019/01/10/Android-source-code-compilation/"/>
    <id>https://www.maoqitian.com/2019/01/10/Android-source-code-compilation/</id>
    <published>2019-01-10T12:23:03.000Z</published>
    <updated>2019-01-14T08:08:30.978Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>android源码编译的四个流程:1.源码下载;2.构建编译环境;3.编译源码;4运行.</p></blockquote><h2 id="Ubuntu-18-04（虚拟机）环境下编译Android-源码"><a href="#Ubuntu-18-04（虚拟机）环境下编译Android-源码" class="headerlink" title="Ubuntu 18.04（虚拟机）环境下编译Android 源码"></a>Ubuntu 18.04（虚拟机）环境下编译Android 源码</h2><h3 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h3><ul><li><p>首先确保自己已经安装了Git.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git </span><br><span class="line">git config –global user.email “test@test.com” </span><br><span class="line">git config –global user.name “test”</span><br></pre></td></tr></table></figure></li><li><p>使用清华大学镜像</p><ul><li><a href="https://mirror.tuna.tsinghua.edu.cn/help/AOSP/" target="_blank" rel="noopener">Android 镜像使用帮助</a></li><li>首先要下载repo 工具</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/bin</span><br><span class="line">PATH=~/bin:$PATH</span><br><span class="line">curl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo</span><br><span class="line">chmod a+x ~/bin/repo</span><br><span class="line">//拒绝连接可以使用tuna的git-repo镜像</span><br><span class="line">详情查看网址https://mirrors.tuna.tsinghua.edu.cn/help/git-repo/</span><br></pre></td></tr></table></figure><ul><li>使用每月更新的初始化包</li><li><p>下载地址 <a href="https://mirrors.tuna.tsinghua.edu.cn/aosp-monthly/aosp-latest.tar" target="_blank" rel="noopener">每月更新的初始化包</a></p></li><li><p>由于所有代码都是从隐藏的 .repo 目录中 checkout 出来的，所以只保留了 .repo 目录，下载后解压 再 repo sync 一遍即可得到完整的目录</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">使用方法如下:</span><br><span class="line"></span><br><span class="line">wget -c https://mirrors.tuna.tsinghua.edu.cn/aosp-mo nthly/aosp-latest.tar # 下载初始化包</span><br><span class="line">tar xf aosp-latest.tar</span><br><span class="line">cd AOSP   # 解压得到的 AOSP 工程目录</span><br><span class="line"># 这时 ls 的话什么也看不到，因为只有一个隐藏的 .repo 目录</span><br><span class="line">repo sync # 正常同步一遍即可得到完整目录</span><br><span class="line"># 或 repo sync -l 仅checkout代码</span><br></pre></td></tr></table></figure></li></ul><h3 id="构建编译环境"><a href="#构建编译环境" class="headerlink" title="构建编译环境"></a>构建编译环境</h3><h4 id="硬件要求"><a href="#硬件要求" class="headerlink" title="硬件要求:"></a>硬件要求:</h4><ul><li>64位的操作系统只能编译2.3.x以上的版本,如果你想要编译2.3.x以下的,那么需要32位的操作系统.<br>  磁盘空间越多越好,至少在100GB以上.意思就是,你可以去买个大点的硬盘了啊<br>  如果你想要在是在虚拟机运行linux,那么至少需要16GB的RAM/swap. </li></ul><h4 id="软件要求"><a href="#软件要求" class="headerlink" title="软件要求"></a>软件要求</h4><ul><li>安装 openJDK 8   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install openjdk-8-jdk</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>依赖设置:</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-dev g++-multilib </span><br><span class="line">sudo apt-get install -y git flex bison gperf build-essential libncurses5-dev:i386 </span><br><span class="line">sudo apt-get install tofrodos python-markdown libxml2-utils xsltproc zlib1g-dev:i386 </span><br><span class="line">sudo apt-get install dpkg-dev libsdl1.2-dev libesd0-dev</span><br><span class="line">sudo apt-get install git-core gnupg flex bison gperf build-essential  </span><br><span class="line">sudo apt-get install zip curl zlib1g-dev gcc-multilib g++-multilib </span><br><span class="line">sudo apt-get install libc6-dev-i386 </span><br><span class="line">sudo apt-get install lib32ncurses5-dev x11proto-core-dev libx11-dev </span><br><span class="line">sudo apt-get install libgl1-mesa-dev libxml2-utils xsltproc unzip m4</span><br><span class="line">sudo apt-get install lib32z-dev ccache</span><br></pre></td></tr></table></figure></li><li><p>依赖设置中有可能会出现“无法定位软件包 libesd0-dev” 这个问题</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">解决方案：</span><br><span class="line">在etc/apt   的sources.list 添加镜像源   deb http://archive.ubuntu.com/ubuntu/ trusty main universe restricted multiverse</span><br><span class="line"></span><br><span class="line">然后 sudo apt-get update  接着继续使用该命令安装就可以了</span><br></pre></td></tr></table></figure></li><li><p>操作系统要求 </p><p>  Android版本 | 编译要求的Ubuntu最低版本<br>  —|—<br>  Android 6.0至AOSP master | Ubuntu 14.04<br>  Android 2.3.x至Android 5.x | Ubuntu 12.04<br>  Android 1.5至Android 2.2.x | Ubuntu 10.04</p></li><li><p>JDK版本要求</p></li></ul><table><thead><tr><th>Android版本</th><th>编译要求的JDK版本</th></tr></thead><tbody><tr><td>AOSP的Android主线</td><td>OpenJDK 8</td></tr><tr><td>Android 5.x至android 6.0</td><td>Oracle JDK 7</td></tr><tr><td>Android 2.3.x至Android 4.4.x</td><td>Oracle JDK 6</td></tr><tr><td>Android 1.5至Android 2.2.x</td><td>Oracle JDK 5</td></tr></tbody></table><ul><li><p>官方编译环境搭建文档地址</p><p><a href="https://source.android.com/source/initializing#installing-required-packages-ubuntu-1404" target="_blank" rel="noopener">搭建编译环境</a></p></li></ul><h3 id="初始化编译环境"><a href="#初始化编译环境" class="headerlink" title="初始化编译环境"></a>初始化编译环境</h3>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source build/envsetup.sh </span><br><span class="line">或者</span><br><span class="line">. build/envsetup.sh</span><br></pre></td></tr></table></figure><ul><li><p>选择目标</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">. lunch aosp_arm64-eng</span><br></pre></td></tr></table></figure></li><li><p>该命令表示针对模拟器进行完整编译，并且所有调试功能均处于启用状态。<br> 如果您没有提供任何参数就运行命令，lunch 将提示您从菜单中选择一个目标。<br> 所有编译目标都采用 BUILD-BUILDTYPE 形式，其中 BUILD 是表示特定功能组合的代号。</p></li><li><p>BUILDTYPE 是以下类型之一：</p><pre><code>编译类型 | 使用情况---|---user | 权限受限；适用于生产环境（没有root权和dedug等）userdebug |在user版本的基础上开放了root权限和debug权限.eng | 开发工程师的版本,拥有最大的权限,此外还附带了许多debug工具</code></pre></li></ul><h3 id="编译源码"><a href="#编译源码" class="headerlink" title="编译源码"></a>编译源码</h3><ul><li><p>您可以使用make编译任何代码。GNUMake可以借助 -jN参数处理并行任务，通常使用的任务数N介于编译时所用计算机上硬件线程数的1-2倍之间。例如，在一台双核 E5520 计算机（2 个 CPU，每个 CPU 4 个内核，每个内核2个线程）上，要实现最快的编译速度，可以使用介于make -j16 到 make -j32 之间的命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j8</span><br></pre></td></tr></table></figure></li><li><p>编译中<br>  <img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Android%20%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/Android%E6%BA%90%E7%A0%81%E7%AD%89%E5%BE%85%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B.png" alt="Android源码等待编译过程"></p></li></ul><h3 id="编译完成"><a href="#编译完成" class="headerlink" title="编译完成"></a>编译完成</h3><p>  <img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Android%20%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/%E7%BC%96%E8%AF%91%E5%AE%8C%E6%88%90.png" alt="编译完成"></p><ul><li><p>运行模拟器</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//依次输入以下命令（如果是在编译成功源码之后直接想运行模拟器，则直接输入emulator命令就行，因为前面编译源码已经输入过以上两条命令）</span><br><span class="line"></span><br><span class="line">. build/envsetup.sh</span><br><span class="line"></span><br><span class="line">lunch(选择刚才你编译源码设置的目标版本)</span><br><span class="line"></span><br><span class="line">emulator</span><br></pre></td></tr></table></figure><p>   <img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Android%20%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/%E8%BF%90%E8%A1%8C%E6%A8%A1%E6%8B%9F%E5%99%A8.png" alt="运行模拟器"></p></li></ul><h3 id="将源码导入Android-Studio-查看"><a href="#将源码导入Android-Studio-查看" class="headerlink" title="将源码导入Android Studio 查看"></a>将源码导入Android Studio 查看</h3><ul><li><p>编译idegen</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source build/envsetup.sh // 将执行文件设置为临时变量</span><br><span class="line">mmm development/tools/idegen/  //生成idegen.jar文件（#### build completed successfully (49 seconds) #### 标识生成idegen.jar文件）</span><br></pre></td></tr></table></figure></li><li><p>执行脚本 idegen.sh</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">. development/tools/idegen/idegen.sh</span><br></pre></td></tr></table></figure><p>  看到下图，表示编译idegen完成，执行成功后在asop的根目录下生成android.ipr和android.iml两个个文件：</p><ul><li>android.ipr 一般保存了工程相关的设置，比如modules和modules libraries的路径，编译器配置，入口点等。</li><li><p>android.iml 用来描述modules。它包括modules路径、 依赖关系，顺序设置等。一个项目可以包含多个 *.iml 文件。</p><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Android%20%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/%E7%BC%96%E8%AF%91idegen.png" alt="编译idegen"></p></li><li><p>打开Android studio，点击File&gt;Open，选择刚刚生成的android.ipr导入就可以了，依据个人机子性能问题，导入时间有快有慢。</p></li></ul></li></ul><h3 id="编译中遇到的坑"><a href="#编译中遇到的坑" class="headerlink" title="编译中遇到的坑"></a>编译中遇到的坑</h3><ul><li><p>Error: library-pathout/host/linux-x86/lib64/libsepolwrap.so does not exist</p><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Android%20%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/Android%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%A4%B1%E8%B4%A51.png" alt="Android源码编译失败1"> </p></li><li><p>解决 ： </p><blockquote><p>1.重新同步代码 并加入sudo apt-get install dpkg-dev libsdl1.2-dev libesd0-dev<br>2.确认是否配置好了JDK的环境变量 </p></blockquote></li><li><p>openJDK 配置环境变量方法</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.用gedit文本编辑器在/etc/profile中添加环境变量：</span><br><span class="line">命令 ： sudo gedit /etc/profile</span><br><span class="line"></span><br><span class="line">2.在打开的/etc/profile文件末尾添加下面几行：</span><br><span class="line">export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre </span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib </span><br><span class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br></pre></td></tr></table></figure></li></ul><h3 id="最后说点"><a href="#最后说点" class="headerlink" title="最后说点"></a>最后说点</h3><ul><li><p>到此，Android源码编译完成，源码编译是一个需要耐心的过程，希望看到文章的你也可以编译成功。文章中如果有错误，请大家给我提出来，大家一起学习进步，如果觉得我的文章给予你帮助，也请给我一个喜欢或者关注。    </p></li><li><p>参考资料</p><p><a href="https://source.android.com/source/initializing#optimizing-a-build-environment" target="_blank" rel="noopener">搭建编译环境</a></p><p><a href="https://blog.csdn.net/mcryeasy/article/details/60466837" target="_blank" rel="noopener">动手实现Android源码（AOSP）的下载、编译、运行、导入、调试</a></p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/" target="_blank" rel="noopener">Android 镜像使用帮助</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;android源码编译的四个流程:1.源码下载;2.构建编译环境;3.编译源码;4运行.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Ubuntu-18-04（虚拟机）环境下编译Android-源码&quot;&gt;&lt;a href=&quot;#Ubuntu-18
      
    
    </summary>
    
      <category term="Android进阶" scheme="https://www.maoqitian.com/categories/Android%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Android" scheme="https://www.maoqitian.com/tags/Android/"/>
    
      <category term="源码编译" scheme="https://www.maoqitian.com/tags/%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://www.maoqitian.com/2019/01/04/hello-world/"/>
    <id>https://www.maoqitian.com/2019/01/04/hello-world/</id>
    <published>2019-01-04T14:44:09.698Z</published>
    <updated>2019-01-04T14:44:09.699Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
