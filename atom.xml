<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>maoqitian 个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.maoqitian.com/"/>
  <updated>2020-10-15T15:09:33.113Z</updated>
  <id>https://www.maoqitian.com/</id>
  
  <author>
    <name>maoqitian</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深入理解Android之Activity启动流程</title>
    <link href="https://www.maoqitian.com/2020/10/15/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Android%E4%B9%8BActivity%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
    <id>https://www.maoqitian.com/2020/10/15/深入理解Android之Activity启动流程/</id>
    <published>2020-10-15T15:05:12.000Z</published>
    <updated>2020-10-15T15:09:33.113Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在进阶Android的路上，了解理解一个应用根Activity启动流程可以作为一个切入点，由此展开进阶之路。平时我们开发的应用都是展示在Android系统桌面上，这个系统桌面其实也是一个Android应用，它叫Launcher。所以本文通过源码层面从Launcher调用ATMS，ATMS调用ApplicationThread，最后ActivityThread启动Activity三个过程了解Activity启动流程（文中源码基于Android 10 ）。</p></blockquote><ul><li><p><a href="https://cs.android.com/android/platform/superproject/+/android-10.0.0_r30:" target="_blank" rel="noopener">Android源码地址</a></p></li><li><p>首先来个脑图，对于整体模块在大脑中形成一个整体印象</p></li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Android%20%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/Activity/Android%20Activity%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B.png" alt="Activity启动流程"><br><a id="more"></a></p><h2 id="Launcher到ActivityTaskManagerService"><a href="#Launcher到ActivityTaskManagerService" class="headerlink" title="Launcher到ActivityTaskManagerService"></a>Launcher到ActivityTaskManagerService</h2><h3 id="Launcher-调用-Activity"><a href="#Launcher-调用-Activity" class="headerlink" title="Launcher 调用 Activity"></a>Launcher 调用 Activity</h3><ul><li>至于Launcher如何加载展示应用程序到界面这里先略过（与PMS相关），本文先关注Activity启动过程。当我们点击系统桌面的应用图标，直接响应的则是Launcher这个应用程序，会调用它的startActivitySafely方法<blockquote><p>packages/apps/Launcher3/src/com/android/launcher3/Launcher.java</p></blockquote></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">boolean</span> startActivitySafely(View v, Intent intent, ItemInfo item,</span><br><span class="line">            <span class="meta">@Nullable</span> <span class="built_in">String</span> sourceContainer) &#123;</span><br><span class="line">        .....</span><br><span class="line"></span><br><span class="line">        <span class="built_in">boolean</span> success = <span class="keyword">super</span>.startActivitySafely(v, intent, item, sourceContainer); <span class="comment">// 1</span></span><br><span class="line">        <span class="keyword">if</span> (success &amp;&amp; v <span class="keyword">instanceof</span> BubbleTextView) &#123;</span><br><span class="line">            <span class="comment">// This is set to the view that launched the activity that navigated the user away</span></span><br><span class="line">            <span class="comment">// from launcher. Since there is no callback for when the activity has finished</span></span><br><span class="line">            <span class="comment">// launching, enable the press state and keep this reference to reset the press</span></span><br><span class="line">            <span class="comment">// state when we return to launcher.</span></span><br><span class="line">            BubbleTextView btv = (BubbleTextView) v;</span><br><span class="line">            btv.setStayPressed(<span class="literal">true</span>);</span><br><span class="line">            addOnResumeCallback(btv);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> success;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>通过以上源码，在注释1调用的是父类的startActivitySafely方法，Launcher类本身就是Activity,它的父类为BaseDraggingActivity，接着看到它的startActivitySafely方法<blockquote><p>packages/apps/Launcher3/src/com/android/launcher3/BaseDraggingActivity.java</p></blockquote></li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">public</span> <span class="selector-tag">boolean</span> <span class="selector-tag">startActivitySafely</span>(View v, Intent intent, <span class="variable">@Nullable</span> ItemInfo item,</span><br><span class="line">            <span class="variable">@Nullable</span> String sourceContainer) &#123;</span><br><span class="line">        .......</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Prepare intent</span></span><br><span class="line">        <span class="selector-tag">intent</span><span class="selector-class">.addFlags</span>(Intent.FLAG_ACTIVITY_NEW_TASK); <span class="comment">//1</span></span><br><span class="line">        <span class="selector-tag">if</span> (v != null) &#123;</span><br><span class="line">            <span class="selector-tag">intent</span><span class="selector-class">.setSourceBounds</span>(getViewBounds(v));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">try</span> &#123;</span><br><span class="line">            ......</span><br><span class="line">            <span class="selector-tag">if</span> (isShortcut) &#123;</span><br><span class="line">                <span class="comment">// Shortcuts need some special checks due to legacy reasons.</span></span><br><span class="line">                <span class="selector-tag">startShortcutIntentSafely</span>(intent, optsBundle, item, sourceContainer);</span><br><span class="line">            &#125; <span class="selector-tag">else</span> <span class="selector-tag">if</span> (user == null || user.equals(Process.myUserHandle())) &#123;</span><br><span class="line">                <span class="comment">// Could be launching some bookkeeping activity</span></span><br><span class="line">                <span class="selector-tag">startActivity</span>(intent, optsBundle);<span class="comment">//2</span></span><br><span class="line">                <span class="selector-tag">AppLaunchTracker</span><span class="selector-class">.INSTANCE</span><span class="selector-class">.get</span>(this)<span class="selector-class">.onStartApp</span>(intent.getComponent(),</span><br><span class="line">                        Process.myUserHandle(), sourceContainer);</span><br><span class="line">            &#125; <span class="selector-tag">else</span> &#123;</span><br><span class="line">                .......</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="selector-tag">getUserEventDispatcher</span>()<span class="selector-class">.logAppLaunch</span>(v, intent);</span><br><span class="line">            <span class="selector-tag">getStatsLogManager</span>()<span class="selector-class">.logAppLaunch</span>(v, intent);</span><br><span class="line">            <span class="selector-tag">return</span> <span class="selector-tag">true</span>;</span><br><span class="line">        &#125; <span class="selector-tag">catch</span> (NullPointerException|ActivityNotFoundException|SecurityException e) &#123;</span><br><span class="line">            <span class="selector-tag">Toast</span><span class="selector-class">.makeText</span>(this, R.string.activity_not_found, Toast.LENGTH_SHORT)<span class="selector-class">.show</span>();</span><br><span class="line">            <span class="selector-tag">Log</span><span class="selector-class">.e</span>(TAG, <span class="string">"Unable to launch. tag="</span> + item + <span class="string">" intent="</span> + intent, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>以上源码看到注释1，设置启动Activity的Flag为<strong>FLAG_ACTIVITY_NEW_TASK</strong>，设置这个Flag则Activity的启动就会在新的任务栈中启动，后面还会遇到它；接着看到注释2，调用了startActivity的方法，显然这就是调用了Activity类的startActivity方法。继续探究Activity类的startActivity方法</li></ul><blockquote><p>frameworks/base/core/java/android/app/Activity.java</p></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Override</span></span><br><span class="line">    public void startActivity(Intent intent, <span class="variable">@Nullable</span> Bundle options) &#123;</span><br><span class="line">        <span class="selector-tag">if</span> (options != null) &#123;</span><br><span class="line">            <span class="selector-tag">startActivityForResult</span>(intent, -<span class="number">1</span>, options);<span class="comment">//1</span></span><br><span class="line">        &#125; <span class="selector-tag">else</span> &#123;</span><br><span class="line">            <span class="comment">// Note we want to go through this call for compatibility with</span></span><br><span class="line">            <span class="comment">// applications that may have overridden the method.</span></span><br><span class="line">            <span class="selector-tag">startActivityForResult</span>(intent, -<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>有以上源码看到注释1，Activity类的startActivity方法调用的是startActivityForResult方法，这个方法日常开发启动Activity有参数回调也会使用，这里参数传入-1，表明Launcher启动Activity并不管它成功与否。接着看startActivityForResult方法<blockquote><p>frameworks/base/core/java/android/app/Activity.java</p></blockquote></li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Activity mParent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> startActivityForResult(@RequiresPermission Intent intent, <span class="keyword">int</span> requestCode,</span><br><span class="line">            @Nullable Bundle <span class="keyword">options</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mParent == <span class="keyword">null</span>) &#123; <span class="comment">//1</span></span><br><span class="line">            <span class="keyword">options</span> = transferSpringboardActivityOptions(<span class="keyword">options</span>);</span><br><span class="line">            Instrumentation.ActivityResult ar =</span><br><span class="line">                mInstrumentation.execStartActivity(</span><br><span class="line">                    <span class="keyword">this</span>, mMainThread.getApplicationThread(), mToken, <span class="keyword">this</span>,</span><br><span class="line">                    intent, requestCode, <span class="keyword">options</span>);<span class="comment">//2</span></span><br><span class="line">            ......</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ......</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>通过以上源码看到注释1，mParent的声明类型为Activity，当前还是正在起Activity，mParent == null成立，看到注释2调用了Instrumentation类的execStartActivity方法，Instrumentation允许您监视系统与应用程序之间的所有交互（Instrumentation注释：allowing you to monitor all of the interaction the system has with the application.），接着看到它的execStartActivity方法</li></ul><h3 id="Instrumentation-调用到ATMS"><a href="#Instrumentation-调用到ATMS" class="headerlink" title="Instrumentation 调用到ATMS"></a>Instrumentation 调用到ATMS</h3><blockquote><p>frameworks/base/core/java/android/app/Instrumentation.java</p></blockquote><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@UnsupportedAppUsage</span></span><br><span class="line">    <span class="keyword">public</span> ActivityResult execStartActivity(</span><br><span class="line">            Context who, IBinder contextThread, IBinder token, Activity <span class="keyword">target</span>,</span><br><span class="line">            Intent intent, <span class="keyword">int</span> requestCode, Bundle options) &#123;</span><br><span class="line">        IApplicationThread whoThread = (IApplicationThread) contextThread;<span class="comment">//1</span></span><br><span class="line">        ......</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            intent.migrateExtraStreamToClipData();</span><br><span class="line">            intent.prepareToLeaveProcess(who);</span><br><span class="line">            <span class="keyword">int</span> result = ActivityTaskManager.getService()</span><br><span class="line">                .startActivity(whoThread, who.getBasePackageName(), intent,</span><br><span class="line">                        intent.resolveTypeIfNeeded(who.getContentResolver()),</span><br><span class="line">                        token, <span class="keyword">target</span> != <span class="keyword">null</span> ? <span class="keyword">target</span>.mEmbeddedID : <span class="keyword">null</span>,</span><br><span class="line">                        requestCode, 0, <span class="keyword">null</span>, options); <span class="comment">//2</span></span><br><span class="line">            checkStartActivityResult(result, intent);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Failure from system"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><p>通过以上源码看到注释1，这里获取了IApplicationThread，如果你了解Binder，第一反应就应该很清晰，目前处于Launcher应用程序进程，要启动Activity则需要请求系统服务进程（SystemServer）,而Android进程间通信则可以使用Binder，而这里实现方式为AIDL，它的实现类为ActivityThread的内部类ApplicationThread，而<strong>ApplicationThread</strong>作用则为应用程序进程和系统服务进程通信的桥梁，后面还会继续提到；接着看到注释2，这里调用ActivityTaskManager.getService则可以获取ActivityTaskManagerService的代理对象，看看他的实现</p><blockquote><p>frameworks/base/core/java/android/app/ActivityTaskManager.java</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function">IActivityTaskManager <span class="title">getService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">return</span> IActivityTaskManagerSingleton.<span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@UnsupportedAppUsage</span>(trackingBug = <span class="number">129726065</span>)</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton&lt;IActivityTaskManager&gt; IActivityTaskManagerSingleton =</span><br><span class="line">           <span class="keyword">new</span> Singleton&lt;IActivityTaskManager&gt;() &#123;</span><br><span class="line">               <span class="meta">@Override</span></span><br><span class="line">               <span class="keyword">protected</span> <span class="function">IActivityTaskManager <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                   <span class="keyword">final</span> IBinder b = ServiceManager.getService(Context.ACTIVITY_TASK_SERVICE);<span class="comment">//1</span></span><br><span class="line">                   <span class="keyword">return</span> IActivityTaskManager.Stub.asInterface(b); <span class="comment">//2</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>由以上源码注释1，通过ServiceManager来获取远程服务ActivityTaskManagerService，ServiceManager底层最终调用的还是c++层的ServiceManager，它是Binder的守护服务，通过它能够获取在Android系统启动时注册的系统服务，这其中就包含这里提到的ATMS；接着回到注释2建立 Launcher与 ATMS的连接，这样回到execStartActivity方法，Launcher就通过调用ATMS的startActivity方法将启动Activity的数据交给ATMS服务来处理了。</p></li><li><p>为了更好理解，看看Launcher调用到ActivityTaskManagerService时序图来对上面的步骤进行回顾</p></li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Android%20%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/Activity/Launcher%E8%B0%83%E7%94%A8%E5%88%B0ActivityTaskManagerService%E6%97%B6%E5%BA%8F%E5%9B%BE.jpg" alt="Launcher调用到ActivityTaskManagerService时序图"></p><h2 id="ActivityTaskManagerService-调用ApplicationThread"><a href="#ActivityTaskManagerService-调用ApplicationThread" class="headerlink" title="ActivityTaskManagerService 调用ApplicationThread"></a>ActivityTaskManagerService 调用ApplicationThread</h2><h3 id="ATMS处理启动Activity请求"><a href="#ATMS处理启动Activity请求" class="headerlink" title="ATMS处理启动Activity请求"></a>ATMS处理启动Activity请求</h3><ul><li><p>通过上一小节，启动应用程序Activity已经走到ActivityTaskManagerService中，如果你熟悉前以往版本的Android源码，你肯定会知道ActivityManagerService，而在Android 10 中则将AMS用于管理Activity及其容器（任务，堆栈，显示等）的系统服务分离出来放到ATMS中，也许是谷歌不想让AMS的代码越来越膨胀吧(Android 10中AMS代码有一万九千行)。好了，接着看到ATMS的startActivity方法</p><blockquote><p>frameworks/base/services/core/java/com/android/server/wm/ActivityTaskManagerService.java</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    public <span class="keyword">final</span> <span class="built_in">int</span> startActivity(IApplicationThread caller, <span class="built_in">String</span> callingPackage,</span><br><span class="line">            Intent intent, <span class="built_in">String</span> resolvedType, IBinder resultTo, <span class="built_in">String</span> resultWho, <span class="built_in">int</span> requestCode,</span><br><span class="line">            <span class="built_in">int</span> startFlags, ProfilerInfo profilerInfo, Bundle bOptions) &#123;</span><br><span class="line">        <span class="keyword">return</span> startActivityAsUser(caller, callingPackage, intent, resolvedType, resultTo,</span><br><span class="line">                resultWho, requestCode, startFlags, profilerInfo, bOptions,</span><br><span class="line">                UserHandle.getCallingUserId());<span class="comment">//1</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>由以上代码，继续调用了startActivityAsUser方法，该方法多传入了用户的ID，接着会判断是否有权限调用，没有权限调用则抛出异常，否则获取用户id用于后续进程间Binder通信。接着继续看startActivityAsUser方法</p><blockquote><p>frameworks/base/services/core/java/com/android/server/wm/ActivityTaskManagerService.java</p></blockquote></li></ul><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> startActivityAsUser(IApplicationThread caller, <span class="keyword">String</span> callingPackage,</span><br><span class="line">            Intent intent, <span class="keyword">String</span> resolvedType, IBinder resultTo, <span class="keyword">String</span> resultWho, <span class="built_in">int</span> requestCode,</span><br><span class="line">            <span class="built_in">int</span> startFlags, ProfilerInfo profilerInfo, Bundle bOptions, <span class="built_in">int</span> userId) &#123;</span><br><span class="line">        <span class="keyword">return</span> startActivityAsUser(caller, callingPackage, intent, resolvedType, resultTo,</span><br><span class="line">                resultWho, requestCode, startFlags, profilerInfo, bOptions, userId,</span><br><span class="line">                <span class="keyword">true</span> <span class="comment">/*validateIncomingUser*/</span>);<span class="comment">//1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> startActivityAsUser(IApplicationThread caller, <span class="keyword">String</span> callingPackage,</span><br><span class="line">            Intent intent, <span class="keyword">String</span> resolvedType, IBinder resultTo, <span class="keyword">String</span> resultWho, <span class="built_in">int</span> requestCode,</span><br><span class="line">            <span class="built_in">int</span> startFlags, ProfilerInfo profilerInfo, Bundle bOptions, <span class="built_in">int</span> userId,</span><br><span class="line">            <span class="built_in">boolean</span> validateIncomingUser) &#123;</span><br><span class="line">        enforceNotIsolatedCaller(<span class="string">"startActivityAsUser"</span>);</span><br><span class="line"></span><br><span class="line">        userId = getActivityStartController().checkTargetUser(userId, validateIncomingUser,</span><br><span class="line">                Binder.getCallingPid(), Binder.getCallingUid(), <span class="string">"startActivityAsUser"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Switch to user app stacks here.</span></span><br><span class="line">        <span class="keyword">return</span> getActivityStartController().obtainStarter(intent, <span class="string">"startActivityAsUser"</span>)</span><br><span class="line">                .setCaller(caller)</span><br><span class="line">                .setCallingPackage(callingPackage)</span><br><span class="line">                .setResolvedType(resolvedType)</span><br><span class="line">                .setResultTo(resultTo)</span><br><span class="line">                .setResultWho(resultWho)</span><br><span class="line">                .setRequestCode(requestCode)</span><br><span class="line">                .setStartFlags(startFlags)</span><br><span class="line">                .setProfilerInfo(profilerInfo)</span><br><span class="line">                .setActivityOptions(bOptions)</span><br><span class="line">                .setMayWait(userId)</span><br><span class="line">                .execute();<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>由以上代码，注释1调用了ATMS自己实现的startActivityAsUser方法，在注释而2处构造了ActivityStarter，此类收集了用于确定将意图和标志如何转换为活动以及关联的任务和堆栈的所有逻辑，obtainStarter方法第二个参数代表启动Activity的意图，接着调用了execute方法，<blockquote><p>frameworks/base/services/core/java/com/android/server/wm/ActivityStarter.java</p></blockquote></li></ul><figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">int execute() &#123;</span><br><span class="line">        <span class="attribute">try &#123;</span></span><br><span class="line"><span class="attribute">            // TODO(b/64750076)</span>: Look into passing request directly to these methods to allow</span><br><span class="line">            // for transactional diffs and preprocessing.</span><br><span class="line">            if (mRequest<span class="variable">.mayWait</span>) &#123; //1</span><br><span class="line">                return startActivityMayWait(mRequest<span class="variable">.caller</span>, mRequest<span class="variable">.callingUid</span>,</span><br><span class="line">                        mRequest<span class="variable">.callingPackage</span>, mRequest<span class="variable">.realCallingPid</span>, mRequest<span class="variable">.realCallingUid</span>,</span><br><span class="line">                        mRequest<span class="variable">.intent</span>, mRequest<span class="variable">.resolvedType</span>,</span><br><span class="line">                        mRequest<span class="variable">.voiceSession</span>, mRequest<span class="variable">.voiceInteractor</span>, mRequest<span class="variable">.resultTo</span>,</span><br><span class="line">                        mRequest<span class="variable">.resultWho</span>, mRequest<span class="variable">.requestCode</span>, mRequest<span class="variable">.startFlags</span>,</span><br><span class="line">                        mRequest<span class="variable">.profilerInfo</span>, mRequest<span class="variable">.waitResult</span>, mRequest<span class="variable">.globalConfig</span>,</span><br><span class="line">                        mRequest<span class="variable">.activityOptions</span>, mRequest<span class="variable">.ignoreTargetSecurity</span>, mRequest<span class="variable">.userId</span>,</span><br><span class="line">                        mRequest<span class="variable">.inTask</span>, mRequest<span class="variable">.reason</span>,</span><br><span class="line">                        mRequest<span class="variable">.allowPendingRemoteAnimationRegistryLookup</span>,</span><br><span class="line">                        mRequest<span class="variable">.originatingPendingIntent</span>, mRequest<span class="variable">.allowBackgroundActivityStart</span>);//2</span><br><span class="line">            &#125; </span><br><span class="line">          ......  </span><br><span class="line">        &#125; </span><br><span class="line">        .......</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>由以上代码看到注释1，前面构造ActivityStarter已经传入了用户id，所以这里判断条件成立，则继续调用startActivityMayWait方法<blockquote><p>frameworks/base/services/core/java/com/android/server/wm/ActivityStarter.java</p></blockquote></li></ul><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> startActivityMayWait(IApplicationThread caller, <span class="built_in">int</span> callingUid,</span><br><span class="line">            <span class="keyword">String</span> callingPackage, <span class="built_in">int</span> requestRealCallingPid, <span class="built_in">int</span> requestRealCallingUid,</span><br><span class="line">            Intent intent, <span class="keyword">String</span> resolvedType, IVoiceInteractionSession voiceSession,</span><br><span class="line">            IVoiceInteractor voiceInteractor, IBinder resultTo, <span class="keyword">String</span> resultWho, <span class="built_in">int</span> requestCode,</span><br><span class="line">            <span class="built_in">int</span> startFlags, ProfilerInfo profilerInfo, WaitResult outResult,</span><br><span class="line">            Configuration globalConfig, SafeActivityOptions options, <span class="built_in">boolean</span> ignoreTargetSecurity,</span><br><span class="line">            <span class="built_in">int</span> userId, TaskRecord inTask, <span class="keyword">String</span> reason,</span><br><span class="line">            <span class="built_in">boolean</span> allowPendingRemoteAnimationRegistryLookup,</span><br><span class="line">            PendingIntentRecord originatingPendingIntent, <span class="built_in">boolean</span> allowBackgroundActivityStart) &#123;</span><br><span class="line">            ......</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> ActivityRecord[] outRecord = <span class="keyword">new</span> ActivityRecord[<span class="number">1</span>];<span class="comment">//1</span></span><br><span class="line">            <span class="built_in">int</span> res = startActivity(caller, intent, ephemeralIntent, resolvedType, aInfo, rInfo,</span><br><span class="line">                    voiceSession, voiceInteractor, resultTo, resultWho, requestCode, callingPid,</span><br><span class="line">                    callingUid, callingPackage, realCallingPid, realCallingUid, startFlags, options,</span><br><span class="line">                    ignoreTargetSecurity, componentSpecified, outRecord, inTask, reason,</span><br><span class="line">                    allowPendingRemoteAnimationRegistryLookup, originatingPendingIntent,</span><br><span class="line">                    allowBackgroundActivityStart);<span class="comment">//2</span></span><br><span class="line">          ......</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><p>由以上代码，可以看到注释1处创建了一个ActivityRecord数组，ActivityRecord代表一个Activity,接着调用了startActivity方法，</p><blockquote><p>frameworks/base/services/core/java/com/android/server/wm/ActivityStarter.java</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> startActivity(IApplicationThread caller, Intent intent, Intent ephemeralIntent,</span><br><span class="line">         String resolvedType, ActivityInfo aInfo, ResolveInfo rInfo,</span><br><span class="line">         IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</span><br><span class="line">         IBinder resultTo, String resultWho, <span class="keyword">int</span> requestCode, <span class="keyword">int</span> callingPid, <span class="keyword">int</span> callingUid,</span><br><span class="line">         String callingPackage, <span class="keyword">int</span> realCallingPid, <span class="keyword">int</span> realCallingUid, <span class="keyword">int</span> startFlags,</span><br><span class="line">         SafeActivityOptions <span class="keyword">options</span>,</span><br><span class="line">         <span class="keyword">boolean</span> ignoreTargetSecurity, <span class="keyword">boolean</span> componentSpecified, ActivityRecord[] outActivity,</span><br><span class="line">         TaskRecord inTask, <span class="keyword">boolean</span> allowPendingRemoteAnimationRegistryLookup,</span><br><span class="line">         PendingIntentRecord originatingPendingIntent, <span class="keyword">boolean</span> allowBackgroundActivityStart) &#123;</span><br><span class="line">     mSupervisor.getActivityMetricsLogger().notifyActivityLaunching(intent);</span><br><span class="line">     <span class="keyword">int</span> err = ActivityManager.START_SUCCESS;</span><br><span class="line">     <span class="comment">// Pull the optional Ephemeral Installer-only bundle out of the options early.</span></span><br><span class="line">     <span class="keyword">final</span> Bundle verificationBundle</span><br><span class="line">             = <span class="keyword">options</span> != <span class="keyword">null</span> ? <span class="keyword">options</span>.popAppVerificationBundle() : <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">     WindowProcessController callerApp = <span class="keyword">null</span>;</span><br><span class="line">     <span class="keyword">if</span> (caller != <span class="keyword">null</span>) &#123;<span class="comment">//1</span></span><br><span class="line">         callerApp = mService.getProcessController(caller);<span class="comment">//2</span></span><br><span class="line">         <span class="keyword">if</span> (callerApp != <span class="keyword">null</span>) &#123;</span><br><span class="line">             callingPid = callerApp.getPid();</span><br><span class="line">             callingUid = callerApp.mInfo.uid;</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             Slog.w(TAG, <span class="string">"Unable to find app for caller "</span> + caller</span><br><span class="line">                     + <span class="string">" (pid="</span> + callingPid + <span class="string">") when starting: "</span></span><br><span class="line">                     + intent.toString());</span><br><span class="line">             err = ActivityManager.START_PERMISSION_DENIED;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    .......</span><br><span class="line"></span><br><span class="line">     ActivityRecord r = <span class="keyword">new</span> ActivityRecord(mService, callerApp, callingPid, callingUid,</span><br><span class="line">             callingPackage, intent, resolvedType, aInfo, mService.getGlobalConfiguration(),</span><br><span class="line">             resultRecord, resultWho, requestCode, componentSpecified, voiceSession != <span class="keyword">null</span>,</span><br><span class="line">             mSupervisor, checkedOptions, sourceRecord);</span><br><span class="line">     <span class="keyword">if</span> (outActivity != <span class="keyword">null</span>) &#123;</span><br><span class="line">         outActivity[<span class="number">0</span>] = r;<span class="comment">//3</span></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">     <span class="keyword">final</span> <span class="keyword">int</span> res = startActivity(r, sourceRecord, voiceSession, voiceInteractor, startFlags,</span><br><span class="line">             <span class="keyword">true</span> <span class="comment">/* doResume */</span>, checkedOptions, inTask, outActivity, restrictedBgActivity);<span class="comment">//4</span></span><br><span class="line">     .....</span><br><span class="line">     <span class="keyword">return</span> res;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>由以上代码，startActivity里面有很多的逻辑代码，这里只看一些重点的逻辑代码，主要做了两个事情：<br>（1）注释1处判断IApplicationThread是否为空，前面第一小节我们就已经提到过，它代表的就是Launcher进程的ApplicationThread，注释2通过与即将要启动的应用程序进程建立联系，应用程序进程的是fork到Zyote进程，这里先不进行展开了,先专注Activity启动流程。接着注释3创建ActivityRecord代表即将要启动的Activity，包含了Activity的所有信息，并赋值给上一步骤中创建的ActivityRecord类型的outActivity，注释4则继续调用startActivity方法</p><blockquote><p>frameworks/base/services/core/java/com/android/server/wm/ActivityStarter.java</p></blockquote></li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> startActivity(<span class="keyword">final</span> ActivityRecord r, ActivityRecord sourceRecord,</span><br><span class="line">                IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</span><br><span class="line">                <span class="keyword">int</span> startFlags, <span class="keyword">boolean</span> doResume, ActivityOptions <span class="keyword">options</span>, TaskRecord inTask,</span><br><span class="line">                ActivityRecord[] outActivity, <span class="keyword">boolean</span> restrictedBgActivity) &#123;</span><br><span class="line">        <span class="keyword">int</span> result = START_CANCELED;</span><br><span class="line">        <span class="keyword">final</span> ActivityStack startedActivityStack;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mService.mWindowManager.deferSurfaceLayout();</span><br><span class="line">            result = startActivityUnchecked(r, sourceRecord, voiceSession, voiceInteractor,</span><br><span class="line">                    startFlags, doResume, <span class="keyword">options</span>, inTask, outActivity, restrictedBgActivity);<span class="comment">//1</span></span><br><span class="line">        &#125; </span><br><span class="line">        ........</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>由以上代码，注释1处startActivity又调用了startActivityUnchecked方法<blockquote><p>frameworks/base/services/core/java/com/android/server/wm/ActivityStarter.java</p></blockquote></li></ul><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Note: This method should only be called from &#123;@link startActivity&#125;.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> startActivityUnchecked(<span class="keyword">final</span> ActivityRecord r, ActivityRecord sourceRecord,</span><br><span class="line">            IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</span><br><span class="line">            <span class="keyword">int</span> startFlags, <span class="keyword">boolean</span> doResume, ActivityOptions options, TaskRecord inTask,</span><br><span class="line">            ActivityRecord[] outActivity, <span class="keyword">boolean</span> restrictedBgActivity) &#123;</span><br><span class="line">        ......    </span><br><span class="line">        <span class="keyword">final</span> TaskRecord taskToAffiliate = (mLaunchTaskBehind &amp;&amp; mSourceRecord != <span class="keyword">null</span>)</span><br><span class="line">                ? mSourceRecord.getTaskRecord() : <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// Should this be considered a new task?</span></span><br><span class="line">        <span class="keyword">int</span> result = START_SUCCESS;</span><br><span class="line">        <span class="keyword">if</span> (mStartActivity.resultTo == <span class="keyword">null</span> &amp;&amp; mInTask == <span class="keyword">null</span> &amp;&amp; !mAddingToTask</span><br><span class="line">                &amp;&amp; (mLaunchFlags &amp; FLAG_ACTIVITY_NEW_TASK) != <span class="number">0</span>) &#123; <span class="comment">//1</span></span><br><span class="line">            newTask = <span class="keyword">true</span>;</span><br><span class="line">            result = setTaskFromReuseOrCreateNewTask(taskToAffiliate); <span class="comment">//2</span></span><br><span class="line">        &#125; </span><br><span class="line">        ........</span><br><span class="line">        <span class="keyword">if</span> (mDoResume) &#123;</span><br><span class="line">            <span class="keyword">final</span> ActivityRecord topTaskActivity =</span><br><span class="line">                    mStartActivity.getTaskRecord().topRunningActivityLocked();</span><br><span class="line">            <span class="keyword">if</span> (!mTargetStack.isFocusable()</span><br><span class="line">                    || (topTaskActivity != <span class="keyword">null</span> &amp;&amp; topTaskActivity.mTaskOverlay</span><br><span class="line">                    &amp;&amp; mStartActivity != topTaskActivity)) &#123;</span><br><span class="line">                </span><br><span class="line">              mTargetStack.ensureActivitiesVisibleLocked(mStartActivity, <span class="number">0</span>, !PRESERVE_WINDOWS);</span><br><span class="line">                mTargetStack.getDisplay().mDisplayContent.executeAppTransition();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// If the target stack was not previously focusable (previous top running activity</span></span><br><span class="line">                <span class="comment">// on that stack was not visible) then any prior calls to move the stack to the</span></span><br><span class="line">                <span class="comment">// will not update the focused stack.  If starting the new activity now allows the</span></span><br><span class="line">                <span class="comment">// task stack to be focusable, then ensure that we now update the focused stack</span></span><br><span class="line">                <span class="comment">// accordingly.</span></span><br><span class="line">                <span class="keyword">if</span> (mTargetStack.isFocusable()</span><br><span class="line">                        &amp;&amp; !mRootActivityContainer.isTopDisplayFocusedStack(mTargetStack)) &#123;</span><br><span class="line">                    mTargetStack.moveToFront(<span class="string">"startActivityUnchecked"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                mRootActivityContainer.resumeFocusedStacksTopActivities(</span><br><span class="line">                        mTargetStack, mStartActivity, mOptions);<span class="comment">//3</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ul><li>由上代码注释1，在前面第一节Launcher部分中有提到过设置了Flag为<strong>FLAG_ACTIVITY_NEW_TASK</strong>，所以注意判断条件成立，则调用setTaskFromReuseOrCreateNewTask，它内部会创建的TaskRecord（代表Activity的任务栈），并将传入的TaskRecord对象设置给代表启动的Activity的ActivityRecord，接着在注释3调用了RootActivityContainer的resumeFocusedStacksTopActivities方法，RootActivityContainer 将一些东西从ActivityStackSupervisor中分离出来。目的是将其与RootWindowContainer合并，作为统一层次结构的一部分，接着看它的resumeFocusedStacksTopActivities方法</li></ul><blockquote><p>frameworks/base/services/core/java/com/android/server/wm/RootActivityContainer.java</p></blockquote><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">boolean</span> resumeFocusedStacksTopActivities(</span><br><span class="line">            ActivityStack targetStack, ActivityRecord target, ActivityOptions targetOptions) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="params">...</span><span class="params">...</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">boolean</span> result = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (targetStack != <span class="built_in">null</span> &amp;&amp; (targetStack.isTopStackOnDisplay()</span><br><span class="line">                || getTopDisplayFocusedStack() == targetStack)) &#123; </span><br><span class="line">            result = targetStack.resumeTopActivityUncheckedLocked(target, targetOptions);<span class="comment">//1</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="params">...</span><span class="params">...</span>.</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>由以上代码注释1处，又调用了ActivityStack的resumeTopActivityUncheckedLocked方法，ActivityStack应该算是任务栈的描述，它管理者一个应用的所有TaskRecord和他们的状态，接着看到它的resumeTopActivityUncheckedLocked方法<blockquote><p>frameworks/base/services/core/java/com/android/server/wm/ActivityStack.java</p></blockquote></li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//确保栈顶 activity 为Resume</span></span><br><span class="line"><span class="keyword">boolean</span> resumeTopActivityUncheckedLocked(ActivityRecord prev, ActivityOptions <span class="keyword">options</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mInResumeTopActivity) &#123;</span><br><span class="line">            <span class="comment">// Don't even start recursing.</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 防止递归</span></span><br><span class="line">            mInResumeTopActivity = <span class="keyword">true</span>;</span><br><span class="line">            result = resumeTopActivityInnerLocked(prev, <span class="keyword">options</span>); <span class="comment">//1</span></span><br><span class="line">            ........</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            mInResumeTopActivity = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>由以上代码，在注释1处接着又调用ActivityStack的resumeTopActivityInnerLocked方法</li></ul><blockquote><p>frameworks/base/services/core/java/com/android/server/wm/ActivityStack.java</p></blockquote><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@GuardedBy(<span class="string">"mService"</span>)</span><br><span class="line">    private boolean resumeTopActivityInnerLocked(ActivityRecord prev, ActivityOptions options) &#123;</span><br><span class="line">    </span><br><span class="line">    ....</span><br><span class="line">    <span class="comment">// Whoops, need to restart this activity!</span></span><br><span class="line">            </span><br><span class="line">            ........</span><br><span class="line">       mStackSupervisor.startSpecificActivityLocked(next, true, true);<span class="comment">//1</span></span><br><span class="line">            ........</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>由以上代码看到注释1，resumeTopActivityInnerLocked方法中逻辑非常多，这里直接精简到这一句关键代码，调用了ActivityStackSupervisor的startSpecificActivityLocked方法</li></ul><h3 id="ActivityStackSupervisor-启动Activity"><a href="#ActivityStackSupervisor-启动Activity" class="headerlink" title="ActivityStackSupervisor 启动Activity"></a>ActivityStackSupervisor 启动Activity</h3><blockquote><p>frameworks/base/services/core/java/com/android/server/wm/ActivityStackSupervisor.java</p></blockquote><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">void</span> startSpecificActivityLocked(ActivityRecord r, <span class="built_in">boolean</span> andResume, <span class="built_in">boolean</span> checkConfig) &#123;</span><br><span class="line">        <span class="comment">// Activity应用程序进程是否已经准备好</span></span><br><span class="line">        final WindowProcessController wpc =</span><br><span class="line">                mService.getProcessController(r.processName, r.info.applicationInfo.uid);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">boolean</span> knownToBeDead = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (wpc != <span class="built_in">null</span> &amp;&amp; wpc.hasThread()) &#123; <span class="comment">//1</span></span><br><span class="line">            try &#123;</span><br><span class="line">                realStartActivityLocked(r, wpc, andResume, checkConfig); <span class="comment">//2</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; catch (RemoteException e) &#123;</span><br><span class="line">                Slog.w(<span class="built_in">TAG</span>, <span class="string">"Exception when starting activity "</span></span><br><span class="line">                        + r.intent.getComponent().flattenToShortString(), e);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="params">...</span><span class="params">...</span>.</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="params">...</span><span class="params">...</span>.</span><br><span class="line">        try &#123;</span><br><span class="line">           <span class="params">...</span><span class="params">...</span>.</span><br><span class="line">            <span class="comment">// Post message to start process to avoid possible deadlock of calling into AMS with the</span></span><br><span class="line">            <span class="comment">// ATMS lock held.</span></span><br><span class="line">            final Message msg = PooledLambda.obtainMessage(</span><br><span class="line">                    ActivityManagerInternal<span class="type">::startProcess</span>, mService.mAmInternal, r.processName,</span><br><span class="line">                    r.info.applicationInfo, knownToBeDead, <span class="string">"activity"</span>, r.intent.getComponent());<span class="comment">//3</span></span><br><span class="line">            mService.mH.sendMessage(msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="params">...</span><span class="params">...</span>..</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>如上代码所示注释1，判断要启动的应用程序进程是否已经准备好，hasThread则是确定应用程序进程的<strong>IApplicationThread</strong>是否存在，如果存在则调用ActivityStackSupervisor的realStartActivityLocked方法启动Activity；如果是第一次启动，则应用程序进程没有准备好，则会走到注释3处启动应用程序进程，本文先跳过，留到下篇文章在探究。接下来继续看到realStartActivityLocked方法<blockquote><p>frameworks/base/services/core/java/com/android/server/wm/ActivityStackSupervisor.java</p></blockquote></li></ul><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">boolean realStartActivityLocked(ActivityRecord r, WindowProcessController <span class="keyword">proc</span>,</span><br><span class="line"><span class="title">            boolean</span> andResume,<span class="title"> boolean</span> checkConfig)<span class="title"> throws</span> RemoteException &#123;</span><br><span class="line">           .......</span><br><span class="line"></span><br><span class="line">                // Create activity launch transaction.</span><br><span class="line">                final ClientTransaction clientTransaction = ClientTransaction.obtain(</span><br><span class="line">                        <span class="keyword">proc</span>.getThread(),<span class="title"> r.appToken);//1</span></span><br><span class="line"><span class="title"></span></span><br><span class="line"><span class="title"></span> <span class="title">               final</span> DisplayContent<span class="title"> dc</span> =<span class="title"> r.getDisplay().mDisplayContent;</span></span><br><span class="line"><span class="title"></span> <span class="title">               clientTransaction.addCallback(LaunchActivityItem.obtain(new</span> Intent(r.intent),</span><br><span class="line"><span class="title">                        System.identityHashCode(r),</span> r.info,</span><br><span class="line">                        //<span class="title"> TODO:</span> Have<span class="title"> this</span> take<span class="title"> the</span> merged<span class="title"> configuration</span> instead<span class="title"> of</span> separate<span class="title"> global</span></span><br><span class="line"><span class="title"></span>                        //<span class="title"> and</span> override<span class="title"> configs.</span></span><br><span class="line"><span class="title"></span> <span class="title">                       mergedConfiguration.getGlobalConfiguration(),</span></span><br><span class="line"><span class="title"></span> <span class="title">                       mergedConfiguration.getOverrideConfiguration(),</span> r.compat,</span><br><span class="line"><span class="title">                        r.launchedFromPackage,</span> task.voiceInteractor,<span class="title"> proc.getReportedProcState(),</span></span><br><span class="line"><span class="title"></span> <span class="title">                       r.icicle,</span> r.persistentState,<span class="title"> results,</span> newIntents,</span><br><span class="line"><span class="title">                        dc.isNextTransitionForward(),</span> <span class="keyword">proc</span>.createProfilerInfoIfNeeded(),</span><br><span class="line"><span class="title">                                r.assistToken));//2</span></span><br><span class="line"><span class="title"></span></span><br><span class="line"><span class="title"></span>                //<span class="title"> Set</span> desired<span class="title"> final</span> state.</span><br><span class="line"><span class="title">                final</span> ActivityLifecycleItem<span class="title"> lifecycleItem;</span></span><br><span class="line"><span class="title"></span> <span class="title">               if</span> (andResume) &#123;</span><br><span class="line">                    lifecycleItem = ResumeActivityItem.obtain(dc.isNextTransitionForward());</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    lifecycleItem = PauseActivityItem.obtain();</span><br><span class="line">                &#125;</span><br><span class="line">                clientTransaction.setLifecycleStateRequest(lifecycleItem);</span><br><span class="line"></span><br><span class="line">                // Schedule transaction.</span><br><span class="line">                mService.getLifecycleManager().scheduleTransaction(clientTransaction);//<span class="number">3</span></span><br><span class="line"></span><br><span class="line">                .......</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> true;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>由以上代码注释1处，创建了ClientTransaction对象，它是包含一系列消息的容器，可以将其发送到客户端，这个客户端就我们要启动的应用程序Activity，注释2处将前面一路传递进来的启动Activity参数封装成了LaunchActivityItem请求request对象，接着我们看到注释3，这里调用了ClientLifecycleManager的scheduleTransaction方法，它的初始化在AMTS构造方法中，并传入了ClientTransaction参数，接着看到ClientLifecycleManager的scheduleTransaction方法</li></ul><h3 id="ClientLifecycleManager（ActivityThread）处理ClientTransaction"><a href="#ClientLifecycleManager（ActivityThread）处理ClientTransaction" class="headerlink" title="ClientLifecycleManager（ActivityThread）处理ClientTransaction"></a>ClientLifecycleManager（ActivityThread）处理ClientTransaction</h3><blockquote><p>frameworks/base/services/core/java/com/android/server/wm/ClientLifecycleManager.java</p></blockquote><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scheduleTransaction</span><span class="params">(ClientTransaction transaction)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">       <span class="keyword">final</span> IApplicationThread client = transaction.getClient();<span class="comment">//1</span></span><br><span class="line">       transaction.schedule();<span class="comment">//2</span></span><br><span class="line">       <span class="keyword">if</span> (!(client <span class="keyword">instanceof</span> Binder)) &#123;</span><br><span class="line">           <span class="comment">// If client is not an instance of Binder - it's a remote call and at this point it is</span></span><br><span class="line">           <span class="comment">// safe to recycle the object. All objects used for local calls will be recycled after</span></span><br><span class="line">           <span class="comment">// the transaction is executed on client in ActivityThread.</span></span><br><span class="line">           transaction.recycle();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li><p>到此，基本上已经比较清晰了，注释1处获取了要启动的应用程序进程的IApplicationThread，上一步中创建ClientTransaction对象时已经将其赋值给ClientTransaction的变量mClient，随后scheduleTransaction判断是否支持进程间通信；注释二处则调用了ClientTransaction的schedule方法，</p><blockquote><p>frameworks/base/core/java/android/app/servertransaction/ClientTransaction.java</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Target client. */</span></span><br><span class="line">    <span class="keyword">private</span> IApplicationThread mClient;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">/** Schedule the transaction after it was initialized. It will be send to client and all its</span></span><br><span class="line"><span class="comment">     * individual parts will be applied in the following sequence:</span></span><br><span class="line"><span class="comment">     * 1. The client calls &#123;<span class="doctag">@link</span> #preExecute(ClientTransactionHandler)&#125;, which triggers all work</span></span><br><span class="line"><span class="comment">     *    that needs to be done before actually scheduling the transaction for callbacks and</span></span><br><span class="line"><span class="comment">     *    lifecycle state request.</span></span><br><span class="line"><span class="comment">     * 2. The transaction message is scheduled.</span></span><br><span class="line"><span class="comment">     * 3. The client calls &#123;<span class="doctag">@link</span> TransactionExecutor#execute(ClientTransaction)&#125;, which executes</span></span><br><span class="line"><span class="comment">     *    all callbacks and necessary lifecycle transitions.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> void schedule() throws RemoteException &#123;</span><br><span class="line">        mClient.scheduleTransaction(this); <span class="comment">//1 </span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>通过以上代码，注释1处mClient则代表要启动的应用程序进程的IApplicationThread，而当前还处于ATMS服务的进程，也就是SystemServer进程，这时ATMS要与即将启动的应用程序进程通信则通过IApplicationThread来执行AIDL，IApplicationThread实现为ApplicationThread，它是ActivityThread的内部类，所以前面也说过ApplicationThread为进程间通信的桥梁，注释1处则相当于是IApplicationThread.scheduleTransaction，并将包含要启动Activity信息的ClientTransaction传递到了应用程序进程，下一节就从IApplicationThread讲起。</p></li><li><p>为了更好理解，看看AMTS调用到ApplicationThread时序图来对上面的步骤进行回顾</p></li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Android%20%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/Activity/ActivityTaskManagerService%E8%B0%83%E7%94%A8ApplicationThread%E6%97%B6%E5%BA%8F%E5%9B%BE.jpg" alt="AMTS调用到ApplicationThread时序图"></p><h2 id="ActivityThread启动Activity"><a href="#ActivityThread启动Activity" class="headerlink" title="ActivityThread启动Activity"></a>ActivityThread启动Activity</h2><h3 id="ApplicationThread-处理进程间数据通信"><a href="#ApplicationThread-处理进程间数据通信" class="headerlink" title="ApplicationThread 处理进程间数据通信"></a>ApplicationThread 处理进程间数据通信</h3><ul><li>接着上一节的内容，我们从ApplicationThread的scheduleTransaction方法开始<blockquote><p>frameworks/base/core/java/android/app/ActivityThread.java</p></blockquote></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationThread</span> <span class="keyword">extends</span> <span class="title">IApplicationThread</span>.<span class="title">Stub</span> </span>&#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">        public void scheduleTransaction(<span class="type">ClientTransaction</span> transaction) <span class="keyword">throws</span> <span class="type">RemoteException</span> &#123;</span><br><span class="line">            <span class="type">ActivityThread</span>.<span class="keyword">this</span>.scheduleTransaction(transaction);<span class="comment">//1</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>由以上代码，注释1处调用了ActivityThread的scheduleTransaction方法，ActivityThread继承了ClientTransactionHandler，scheduleTransaction在里面实现<blockquote><p>frameworks/base/core/java/android/app/ClientTransactionHandler.java</p></blockquote></li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/** Prepare <span class="keyword">and</span> schedule <span class="keyword">transaction</span> <span class="keyword">for</span> execution. */</span><br><span class="line">   void scheduleTransaction(ClientTransaction <span class="keyword">transaction</span>) &#123;</span><br><span class="line">       <span class="keyword">transaction</span>.preExecute(this);</span><br><span class="line">       sendMessage(ActivityThread.H.EXECUTE_TRANSACTION, <span class="keyword">transaction</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="ActivityThread-H-线程间消息处理"><a href="#ActivityThread-H-线程间消息处理" class="headerlink" title="ActivityThread.H 线程间消息处理"></a>ActivityThread.H 线程间消息处理</h3><ul><li>可以看到这里发送了一个Handler消息，而ActivityThread.H则是ActivityThread的内部Handler，它是整个应用程序的主线程Handler，这里为什么需要切换线程呢？<strong>其原因为前面ATMS进程间通信则是运行在Binder线程，而Android更新UI则需要在主线程</strong>，接着看到ActivityThread.H的消息处理<blockquote></blockquote></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">H</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">  public void handleMessage(<span class="type">Message</span> msg) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="type">DEBUG_MESSAGES</span>) <span class="type">Slog</span>.v(<span class="type">TAG</span>, <span class="string">"&gt;&gt;&gt; handling: "</span> + codeToString(msg.what));</span><br><span class="line">            switch (msg.what) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="type">EXECUTE_TRANSACTION</span>:</span><br><span class="line">                    <span class="keyword">final</span> <span class="type">ClientTransaction</span> transaction = (<span class="type">ClientTransaction</span>) msg.obj;<span class="comment">//1</span></span><br><span class="line">                    mTransactionExecutor.execute(transaction);<span class="comment">//2</span></span><br><span class="line">                    ......</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                    </span><br><span class="line">             &#125;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TransactionExecutor"><a href="#TransactionExecutor" class="headerlink" title="TransactionExecutor"></a>TransactionExecutor</h3><ul><li>由以上代码，看到注释1处，获取了由ATMS传递过来的启动Activity进程的数据，注释2处调用了TransactionExecutor的来处理ClientTransaction的数据，接着看到它的execute方法<blockquote><p>frameworks/base/core/java/android/app/servertransaction/TransactionExecutor.java</p></blockquote></li></ul><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="literal">void</span> execute(ClientTransaction transaction) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_RESOLVER) Slog.d(<span class="built_in">TAG</span>, tId(transaction) + <span class="string">"Start resolving transaction"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="params">...</span><span class="params">...</span>.</span><br><span class="line"></span><br><span class="line">        executeCallbacks(transaction); <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        executeLifecycleState(transaction);</span><br><span class="line">        mPendingActions.clear();</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_RESOLVER) Slog.d(<span class="built_in">TAG</span>, tId(transaction) + <span class="string">"End resolving transaction"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>由以上代码注释1处接着调用了TransactionExecutor的executeCallbacks方法<blockquote><p>frameworks/base/core/java/android/app/servertransaction/TransactionExecutor.java</p></blockquote></li></ul><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Cycle through all states requested by callbacks and execute them at proper times. */</span></span><br><span class="line">    @VisibleForTesting</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> executeCallbacks(ClientTransaction transaction) &#123;</span><br><span class="line">        <span class="keyword">final</span> List&lt;ClientTransactionItem&gt; callbacks = transaction.getCallbacks();</span><br><span class="line">        <span class="keyword">if</span> (callbacks == <span class="keyword">null</span> || callbacks.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// No callbacks to execute, return early.</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (DEBUG_RESOLVER) Slog.d(TAG, tId(transaction) + <span class="string">"Resolving callbacks in transaction"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> IBinder token = transaction.getActivityToken();</span><br><span class="line">        ActivityClientRecord r = mTransactionHandler.getActivityClient(token);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// In case when post-execution state of the last callback matches the final state requested</span></span><br><span class="line">        <span class="comment">// for the activity in this transaction, we won't do the last transition here and do it when</span></span><br><span class="line">        <span class="comment">// moving to final state instead (because it may contain additional parameters from server).</span></span><br><span class="line">        <span class="keyword">final</span> ActivityLifecycleItem finalStateRequest = transaction.getLifecycleStateRequest();</span><br><span class="line">        <span class="keyword">final</span> <span class="built_in">int</span> finalState = finalStateRequest != <span class="keyword">null</span> ? finalStateRequest.getTargetState()</span><br><span class="line">                : UNDEFINED;</span><br><span class="line">        <span class="comment">// Index of the last callback that requests some post-execution state.</span></span><br><span class="line">        <span class="keyword">final</span> <span class="built_in">int</span> lastCallbackRequestingState = lastCallbackRequestingState(transaction);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="built_in">int</span> <span class="built_in">size</span> = callbacks.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">size</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">final</span> ClientTransactionItem item = callbacks.<span class="built_in">get</span>(i);<span class="comment">//1</span></span><br><span class="line">            <span class="keyword">if</span> (DEBUG_RESOLVER) Slog.d(TAG, tId(transaction) + <span class="string">"Resolving callback: "</span> + item);</span><br><span class="line">            <span class="keyword">final</span> <span class="built_in">int</span> postExecutionState = item.getPostExecutionState();</span><br><span class="line">            <span class="keyword">final</span> <span class="built_in">int</span> closestPreExecutionState = mHelper.getClosestPreExecutionState(r,</span><br><span class="line">                    item.getPostExecutionState());</span><br><span class="line">            <span class="keyword">if</span> (closestPreExecutionState != UNDEFINED) &#123;</span><br><span class="line">                cycleToPath(r, closestPreExecutionState, transaction);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            item.execute(mTransactionHandler, token, mPendingActions);<span class="comment">//2</span></span><br><span class="line">            ........</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="LaunchActivityItem"><a href="#LaunchActivityItem" class="headerlink" title="LaunchActivityItem"></a>LaunchActivityItem</h3><ul><li>由以上代码注释1处，获取的ClientTransactionItem则为第二小节中提到过的LaunchActivityItem对象，它继承了ClientTransactionItem，并保存这需要启动的Activity数据，接着看到注释2 LaunchActivityItem的execute方法。</li></ul><blockquote><p>frameworks/base/core/java/android/app/servertransaction/LaunchActivityItem.java</p></blockquote><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> execute(ClientTransactionHandler <span class="keyword">client</span>, IBinder token,</span><br><span class="line">          PendingTransactionActions pendingActions) &#123;</span><br><span class="line">      Trace.traceBegin(TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"activityStart"</span>);</span><br><span class="line">      ActivityClientRecord r = <span class="keyword">new</span> ActivityClientRecord(token, mIntent, mIdent, mInfo,</span><br><span class="line">              mOverrideConfig, mCompatInfo, mReferrer, mVoiceInteractor, mState, mPersistentState,</span><br><span class="line">              mPendingResults, mPendingNewIntents, mIsForward,</span><br><span class="line">              mProfilerInfo, <span class="keyword">client</span>, mAssistToken);<span class="comment">//1</span></span><br><span class="line">      <span class="keyword">client</span>.handleLaunchActivity(r, pendingActions, <span class="keyword">null</span> <span class="comment">/* customIntent */</span>);<span class="comment">//2</span></span><br><span class="line">      Trace.traceEnd(TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>由以上代码，注释1处恢复了要启动的Activity的数据，ActivityClientRecord是ActivityThread的内部类，这里的client为ClientTransactionHandler，而前面已经说过ActivityThread继承ClientTransactionHandler，所以这里的注释2处调用的就是ActivityThread的handleLaunchActivity方法<blockquote><p>frameworks/base/core/java/android/app/ActivityThread.java</p></blockquote></li></ul><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Extended implementation of activity launch. Used when server requests a launch or relaunch.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   @Override</span><br><span class="line">   public Activity handleLaunchActivity(ActivityClientRecord r,</span><br><span class="line">           PendingTransactionActions pendingActions, Intent customIntent) &#123;</span><br><span class="line">       .......</span><br><span class="line"></span><br><span class="line">       final Activity a = performLaunchActivity(r, customIntent);<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">       .......</span><br><span class="line"></span><br><span class="line">       return a;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>由以上代码注释1处，继续调用了ActivityThread的performLaunchActivity方法来启动Activity，返回的也是Activity实例。所以performLaunchActivity方法才是启动Activity实例的核心代码。</li></ul><h3 id="Core-Activity-Launch"><a href="#Core-Activity-Launch" class="headerlink" title="Core Activity Launch"></a>Core Activity Launch</h3><blockquote><p>frameworks/base/core/java/android/app/ActivityThread.java<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  Core implementation of activity launch. */</span></span><br><span class="line">    <span class="keyword">private</span> Activity performLaunchActivity(ActivityClientRecord r, Intent customIntent) &#123;</span><br><span class="line">    </span><br><span class="line">        ActivityInfo aInfo = r.activityInfo;<span class="comment">//1</span></span><br><span class="line">        <span class="keyword">if</span> (r.packageInfo == <span class="built_in">null</span>) &#123;</span><br><span class="line">            r.packageInfo = getPackageInfo(aInfo.applicationInfo, r.compatInfo,</span><br><span class="line">                    Context.CONTEXT_INCLUDE_CODE);<span class="comment">//2</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ComponentName component = r.intent.getComponent();<span class="comment">//3</span></span><br><span class="line">        <span class="keyword">if</span> (component == <span class="built_in">null</span>) &#123;</span><br><span class="line">            component = r.intent.resolveActivity(</span><br><span class="line">                mInitialApplication.getPackageManager());</span><br><span class="line">            r.intent.setComponent(component);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (r.activityInfo.targetActivity != <span class="built_in">null</span>) &#123;</span><br><span class="line">            component = <span class="literal">new</span> ComponentName(r.activityInfo.packageName,</span><br><span class="line">                    r.activityInfo.targetActivity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//应用程序Context的创建</span></span><br><span class="line">        ContextImpl appContext = createBaseContextForActivity(r);<span class="comment">//4</span></span><br><span class="line">        Activity activity = <span class="built_in">null</span>;</span><br><span class="line">        try &#123;</span><br><span class="line">        </span><br><span class="line">            java.lang.ClassLoader cl = appContext.getClassLoader();</span><br><span class="line">            <span class="comment">//创建Activity的实例</span></span><br><span class="line">            activity = mInstrumentation.newActivity(</span><br><span class="line">                    cl, component.getClassName(), r.intent);<span class="comment">//5</span></span><br><span class="line">            StrictMode.incrementExpectedActivityCount(activity.getClass());</span><br><span class="line">            r.intent.setExtrasClassLoader(cl);</span><br><span class="line">            r.intent.prepareToEnterProcess();</span><br><span class="line">            <span class="keyword">if</span> (r.state != <span class="built_in">null</span>) &#123;</span><br><span class="line">                r.state.setClassLoader(cl);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!mInstrumentation.onException(activity, e)) &#123;</span><br><span class="line">                throw <span class="literal">new</span> RuntimeException(</span><br><span class="line">                    <span class="string">"Unable to instantiate activity "</span> + component</span><br><span class="line">                    + <span class="string">": "</span> + e.toString(), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//应用程序Application的创建</span></span><br><span class="line">            Application app = r.packageInfo.makeApplication(<span class="literal">false</span>, mInstrumentation);<span class="comment">//6</span></span><br><span class="line"></span><br><span class="line">           <span class="params">...</span><span class="params">...</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (activity != <span class="built_in">null</span>) &#123;</span><br><span class="line">                CharSequence title = r.activityInfo.loadLabel(appContext.getPackageManager());</span><br><span class="line">                Configuration config = <span class="literal">new</span> Configuration(mCompatConfiguration);</span><br><span class="line">                <span class="keyword">if</span> (r.overrideConfig != <span class="built_in">null</span>) &#123;</span><br><span class="line">                    config.updateFrom(r.overrideConfig);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (DEBUG_CONFIGURATION) Slog.v(<span class="built_in">TAG</span>, <span class="string">"Launching activity "</span></span><br><span class="line">                        + r.activityInfo.name + <span class="string">" with config "</span> + config);</span><br><span class="line">                Window window = <span class="built_in">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (r.mPendingRemoveWindow != <span class="built_in">null</span> &amp;&amp; r.mPreserveWindow) &#123;</span><br><span class="line">                    window = r.mPendingRemoveWindow;</span><br><span class="line">                    r.mPendingRemoveWindow = <span class="built_in">null</span>;</span><br><span class="line">                    r.mPendingRemoveWindowManager = <span class="built_in">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                appContext.setOuterContext(activity);</span><br><span class="line">                <span class="comment">// 通过Activity的 attach 方法将 context等各种数据与Activity绑定，初始化Activity</span></span><br><span class="line">                activity.attach(appContext, this, getInstrumentation(), r.token,</span><br><span class="line">                        r.ident, app, r.intent, r.activityInfo, title, r.<span class="keyword">parent</span>,</span><br><span class="line">                        r.embeddedID, r.lastNonConfigurationInstances, config,</span><br><span class="line">                        r.<span class="keyword">referrer</span>, r.voiceInteractor, window, r.configCallback,</span><br><span class="line">                        r.assistToken); <span class="comment">//7</span></span><br><span class="line"></span><br><span class="line">                <span class="params">...</span><span class="params">...</span></span><br><span class="line">                <span class="keyword">if</span> (r.isPersistable()) &#123;</span><br><span class="line">                    mInstrumentation.callActivityOnCreate(activity, r.state, r.persistentState);<span class="comment">//8</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    mInstrumentation.callActivityOnCreate(activity, r.state);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="params">...</span><span class="params">...</span></span><br><span class="line">                r.activity = activity;</span><br><span class="line">            &#125;</span><br><span class="line">            r.setState(ON_CREATE);</span><br><span class="line"></span><br><span class="line">           <span class="params">...</span><span class="params">...</span>.</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> activity;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p></blockquote><ul><li>由以上代码，注释1处获取了前面保存启动应用程序信息的ActivityClientRecord中的应用程序信息，包括应用程序在清单文件中注册了哪些四大组件，启动的根Activity是什么，并在注释2处通过getPackageInfo方法获取LoadedApk描述对应Apk文件资源，注释3处的ComponentName类获取则对应启动Activity的包名和类名，注释4处则生成了启动应用程序的Base上下文环境Context，注释5处通过注释3获取的类名，通过类加载器和Intent对象实例化了Activity对象，注释6则根据注释2处获取Apk描述对象LoadedApk创建了应用程序的Application对象，并在makeApplication方法中调用了它的OnCreate方法，所以应用程序最新启动的是Application才到根Activity，注释7处则前面创建的Context、Application、Window对象与Activity关联来初始化Activity，最后注释8处还继续调用了Instrumentation对象的callActivityOnCreate方法。接着往下看</li></ul><h3 id="Activity的-OnCreate方法调用"><a href="#Activity的-OnCreate方法调用" class="headerlink" title="Activity的 OnCreate方法调用"></a>Activity的 OnCreate方法调用</h3><blockquote><p>frameworks/base/core/java/android/app/Instrumentation.java</p></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">public</span> <span class="selector-tag">void</span> <span class="selector-tag">callActivityOnCreate</span>(Activity activity, Bundle icicle,PersistableBundle persistentState) &#123;</span><br><span class="line">        <span class="selector-tag">prePerformCreate</span>(activity); </span><br><span class="line">        <span class="selector-tag">activity</span><span class="selector-class">.performCreate</span>(icicle, persistentState);<span class="comment">//1</span></span><br><span class="line">        <span class="selector-tag">postPerformCreate</span>(activity);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>由以上代码，注释1处又调用了Activity的performCreate方法，继续往下看<blockquote><p>frameworks/base/core/java/android/app/Activity.java</p></blockquote></li></ul><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="function"><span class="keyword">void</span> <span class="title">performCreate</span><span class="params">(Bundle icicle, PersistableBundle persistentState)</span> </span>&#123;</span><br><span class="line">        dispatchActivityPreCreated(icicle);</span><br><span class="line">        mCanEnterPictureInPicture = <span class="keyword">true</span>;</span><br><span class="line">        restoreHasCurrentPermissionRequest(icicle);</span><br><span class="line">        <span class="keyword">if</span> (persistentState != <span class="keyword">null</span>) &#123;</span><br><span class="line">            onCreate(icicle, persistentState);<span class="comment">//1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            onCreate(icicle);</span><br><span class="line">        &#125;</span><br><span class="line">        .......</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>最终，在已经实例初始化好的Activity调用它的performCreate方法中又掉用了onCreate方法（注释1）。至此，也就是整个应用程序的Activity启动过程我们已经走完了。</li><li>为了更好理解，看看ActivityThread启动Activity的时序图来对上面的步骤进行回顾</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Android%20%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/Activity/ActivityThread%E5%90%AF%E5%8A%A8Activity%E6%97%B6%E5%BA%8F%E5%9B%BE.jpg" alt="ActivityThread启动Activity的时序图"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><ul><li>通过本文，基本上将引用程序启动根的Activity启动流程走了一遍，但是其中还有一点没说展开的就是应用程序进程的启动过程，这一部分内容将通过后续文章继续探究。。如果文章中有写得不对的地方，欢迎在留言区留言大家一起讨论，共同学习进步。如果觉得我的文章给予你帮助，也请给我一个喜欢和关注。<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3></li><li>书籍《Android 进阶解密》</li><li><a href="https://cs.android.com/android/platform/superproject/+/android-10.0.0_r30:" target="_blank" rel="noopener">Android源码地址</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在进阶Android的路上，了解理解一个应用根Activity启动流程可以作为一个切入点，由此展开进阶之路。平时我们开发的应用都是展示在Android系统桌面上，这个系统桌面其实也是一个Android应用，它叫Launcher。所以本文通过源码层面从Launcher调用ATMS，ATMS调用ApplicationThread，最后ActivityThread启动Activity三个过程了解Activity启动流程（文中源码基于Android 10 ）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://cs.android.com/android/platform/superproject/+/android-10.0.0_r30:&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android源码地址&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;首先来个脑图，对于整体模块在大脑中形成一个整体印象&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/maoqitian/MaoMdPhoto/raw/master/Android%20%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/Activity/Android%20Activity%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B.png&quot; alt=&quot;Activity启动流程&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android源码" scheme="https://www.maoqitian.com/categories/Android%E6%BA%90%E7%A0%81/"/>
    
    
      <category term="Android" scheme="https://www.maoqitian.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Flutter-WanAndroid</title>
    <link href="https://www.maoqitian.com/2020/03/30/Flutter-WanAndroid/"/>
    <id>https://www.maoqitian.com/2020/03/30/Flutter-WanAndroid/</id>
    <published>2020-03-30T15:03:57.000Z</published>
    <updated>2020-10-15T14:26:43.685Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/maoqitian/MaoMdPhoto/master/flutter/flutter-logo.png" alt="image"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>Flutter作为当下最火的移动跨平台技术，它是谷歌的推出的移动UI框架，可以快速在iOS和Android上构建高质量的原生用户界面。</li></ul><p><a href="https://flutter.dev" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/Flutter-1.12.13-5bc7f8.svg" alt="Flutter"></a>  <a href="https://dart.dev" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/Dart-2.7.0%2B-00B4AB.svg" alt="Dart"></a> <a href="https://github.com/maoqitian/flutter_wanandroid/releases/latest" target="_blank" rel="noopener"><img src="https://img.shields.io/github/release/maoqitian/flutter_wanandroid.svg" alt="Release"></a>  <a href="https://github.com/maoqitian/flutter_wanandroid/blob/master/LICENSE" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/license-Apache%202-blue.svg" alt="GitHub license"></a></p><h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><ul><li>这是一款跨平台的开源Flutter版本玩Android App。首先感谢<a href="https://github.com/hongyangAndroid" target="_blank" rel="noopener"><strong>鸿洋</strong></a>大佬提供的<a href="https://www.wanandroid.com/blog/show/2" target="_blank" rel="noopener">玩Android开放API</a>；其次，本应用提供丰富完整的功能，更好的体验，旨在随时随地都能更好的浏览<a href="https://www.wanandroid.com/" target="_blank" rel="noopener">https://www.wanandroid.com/</a>网站内容，更好的在手机上进行学习。整个应用涉及到了大部分常用的Flutter组件，Flutter界面搭建，页面跳转，网络请求，Json解析转换，数据持久化，组件间消息通信等Flutter学习尝试，可以说是一个比较好的Flutter学习项目，也希望能对看到此项目的您有或多或少的帮助。项目如果对您有帮助，不妨点个<strong>Star</strong>，您的支持是我前进的动力。</li></ul><h2 id="编译运行环境"><a href="#编译运行环境" class="headerlink" title="编译运行环境"></a>编译运行环境</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Doctor</span> <span class="selector-tag">summary</span> (<span class="selector-tag">to</span> <span class="selector-tag">see</span> <span class="selector-tag">all</span> <span class="selector-tag">details</span>, <span class="selector-tag">run</span> <span class="selector-tag">flutter</span> <span class="selector-tag">doctor</span> <span class="selector-tag">-v</span>):</span><br><span class="line"><span class="selector-attr">[✓]</span> <span class="selector-tag">Flutter</span> (<span class="selector-tag">Channel</span> <span class="selector-tag">stable</span>, <span class="selector-tag">v1</span><span class="selector-class">.12</span><span class="selector-class">.13</span>+<span class="selector-tag">hotfix</span><span class="selector-class">.8</span>, <span class="selector-tag">on</span> <span class="selector-tag">Mac</span> <span class="selector-tag">OS</span> <span class="selector-tag">X</span> 10<span class="selector-class">.15</span><span class="selector-class">.2</span> 19<span class="selector-tag">C57</span>, <span class="selector-tag">locale</span> <span class="selector-tag">en-CN</span>)</span><br><span class="line"><span class="selector-attr">[✓]</span> <span class="selector-tag">Android</span> <span class="selector-tag">toolchain</span> <span class="selector-tag">-</span> <span class="selector-tag">develop</span> <span class="selector-tag">for</span> <span class="selector-tag">Android</span> <span class="selector-tag">devices</span> (<span class="selector-tag">Android</span> <span class="selector-tag">SDK</span> <span class="selector-tag">version</span> 29<span class="selector-class">.0</span><span class="selector-class">.2</span>)</span><br><span class="line"><span class="selector-attr">[✓]</span> <span class="selector-tag">Xcode</span> <span class="selector-tag">-</span> <span class="selector-tag">develop</span> <span class="selector-tag">for</span> <span class="selector-tag">iOS</span> <span class="selector-tag">and</span> <span class="selector-tag">macOS</span> (<span class="selector-tag">Xcode</span> 11<span class="selector-class">.1</span>)</span><br><span class="line"><span class="selector-attr">[✓]</span> <span class="selector-tag">Android</span> <span class="selector-tag">Studio</span> (<span class="selector-tag">version</span> 3<span class="selector-class">.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">Dart</span> 2<span class="selector-class">.7</span><span class="selector-class">.0</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="项目结构图"><a href="#项目结构图" class="headerlink" title="项目结构图"></a>项目结构图</h2><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/flutter/flutter_wanandroid/flutter-wanandroid%E7%BB%93%E6%9E%84%E5%9B%BE.jpg" alt="image"></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ul><li><a href="https://github.com/maoqitian/flutter_wanandroid/releases" target="_blank" rel="noopener"><strong>历史版本下载地址</strong></a></li></ul><h3 id="最新版本下载"><a href="#最新版本下载" class="headerlink" title="最新版本下载"></a><strong>最新版本下载</strong></h3><ul><li>可以手机浏览器输入以下地址下载 <a href="http://d.alphaqr.com/9n12" target="_blank" rel="noopener">http://d.alphaqr.com/9n12</a></li></ul><table><thead><tr><th>类型</th><th>二维码</th></tr></thead><tbody><tr><td>Apk 下载二维码</td><td><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/flutter/flutter_wanandroid/version/v1.0.5/flutter-wanandroid-dimensional-v1.0.5.png" height="200" width="200"></td></tr><tr><td>ios 下载</td><td>暂无下载，可以自行clone项目编译体验</td></tr></tbody></table><h2 id="项目截图展示"><a href="#项目截图展示" class="headerlink" title="项目截图展示"></a>项目截图展示</h2><h3 id="gif-（debug-模式略显卡顿，可下载release版本体验丝滑顺畅）"><a href="#gif-（debug-模式略显卡顿，可下载release版本体验丝滑顺畅）" class="headerlink" title="gif （debug 模式略显卡顿，可下载release版本体验丝滑顺畅）"></a>gif （debug 模式略显卡顿，可下载release版本体验丝滑顺畅）</h3><p><img src="https://github.com/maoqitian/flutter_wanandroid/raw/master/preview/showapp1.gif" height="300" width="170"><img src="https://github.com/maoqitian/flutter_wanandroid/raw/master/preview/showapp2.gif" height="300" width="170"><img src="https://github.com/maoqitian/flutter_wanandroid/raw/master/preview/showapp3.gif" height="300" width="170"></p><h3 id="ios-截图"><a href="#ios-截图" class="headerlink" title="ios 截图"></a>ios 截图</h3><p><img src="https://github.com/maoqitian/flutter_wanandroid/raw/master/preview/flutter-home-page.png" height="300" width="170"><img src="https://github.com/maoqitian/flutter_wanandroid/raw/master/preview/flutter-knowledge.png" height="300" width="170"><img src="https://github.com/maoqitian/flutter_wanandroid/raw/master/preview/flutter-nav.png" height="300" width="170"><img src="https://github.com/maoqitian/flutter_wanandroid/raw/master/preview/flutter-project.png" height="300" width="170"><img src="https://github.com/maoqitian/flutter_wanandroid/raw/master/preview/flutter-search.png" height="300" width="170"></p><p><img src="https://github.com/maoqitian/flutter_wanandroid/raw/master/preview/flutter-user-center.png" height="300" width="170"><img src="https://github.com/maoqitian/flutter_wanandroid/raw/master/preview/flutter-theme-change.png" height="300" width="170"><img src="https://github.com/maoqitian/flutter_wanandroid/raw/master/preview/flutter-wechat.png" height="300" width="170"><img src="https://github.com/maoqitian/flutter_wanandroid/raw/master/preview/flutter-login1.png" height="300" width="170"><img src="https://github.com/maoqitian/flutter_wanandroid/raw/master/preview/flutter-coin-rank.png" height="300" width="170"></p><p><img src="https://github.com/maoqitian/flutter_wanandroid/raw/master/preview/flutter-article-list.png" height="300" width="170"><img src="https://github.com/maoqitian/flutter_wanandroid/raw/master/preview/flutter-common-web.png" height="300" width="170"><img src="https://github.com/maoqitian/flutter_wanandroid/raw/master/preview/flutter-todo.png" height="300" width="170"><img src="https://github.com/maoqitian/flutter_wanandroid/raw/master/preview/flutter-add-todo.png" height="300" width="170"><img src="https://github.com/maoqitian/flutter_wanandroid/raw/master/preview/flutter-todo-empty.png" height="300" width="170"></p><p><img src="https://github.com/maoqitian/flutter_wanandroid/raw/master/preview/flutter-dark-home.png" height="300" width="170"><img src="https://github.com/maoqitian/flutter_wanandroid/raw/master/preview/flutter-dark-knowledge.png" height="300" width="170"><img src="https://github.com/maoqitian/flutter_wanandroid/raw/master/preview/flutter-dark-nav.png" height="300" width="170"><img src="https://github.com/maoqitian/flutter_wanandroid/raw/master/preview/flutter-dark-project.png" height="300" width="170"><img src="https://github.com/maoqitian/flutter_wanandroid/raw/master/preview/flutter-dark-wechat.png" height="300" width="170"></p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p><a href="https://www.wanandroid.com/blog/show/2" target="_blank" rel="noopener"><strong>玩Android开放API</strong></a></p><h2 id="项目功能"><a href="#项目功能" class="headerlink" title="项目功能"></a>项目功能</h2><h3 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h3><ul><li>首页文章列表</li><li>首页banner</li><li>常用网站</li><li>搜索热词（包含在搜索界面）</li><li>置顶文章</li><li>最新项目tab (首页的第二个tab)</li></ul><h3 id="知识体系"><a href="#知识体系" class="headerlink" title="知识体系"></a>知识体系</h3><ul><li>体系数据</li><li>知识体系下的文章</li><li>按照作者昵称搜索文章</li></ul><h3 id="公众号"><a href="#公众号" class="headerlink" title="公众号"></a>公众号</h3><ul><li>获取公众号列表</li><li>查看某个公众号历史数据</li></ul><h3 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h3><ul><li>导航数据</li></ul><h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><ul><li>项目分类</li><li>项目列表数据</li></ul><h3 id="登录与注册"><a href="#登录与注册" class="headerlink" title="登录与注册"></a>登录与注册</h3><ul><li>登录、注册功能</li></ul><h3 id="收藏"><a href="#收藏" class="headerlink" title="收藏"></a>收藏</h3><ul><li>收藏文章列表</li><li>收藏站内文章</li><li>收藏站外文章</li><li>取消收藏</li><li>收藏网站列表</li><li>收藏网址</li><li>编辑收藏网站</li><li>删除收藏网站</li></ul><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><ul><li>首页文章搜索</li><li>在某个公众号中搜索历史文章</li></ul><h3 id="TODO工具"><a href="#TODO工具" class="headerlink" title="TODO工具"></a>TODO工具</h3><ul><li>TODO 列表</li><li>新增一个 TODO</li><li>更新一个 TODO</li><li>删除一个 Todo</li><li>仅更新完成状态TODO</li></ul><h3 id="积分"><a href="#积分" class="headerlink" title="积分"></a>积分</h3><ul><li>积分排行榜</li><li>获取个人积分</li><li>获取个人积分获取列表</li></ul><h3 id="广场"><a href="#广场" class="headerlink" title="广场"></a>广场</h3><ul><li>广场列表数据</li><li>分享人对应列表数据</li><li>自己的分享的文章列表（个人中心）</li><li>删除自己分享的文章（个人中心）</li><li>分享文章</li></ul><h3 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h3><ul><li>问答列表文章</li></ul><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><ul><li>夜间模式</li><li>清除缓存</li><li>版本信息</li><li>退出登录</li></ul><h3 id="主题切换"><a href="#主题切换" class="headerlink" title="主题切换"></a>主题切换</h3><ul><li>切换App 主题</li></ul><h3 id="个人中心"><a href="#个人中心" class="headerlink" title="个人中心"></a>个人中心</h3><p>点击头像进入个人中心，仿B站个人中心效果</p><h2 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h2><ul><li>感谢所有开源库的作者<h3 id="参考项目"><a href="#参考项目" class="headerlink" title="参考项目"></a>参考项目</h3></li><li><a href="https://github.com/alibaba/flutter-go" target="_blank" rel="noopener">flutter-go</a></li></ul><h3 id="使用的第三方库"><a href="#使用的第三方库" class="headerlink" title="使用的第三方库"></a>使用的第三方库</h3><table><thead><tr><th>第三方库</th><th>功能</th></tr></thead><tbody><tr><td><a href="https://github.com/theyakka/fluro" target="_blank" rel="noopener">fluro</a></td><td>页面跳转路由框架</td></tr><tr><td><a href="https://github.com/flutter/plugins" target="_blank" rel="noopener">shared_preferences</a></td><td>本地存储</td></tr><tr><td><a href="https://github.com/flutterchina/dio" target="_blank" rel="noopener">dio</a></td><td>网络</td></tr><tr><td><a href="https://github.com/dart-lang/json_serializable" target="_blank" rel="noopener">json_annotation</a></td><td>json 序列化</td></tr><tr><td><a href="https://github.com/flutter/plugins" target="_blank" rel="noopener">flutter_webview</a></td><td>webview</td></tr><tr><td><a href="https://github.com/PonnamKarthik/FlutterToast" target="_blank" rel="noopener">fluttertoast</a></td><td>Toast</td></tr><tr><td><a href="https://github.com/rrousselGit/provider" target="_blank" rel="noopener">provider</a></td><td>跨组件数据共享</td></tr><tr><td><a href="https://github.com/marcojakob/dart-event-bus" target="_blank" rel="noopener">event_bus</a></td><td>事件总线</td></tr><tr><td><a href="https://github.com/marcojakob/dart-event-bus" target="_blank" rel="noopener">flutter_spinkit</a></td><td>加载中指示器动画</td></tr><tr><td><a href="https://github.com/fluttercandies/extended_nested_scroll_view" target="_blank" rel="noopener">extended_nested_scroll_view</a></td><td>NestedScrollView 扩展</td></tr><tr><td><a href="https://github.com/xuelongqy/flutter_easyrefresh" target="_blank" rel="noopener">flutter_easyrefresh</a></td><td>配合NestedScrollView扩展下拉刷新以及上拉加载</td></tr><tr><td><a href="https://github.com/letsar/flutter_staggered_grid_view" target="_blank" rel="noopener">flutter_staggered_grid_view</a></td><td>瀑布流</td></tr><tr><td><a href="https://github.com/flutter/plugins" target="_blank" rel="noopener">package_info</a></td><td>方便获取应用信息</td></tr><tr><td><a href="https://github.com/Sub6Resources/flutter_html" target="_blank" rel="noopener">flutter_html</a></td><td>加载html 字符串</td></tr><tr><td><a href="https://github.com/aryzhov/flutter-expandable" target="_blank" rel="noopener">expandable</a></td><td>扩展显示隐藏</td></tr><tr><td><a href="https://github.com/tejainece/date_format" target="_blank" rel="noopener">date_format</a></td><td>日期转换</td></tr><tr><td><a href="https://github.com/flutter/plugins/tree/master/packages/share" target="_blank" rel="noopener">share</a></td><td>分享</td></tr></tbody></table><h2 id="版本更新日志"><a href="#版本更新日志" class="headerlink" title="版本更新日志"></a>版本更新日志</h2><h3 id="v1-0-5-2020-03-15"><a href="#v1-0-5-2020-03-15" class="headerlink" title="v1.0.5 (2020/03/15)"></a>v1.0.5 (2020/03/15)</h3><h4 id="完善功能"><a href="#完善功能" class="headerlink" title="完善功能"></a>完善功能</h4><ul><li>个人中心添加积分显示</li><li>修复文章item显示越界问题</li></ul><h3 id="v1-0-4-2020-03-12"><a href="#v1-0-4-2020-03-12" class="headerlink" title="v1.0.4 (2020/03/12)"></a>v1.0.4 (2020/03/12)</h3><h4 id="完善功能-1"><a href="#完善功能-1" class="headerlink" title="完善功能"></a>完善功能</h4><ul><li>添加侧边栏个人中心入口</li><li>完善文章tag显示</li><li>修复上个版本存在的bug</li></ul><h3 id="v1-0-3-2020-03-10"><a href="#v1-0-3-2020-03-10" class="headerlink" title="v1.0.3 (2020/03/10)"></a>v1.0.3 (2020/03/10)</h3><h4 id="完善功能-2"><a href="#完善功能-2" class="headerlink" title="完善功能"></a>完善功能</h4><ul><li>添加文章分享功能</li><li>优化主题切换功能</li><li>修复上个版本存在的bug</li></ul><h3 id="v1-0-2-2020-03-08"><a href="#v1-0-2-2020-03-08" class="headerlink" title="v1.0.2 (2020/03/08)"></a>v1.0.2 (2020/03/08)</h3><h4 id="添加TODO模块"><a href="#添加TODO模块" class="headerlink" title="添加TODO模块"></a>添加TODO模块</h4><ul><li>TODO 列表</li><li>新增一个 TODO</li><li>更新一个 TODO</li><li>删除一个 Todo</li><li>仅更新完成状态TODO</li><li>修复上个版本存在的bug</li></ul><h3 id="v1-0-1-2020-02-18"><a href="#v1-0-1-2020-02-18" class="headerlink" title="v1.0.1 (2020/02/18)"></a>v1.0.1 (2020/02/18)</h3><ul><li>添加问答模块</li><li>修复上个版本存在的bug</li></ul><h3 id="v1-0-0-2020-02-15"><a href="#v1-0-0-2020-02-15" class="headerlink" title="v1.0.0 (2020/02/15)"></a>v1.0.0 (2020/02/15)</h3><ul><li>Flutter 项目第一个版本， 完成WanAndroid基本功能</li></ul><h2 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h2><p>项目中的 API 均来自于 <a href="https://www.wanandroid.com/" target="_blank" rel="noopener">wanandroid.com</a> 网站，纯属学习交流使用，不得用于商业用途。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/maoqitian/MaoMdPhoto/master/flutter/flutter-logo.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Flutter作为当下最火的移动跨平台技术，它是谷歌的推出的移动UI框架，可以快速在iOS和Android上构建高质量的原生用户界面。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://flutter.dev&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Flutter-1.12.13-5bc7f8.svg&quot; alt=&quot;Flutter&quot;&gt;&lt;/a&gt;  &lt;a href=&quot;https://dart.dev&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/Dart-2.7.0%2B-00B4AB.svg&quot; alt=&quot;Dart&quot;&gt;&lt;/a&gt; &lt;a href=&quot;https://github.com/maoqitian/flutter_wanandroid/releases/latest&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/release/maoqitian/flutter_wanandroid.svg&quot; alt=&quot;Release&quot;&gt;&lt;/a&gt;  &lt;a href=&quot;https://github.com/maoqitian/flutter_wanandroid/blob/master/LICENSE&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-Apache%202-blue.svg&quot; alt=&quot;GitHub license&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;项目简介&quot;&gt;&lt;a href=&quot;#项目简介&quot; class=&quot;headerlink&quot; title=&quot;项目简介&quot;&gt;&lt;/a&gt;项目简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;这是一款跨平台的开源Flutter版本玩Android App。首先感谢&lt;a href=&quot;https://github.com/hongyangAndroid&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;鸿洋&lt;/strong&gt;&lt;/a&gt;大佬提供的&lt;a href=&quot;https://www.wanandroid.com/blog/show/2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;玩Android开放API&lt;/a&gt;；其次，本应用提供丰富完整的功能，更好的体验，旨在随时随地都能更好的浏览&lt;a href=&quot;https://www.wanandroid.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.wanandroid.com/&lt;/a&gt;网站内容，更好的在手机上进行学习。整个应用涉及到了大部分常用的Flutter组件，Flutter界面搭建，页面跳转，网络请求，Json解析转换，数据持久化，组件间消息通信等Flutter学习尝试，可以说是一个比较好的Flutter学习项目，也希望能对看到此项目的您有或多或少的帮助。项目如果对您有帮助，不妨点个&lt;strong&gt;Star&lt;/strong&gt;，您的支持是我前进的动力。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;编译运行环境&quot;&gt;&lt;a href=&quot;#编译运行环境&quot; class=&quot;headerlink&quot; title=&quot;编译运行环境&quot;&gt;&lt;/a&gt;编译运行环境&lt;/h2&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;Doctor&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;summary&lt;/span&gt; (&lt;span class=&quot;selector-tag&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;see&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;details&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;flutter&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;doctor&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;-v&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-attr&quot;&gt;[✓]&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;Flutter&lt;/span&gt; (&lt;span class=&quot;selector-tag&quot;&gt;Channel&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;stable&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.12&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.13&lt;/span&gt;+&lt;span class=&quot;selector-tag&quot;&gt;hotfix&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.8&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;Mac&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;OS&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;X&lt;/span&gt; 10&lt;span class=&quot;selector-class&quot;&gt;.15&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.2&lt;/span&gt; 19&lt;span class=&quot;selector-tag&quot;&gt;C57&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;locale&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;en-CN&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-attr&quot;&gt;[✓]&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;Android&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;toolchain&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;develop&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;Android&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;devices&lt;/span&gt; (&lt;span class=&quot;selector-tag&quot;&gt;Android&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;SDK&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;version&lt;/span&gt; 29&lt;span class=&quot;selector-class&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-attr&quot;&gt;[✓]&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;Xcode&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;develop&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;iOS&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;macOS&lt;/span&gt; (&lt;span class=&quot;selector-tag&quot;&gt;Xcode&lt;/span&gt; 11&lt;span class=&quot;selector-class&quot;&gt;.1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-attr&quot;&gt;[✓]&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;Android&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;Studio&lt;/span&gt; (&lt;span class=&quot;selector-tag&quot;&gt;version&lt;/span&gt; 3&lt;span class=&quot;selector-class&quot;&gt;.5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;Dart&lt;/span&gt; 2&lt;span class=&quot;selector-class&quot;&gt;.7&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Flutter探索" scheme="https://www.maoqitian.com/categories/Flutter%E6%8E%A2%E7%B4%A2/"/>
    
    
      <category term="dart" scheme="https://www.maoqitian.com/tags/dart/"/>
    
      <category term="Flutter" scheme="https://www.maoqitian.com/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>重看 Android 消息机制</title>
    <link href="https://www.maoqitian.com/2020/01/12/%E9%87%8D%E7%9C%8B-Android-%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6/"/>
    <id>https://www.maoqitian.com/2020/01/12/重看-Android-消息机制/</id>
    <published>2020-01-12T14:47:36.000Z</published>
    <updated>2020-10-15T15:11:14.881Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>谈起Android 消息机制，相信各位会首先想到Handler，Handler是Android 提供给给开发者实现线程间通信的工具。Android的消息机制包含四大内容，ThreadLocal保证每个线程都有自己的消息轮询器Looper，MessageQueue用来存放消息，Looper负责取消息，最后Handler负责消息的发送与消息的处理。</p></blockquote><ul><li>先来一张脑图回顾整体知识</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Android%20%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6/Android%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6.png" alt="Android消息机制思维导图"><br><a id="more"></a></p><h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><ul><li>我们知道，每个Handler 都有其所在线程对应的Looper，查看Handler构造方法</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**Handler 构造方法*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span>(<span class="params">Callback callback, boolean <span class="keyword">async</span></span>)</span> &#123;</span><br><span class="line">      .......</span><br><span class="line">        mLooper = Looper.myLooper();</span><br><span class="line">        <span class="keyword">if</span> (mLooper == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                <span class="string">"Can't create handler inside thread "</span> + Thread.currentThread()</span><br><span class="line">                        + <span class="string">" that has not called Looper.prepare()"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      ......</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/** Looper 中 sThreadLocal 声明*/</span>    </span><br><span class="line"><span class="keyword">static</span> final ThreadLocal&lt;Looper&gt; sThreadLocal = <span class="keyword">new</span> ThreadLocal&lt;Looper&gt;();</span><br><span class="line"><span class="comment">/** Looper 中 myLooper方法*/</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> @<span class="function">Nullable Looper <span class="title">myLooper</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sThreadLocal.<span class="keyword">get</span>();</span><br><span class="line">    &#125;    </span><br><span class="line"><span class="comment">/** Looper 中 prepare方法*/</span> </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span>(<span class="params">boolean quitAllowed</span>)</span> &#123;</span><br><span class="line">       ....</span><br><span class="line">        sThreadLocal.<span class="keyword">set</span>(<span class="keyword">new</span> Looper(quitAllowed));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>通过以上源码，可以知道，Looper.myLooper()获取不到Looper则会抛异常，所以创建Handler之前都要调用一下Looper.prepare方法，也就是在该方法中新建了Looper并存放到ThreadLocal中。这里就会产生一个疑问，ThreadLocal能保证每个线程有自己对应的Looper？没错，它就真能保证，接下来就看看什么是ThreadLocal。</li></ul><h3 id="什么是ThreadLocal"><a href="#什么是ThreadLocal" class="headerlink" title="什么是ThreadLocal"></a>什么是ThreadLocal</h3><ul><li><p>ThreadLocal是一个线程内部数据存储类，但存放数据并不是它实现的，它只是帮助类，真正存放数据的是ThreadLocalMap。</p></li><li><p>先看一个简单的例子</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> ThreadLocal&lt;String&gt; name =<span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                name.<span class="keyword">set</span>(<span class="string">"xiaoming"</span>);</span><br><span class="line">                System.<span class="keyword">out</span>.println(<span class="string">"---------------"</span>+name.<span class="keyword">get</span>()+<span class="string">"-------------------"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">     System.<span class="keyword">out</span>.println(<span class="string">"---------------"</span>+name.<span class="keyword">get</span>()+<span class="string">"-------------------"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">### 运行结果</span></span><br><span class="line">&gt; Task :Test.main()</span><br><span class="line">---------------xiaoming-------------------</span><br><span class="line">---------------<span class="literal">null</span>-------------------</span><br></pre></td></tr></table></figure></li><li><p>上面例子当中，两个线程访问的都是一个ThreadLocal对象，但是第二个线程没有设置初始值，则获取为null，也就可以说明每个线程操作的是自己对应的一份数据，虽然都是从ThreadLocal的get方法获取，但是get方法则是获取对应线程的ThreadLocal.ThreadLocalMap来获取值。</p></li></ul><h3 id="ThreadLocal分析"><a href="#ThreadLocal分析" class="headerlink" title="ThreadLocal分析"></a>ThreadLocal分析</h3><h4 id="ThreadLocal的set方法"><a href="#ThreadLocal的set方法" class="headerlink" title="ThreadLocal的set方法"></a>ThreadLocal的set方法</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets the current thread's copy of this thread-local variable</span></span><br><span class="line"><span class="comment">     * to the specified value.  Most subclasses will have no need to</span></span><br><span class="line"><span class="comment">     * override this method, relying solely on the &#123;@link #initialValue&#125;</span></span><br><span class="line"><span class="comment">     * method to set the values of thread-locals.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param value the value to be stored in the current thread's copy of</span></span><br><span class="line"><span class="comment">     *        this thread-local.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span>(<span class="params">T <span class="keyword">value</span></span>)</span> &#123;</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        ThreadLocalMap map = getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="literal">null</span>)</span><br><span class="line">            map.<span class="keyword">set</span>(<span class="keyword">this</span>, <span class="keyword">value</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            createMap(t, <span class="keyword">value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the map associated with a ThreadLocal. Overridden in</span></span><br><span class="line"><span class="comment">     * InheritableThreadLocal.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param  t the current thread</span></span><br><span class="line"><span class="comment">     * @return the map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ThreadLocalMap <span class="title">getMap</span>(<span class="params">Thread t</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> t.threadLocals;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create the map associated with a ThreadLocal. Overridden in</span></span><br><span class="line"><span class="comment">     * InheritableThreadLocal.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param t the current thread</span></span><br><span class="line"><span class="comment">     * @param firstValue value for the initial entry of the map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createMap</span>(<span class="params">Thread t, T firstValue</span>)</span> &#123;</span><br><span class="line">        t.threadLocals = <span class="keyword">new</span> ThreadLocalMap(<span class="keyword">this</span>, firstValue);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>通过以上代码，代码层面首先获取当前线程，然后获取<br>ThreadLocalMap，如果存在，则获取当前线程的ThreadLocalMap；如果不存在则根据当前线程和当前需要存入的数据新建ThreadLocalMap来存放线程内部数据，也就是当前ThreadLocal作为key，而存储的值最为value来存储。</li></ul><h4 id="ThreadLocal的get方法"><a href="#ThreadLocal的get方法" class="headerlink" title="ThreadLocal的get方法"></a>ThreadLocal的get方法</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Returns the value in the current thread's copy of this</span></span><br><span class="line"><span class="comment">    * thread-local variable.  If the variable has no value for the</span></span><br><span class="line"><span class="comment">    * current thread, it is first initialized to the value returned</span></span><br><span class="line"><span class="comment">    * by an invocation of the &#123;<span class="doctag">@link</span> #initialValue&#125; method.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the current thread's value of this thread-local</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> T <span class="keyword">get</span>() &#123;</span><br><span class="line">       Thread t = Thread.currentThread();</span><br><span class="line">       ThreadLocalMap map = getMap(t);</span><br><span class="line">       <span class="keyword">if</span> (map != <span class="literal">null</span>) &#123;</span><br><span class="line">           ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</span><br><span class="line">           <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="meta">@SuppressWarnings(<span class="meta-string">"unchecked"</span>)</span></span><br><span class="line">               T result = (T)e.value;</span><br><span class="line">               <span class="keyword">return</span> result;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> setInitialValue();</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Variant of set() to establish initialValue. Used instead</span></span><br><span class="line"><span class="comment">    * of set() in case user has overridden the set() method.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the initial value</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> T setInitialValue() &#123;</span><br><span class="line">       T value = initialValue();</span><br><span class="line">       Thread t = Thread.currentThread();</span><br><span class="line">       ThreadLocalMap map = getMap(t);</span><br><span class="line">       <span class="keyword">if</span> (map != <span class="literal">null</span>)</span><br><span class="line">           map.<span class="keyword">set</span>(<span class="keyword">this</span>, value);</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           createMap(t, value);</span><br><span class="line">       <span class="keyword">return</span> value;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">protected</span> T initialValue() &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>从以上代码，ThreadLocal的get方法根据当前线程来获取对应的ThreadLocalMap，如果获取不到，说明还没有创建，由createMap方法来创建ThreadLocalMap，initialValue方法则设置了value的初始值为null，也呼应前面的例子打印结果。</li></ul><h3 id="ThreadLocal原理"><a href="#ThreadLocal原理" class="headerlink" title="ThreadLocal原理"></a>ThreadLocal原理</h3><ul><li><p>Thread类有一个类型为ThreadLocal.ThreadLocalMap的成员变量threadLocals，如果你了解Java内存模型，threadLocals的值都是new出来的话，<strong>很容易明白threadLocals是存放在堆内存中的，而每一个线程只是在堆内存中存放了自己的threadLocals，也就是每个线程本地内存（逻辑上），物理上本地内存只是在堆内存中占有一块区域，每个线程只玩自己对应的threadLocals，各个线程的对应ThreadLocal互不干扰，这也就实现了各个线程间数据的隔离，也就是每个Handler所在线程都有其对应的Looper对象</strong>。</p></li><li><p>Thread类中 threadLocals 声明</p></li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/* ThreadLocal values pertaining <span class="keyword">to</span> this thread. This map <span class="keyword">is</span> maintained</span><br><span class="line">     * <span class="keyword">by</span> <span class="keyword">the</span> ThreadLocal <span class="built_in">class</span>. */</span><br><span class="line">    ThreadLocal.ThreadLocalMap threadLocals = null;</span><br></pre></td></tr></table></figure><ul><li><p><strong>简单来说就是数据复制很多份存放在堆内存，各个线程获取自己对应的那份数据</strong>。</p></li><li><p>这个可以举一个共享汽车的例子，假如刚开始共享汽车试运行，大街上只有一辆，大家都抢着去开，这就会出现问题，而后来发展普及，每辆车复制迅速生产，满大街都是共享汽车，每个人都可以通过专属二维码开对应共享汽车，这里开车人就对应线程，大家互不干扰，共享汽车就对应ThreadLocals，而大街就相当于堆内存。</p></li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Handler/ThreadLoacl.jpg" alt="ThreadLoacl"></p><h4 id="ThreadLocalMap"><a href="#ThreadLocalMap" class="headerlink" title="ThreadLocalMap"></a>ThreadLocalMap</h4><ul><li>ThreadLocal中真正存放数据的是ThreadLocalMap，他的内部实现是一个环形数组来存放数据，具体分析可以查看以下文章，这里就不在进行展开了。</li><li><a href="https://www.cnblogs.com/micrari/p/6790229.html" target="_blank" rel="noopener">ThreadLocal源码解读</a></li></ul><h2 id="MessageQueue消息队列工作原理"><a href="#MessageQueue消息队列工作原理" class="headerlink" title="MessageQueue消息队列工作原理"></a>MessageQueue消息队列工作原理</h2><ul><li>MessageQueue字面意思是消息队列，而他的实现则不是消息队列，<strong>它的内部实现数据结构为单链表，单链表在频繁插入删除方面是有优势的，链表的插入删除操作对应消息的存储和取出，方法分别对应enqueueMessage和next方法</strong>。</li></ul><h3 id="存放消息enqueueMessage"><a href="#存放消息enqueueMessage" class="headerlink" title="存放消息enqueueMessage"></a>存放消息enqueueMessage</h3><ul><li>查看Handler的源码，很容易发现发消息的方法最终都是调用了sendMessageAtTime方法，uptimeMillis为系统开机时间加上设置消息的延时时间，Handler的enqueueMessage方法<strong>将Message的Target设为当前Handler</strong>，存放消息则调用了MessageQueue的enqueueMessage方法。</li></ul><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Handler的sendMessageAtTime方法*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">boolean</span> sendMessageAtTime(Message msg, long uptimeMillis) &#123;</span><br><span class="line">        MessageQueue <span class="built_in">queue</span> = mQueue;</span><br><span class="line">        <span class="params">...</span><span class="params">...</span></span><br><span class="line">        <span class="keyword">return</span> enqueueMessage(<span class="built_in">queue</span>, msg, uptimeMillis);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/** Handler的enqueueMessage方法*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">boolean</span> enqueueMessage(MessageQueue <span class="built_in">queue</span>, Message msg, long uptimeMillis) &#123;</span><br><span class="line">       msg.target = this;</span><br><span class="line">       <span class="params">...</span><span class="params">...</span>.</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">queue</span>.enqueueMessage(msg, uptimeMillis);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>接着存放消息看到MessageQueue的enqueueMessage方法</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** MessageQueue的enqueueMessage方法*/</span></span><br><span class="line">boolean enqueueMessage(Message msg, long <span class="keyword">when</span>) &#123;</span><br><span class="line">        ......</span><br><span class="line">        synchronized (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mQuitting) &#123;</span><br><span class="line">                IllegalStateException e = new IllegalStateException(</span><br><span class="line">                        msg.target + <span class="string">" sending message to a Handler on a dead thread"</span>);</span><br><span class="line">                Log.w(TAG, e.getMessage(), e);</span><br><span class="line">                msg.recycle();</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            msg.markInUse();</span><br><span class="line">            msg.<span class="keyword">when</span> = <span class="keyword">when</span>;</span><br><span class="line">            Message p = mMessages;</span><br><span class="line">            boolean needWake;</span><br><span class="line">            <span class="keyword">if</span> (p == <span class="literal">null</span> || <span class="keyword">when</span> == <span class="number">0</span> || <span class="keyword">when</span> &lt; p.<span class="keyword">when</span>) &#123;</span><br><span class="line">                <span class="comment">// New head, wake up the event queue if blocked.</span></span><br><span class="line">                msg.next = p;</span><br><span class="line">                mMessages = msg;</span><br><span class="line">                needWake = mBlocked;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Inserted within the middle of the queue.  Usually we don't have to wake</span></span><br><span class="line">                <span class="comment">// up the event queue unless there is a barrier at the head of the queue</span></span><br><span class="line">                <span class="comment">// and the message is the earliest asynchronous message in the queue.</span></span><br><span class="line">                needWake = mBlocked &amp;&amp; p.target == <span class="literal">null</span> &amp;&amp; msg.isAsynchronous();</span><br><span class="line">                Message prev;</span><br><span class="line">                <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                    prev = p;</span><br><span class="line">                    p = p.next;</span><br><span class="line">                    <span class="keyword">if</span> (p == <span class="literal">null</span> || <span class="keyword">when</span> &lt; p.<span class="keyword">when</span>) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</span><br><span class="line">                        needWake = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                msg.next = p; <span class="comment">// invariant: p == prev.next</span></span><br><span class="line">                prev.next = msg;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// We can assume mPtr != 0 because mQuitting is false.</span></span><br><span class="line">            <span class="keyword">if</span> (needWake) &#123;</span><br><span class="line">                nativeWake(mPtr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>通过以上源码，enqueueMessage逻辑主要为单链表的插入操作，如果链表中没有消息，或者当前存入消息延时为零，又或者当前存入消息延时小于链表P节点的延时，则将当前消息插入到链表的头节点，否则遍历链表中的每个节点，找延时小于当前消息的节点存入消息。话句话说，单链表里面消息是按Message的触发时间顺序排序的。</li></ul><h3 id="取消息-next"><a href="#取消息-next" class="headerlink" title="取消息 next"></a>取消息 next</h3><ul><li>接着看MessageQueue取消息的方法next</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">Message <span class="keyword">next</span>() &#123;</span><br><span class="line">        ......</span><br><span class="line">        <span class="comment">//省略部分代码</span></span><br><span class="line">        <span class="keyword">int</span> pendingIdleHandlerCount = -<span class="number">1</span>; <span class="comment">// -1 only during first iteration</span></span><br><span class="line">        <span class="keyword">int</span> nextPollTimeoutMillis = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nextPollTimeoutMillis != <span class="number">0</span>) &#123;</span><br><span class="line">                Binder.flushPendingCommands();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            nativePollOnce(ptr, nextPollTimeoutMillis);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="comment">// Try to retrieve the next message.  Return if found.</span></span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">long</span> now = SystemClock.uptimeMillis();</span><br><span class="line">                Message prevMsg = <span class="keyword">null</span>;</span><br><span class="line">                Message msg = mMessages;</span><br><span class="line">                <span class="keyword">if</span> (msg != <span class="keyword">null</span> &amp;&amp; msg.target == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// Stalled by a barrier.  Find the next asynchronous message in the queue.</span></span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        prevMsg = msg;</span><br><span class="line">                        msg = msg.<span class="keyword">next</span>;</span><br><span class="line">                    &#125; <span class="keyword">while</span> (msg != <span class="keyword">null</span> &amp;&amp; !msg.isAsynchronous());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (msg != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (now &lt; msg.when) &#123;</span><br><span class="line">                        <span class="comment">// Next message is not ready.  Set a timeout to wake up when it is ready.</span></span><br><span class="line">                        nextPollTimeoutMillis = (<span class="keyword">int</span>) Math.min(msg.when - now, Integer.MAX_VALUE);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// Got a message.</span></span><br><span class="line">                        mBlocked = <span class="keyword">false</span>;</span><br><span class="line">                        <span class="keyword">if</span> (prevMsg != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            prevMsg.<span class="keyword">next</span> = msg.<span class="keyword">next</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            mMessages = msg.<span class="keyword">next</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        msg.<span class="keyword">next</span> = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">if</span> (DEBUG) Log.v(TAG, <span class="string">"Returning message: "</span> + msg);</span><br><span class="line">                        msg.markInUse();</span><br><span class="line">                        <span class="keyword">return</span> msg;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// No more messages.</span></span><br><span class="line">                    nextPollTimeoutMillis = -<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//省略部分代码   </span></span><br><span class="line">            &#125; </span><br><span class="line">            <span class="comment">// While calling an idle handler, a new message could have been delivered</span></span><br><span class="line">            <span class="comment">// so go back and look again for a pending message without waiting.</span></span><br><span class="line">            nextPollTimeoutMillis = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>通过以上代码，nextPollTimeoutMillis字段是关键，它代表next在获取下一个消息时需要等待的时长，他的取值有三种情况：</li></ul><ol><li>当nextPollTimeoutMillis小于零，表示消息队列中无消息，会一直等待下去</li><li>当nextPollTimeoutMillis等于零，则不会等待，直接出了取出消息</li><li>当nextPollTimeoutMillis大于零，则等待nextPollTimeoutMillis值的时间，单位是毫秒</li></ol><ul><li>通过对nextPollTimeoutMillis的了解，next方法是如何等待呢？换个词可能更准确，应该叫阻塞，这里注意到next方法循环中的nativePollOnce(ptr, nextPollTimeoutMillis)方法，它的实现在native层，可以实现阻塞的功能，具体原理是使用<strong>epoll，它是一种linux的I/O事件通知机制</strong>，I/O输入输出对象使用的是<strong>管道(pipe)</strong>，具体native层分析请看<strong>Gityuan</strong>大佬的分析文章<a href="http://gityuan.com/2015/12/27/handler-message-native/" target="_blank" rel="noopener">Android消息机制2-Handler(Native层)</a></li></ul><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">nativeWake</span><span class="params">(<span class="keyword">long</span> ptr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">native</span> <span class="function"><span class="keyword">void</span> <span class="title">nativePollOnce</span><span class="params">(<span class="keyword">long</span> ptr, <span class="keyword">int</span> timeoutMillis)</span></span>; <span class="comment">/*non-static for callbacks*/</span></span><br></pre></td></tr></table></figure><ul><li><p>到此，next方法的逻辑就很清晰了，<strong>开始nextPollTimeoutMillis的值是等于零的，获取消息过程就不会受到nativePollOnce方法的阻塞，然后判断取出的消息是否延时，有延时则计算nextPollTimeoutMillis进入下一循环进入nativePollOnce方法阻塞，否则返回取出的消息，有阻塞肯定就有唤醒，这个唤醒的方法就是nativeWake(long ptr)方法，它的实现也在native层，它的调用在我们前面分析enqueueMessage方法逻辑有出现，当有消息进入消息队列，如果当前线程正在被阻塞，调用nativeWake方法，nativePollOnce就会立即返回，取消阻塞，这样循环取到没有延时的消息，则直接返回消息；如果没有消息，nextPollTimeoutMillis等于 -1，继续阻塞状态</strong>。</p></li><li><p>经过前面的分析，消息插入链表是sendMessageAtTime方法触发的，而接下来就会有一个疑问，那又是谁调用 next() 方法取消息呢？没错，就是接下来要了解的Looper</p></li></ul><h2 id="Looper-工作原理"><a href="#Looper-工作原理" class="headerlink" title="Looper 工作原理"></a>Looper 工作原理</h2><ul><li>Looper在Android消息机制中是消息轮询器的作用，他会不断到MessageQueue中去取消息，取消息根据前面next 方法分析，如果阻塞，则说明没有消息</li><li>先看Looper源码注释中有一段示例代码</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* This is a typical example of the implementation of a Looper thread,</span></span><br><span class="line"><span class="comment">  * using the separation of &#123;@link #prepare&#125; and &#123;@link #loop&#125; to create an</span></span><br><span class="line"><span class="comment">  * initial Handler to communicate with the Looper. */</span></span><br><span class="line">  </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">LooperThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">       public <span class="type">Handler</span> mHandler;</span><br><span class="line">  </span><br><span class="line">        public void run() &#123;</span><br><span class="line">           <span class="type">Looper</span>.prepare();</span><br><span class="line">  </span><br><span class="line">            mHandler = <span class="keyword">new</span> <span class="type">Handler</span>() &#123;</span><br><span class="line">                public void handleMessage(<span class="type">Message</span> msg) &#123;</span><br><span class="line">                    <span class="comment">// process incoming messages here</span></span><br><span class="line">                &#125;</span><br><span class="line">           &#125;;</span><br><span class="line">  </span><br><span class="line">            <span class="type">Looper</span>.loop();</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><ul><li>由example代码所示，使用 Handler 之前调用了Looper.prepare()，如下代码所示，就是在ThreadLocal中存放当前线程的Looper对象，在Looper构造方法中创建了MessageQueue</li></ul><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       prepare(<span class="keyword">true</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       sThreadLocal.set(<span class="keyword">new</span> Looper(quitAllowed));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Looper</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</span><br><span class="line">       mQueue = <span class="keyword">new</span> MessageQueue(quitAllowed);</span><br><span class="line">       mThread = Thread.currentThread();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>接着创建完Handler之后，又调用Looper.loop()方法，如下</li></ul><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Run the message queue in this thread. Be sure to call</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> #quit()&#125; to end the loop.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">final</span> Looper me = myLooper();</span><br><span class="line">       <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">final</span> MessageQueue queue = me.mQueue;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//省略部分代码.....</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">           Message msg = queue.next(); <span class="comment">// might block</span></span><br><span class="line">           </span><br><span class="line">           <span class="comment">//省略部分代码.....</span></span><br><span class="line">           </span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               msg.<span class="keyword">target</span>.dispatchMessage(msg);</span><br><span class="line">               dispatchEnd = needEndTime ? SystemClock.uptimeMillis() : 0;</span><br><span class="line">           &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">              <span class="comment">//省略部分代码。。。。</span></span><br><span class="line">           &#125;</span><br><span class="line">           </span><br><span class="line">           <span class="comment">//省略部分代码。。。。</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>首先看到第一行myLooper()，前面在分析ThreadLocal已经了解过，myLooper就是获取ThreadLocal获取我们存储的Looper对象，如果获取不到就会报异常，提示我们我们没有调用Looper.prepare()，<strong>这也就是子线程使用Handler必须调用Looper.prepare()的原因</strong>。是不是有恍然大悟的感觉。然后就是就是根据构造方法创建的MessageQueue来获取消息queue.next()，该方法经过前面分析在没有消息或者消息延时时间还没到是阻塞的；获取到消息后，根据msg.target.dispatchMessage(msg)调用的便是Handler的dispatchMessage方法(前文分析中msg.target的值为当前Handler)。</li></ul><h3 id="主线程Looper-prepare"><a href="#主线程Looper-prepare" class="headerlink" title="主线程Looper.prepare()"></a>主线程Looper.prepare()</h3><ul><li>经过前面的分析，你也许会有一个疑问，在Android使用Handler怎么不用调用Looper.prepare()方法？</li><li>解下来我们看到Android的主线程ActivityThread的main方法，严格来说，ActivityThread并不是线程类，但是Android主线程肯定是存在的，只是主线程在ActivityThread的 main 方法中创建，并在该方法调用了Looper.prepareMainLooper() 方法和Looper.loop() 方法，所以我们在Android 主线程就可以直接使用Handler</li></ul><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**ActivityThread 的 main 方法*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">        <span class="comment">//省略部分代码....</span></span><br><span class="line">        Looper.prepareMainLooper();</span><br><span class="line">        <span class="comment">//省略部分代码....</span></span><br><span class="line">        ActivityThread thread = <span class="keyword">new</span> ActivityThread();</span><br><span class="line">        thread.attach(<span class="keyword">false</span>, startSeq);</span><br><span class="line">        <span class="comment">//省略部分代码....</span></span><br><span class="line">        <span class="comment">// End of event ActivityThreadMain.</span></span><br><span class="line">        Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">        Looper.<span class="built_in">loop</span>();</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略部分代码....</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**Looper 的 prepareMainLooper 方法*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> prepareMainLooper() &#123;</span><br><span class="line">        prepare(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">synchronized</span> (Looper.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sMainLooper != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The main Looper has already been prepared."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            sMainLooper = myLooper();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Handler-工作原理"><a href="#Handler-工作原理" class="headerlink" title="Handler 工作原理"></a>Handler 工作原理</h2><ul><li>前面已经了解过Handler发送消息的sendMessageAtTime方法，接着我们来看看Handler的dispatchMessage方法</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Handle system messages here.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchMessage</span>(<span class="params">Message msg</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (msg.callback != <span class="literal">null</span>) &#123;</span><br><span class="line">            handleCallback(msg);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (mCallback != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            handleMessage(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handleCallback</span>(<span class="params">Message message</span>)</span> &#123;</span><br><span class="line">        message.callback.run();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>这里逻辑就很简单了，如果发送的消息设置了Runnable类型的callback对象，则调用他的run方法，没有则判断是否设置了Handler.Callback，设置则调用Handler.Callback接口的handleMessage方法，否则调用Handler空实现方法handleMessage。</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Handler/Handler%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6.jpg" alt="Android消息机制"></p><h2 id="Looper-loop-死循环，为什么不会导致主线程发生ANR？"><a href="#Looper-loop-死循环，为什么不会导致主线程发生ANR？" class="headerlink" title="Looper.loop()死循环，为什么不会导致主线程发生ANR？"></a>Looper.loop()死循环，为什么不会导致主线程发生ANR？</h2><ul><li>根据前面的分析，Looper.loop()的方法获取不到数据，则会阻塞，这个阻塞和卡死是两回事，阻塞是Linux pipe/epoll机制文件读写的等待，等待及休眠，则会释放占用CPU的资源，而我们开发遇见的卡死一般都是在主线程做了太多耗时操作，Activity 5s，BroadcastReceiver 10s和Service 20s未响应引起的ANR，具体背后分析还请看<strong>Gityuan</strong>的知乎解答<a href="https://www.zhihu.com/question/34652589/answer/90344494?from=profile_answer_card" target="_blank" rel="noopener">Android中为什么主线程不会因为Looper.loop()里的死循环卡死？</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h3 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h3><ul><li>《Android开发艺术探索》</li></ul><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><ul><li><a href="https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/app/ActivityThread.java" target="_blank" rel="noopener">ActivityThread.java源码</a></li><li><a href="https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/os/Handler.java" target="_blank" rel="noopener">Handler.java源码</a></li><li><a href="https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/os/Looper.java" target="_blank" rel="noopener">Looper.java源码</a></li><li><a href="https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/os/MessageQueue.java" target="_blank" rel="noopener">MessageQueue.java源码</a></li><li><a href="https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/os/Message.java" target="_blank" rel="noopener">Message.java源码</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;谈起Android 消息机制，相信各位会首先想到Handler，Handler是Android 提供给给开发者实现线程间通信的工具。Android的消息机制包含四大内容，ThreadLocal保证每个线程都有自己的消息轮询器Looper，MessageQueue用来存放消息，Looper负责取消息，最后Handler负责消息的发送与消息的处理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;先来一张脑图回顾整体知识&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/maoqitian/MaoMdPhoto/raw/master/Android%20%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6/Android%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6.png&quot; alt=&quot;Android消息机制思维导图&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android进阶" scheme="https://www.maoqitian.com/categories/Android%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Android" scheme="https://www.maoqitian.com/tags/Android/"/>
    
      <category term="Handler" scheme="https://www.maoqitian.com/tags/Handler/"/>
    
      <category term="消息机制" scheme="https://www.maoqitian.com/tags/%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Flutter Pull Refresh</title>
    <link href="https://www.maoqitian.com/2020/01/11/Flutter-Pull-Refresh/"/>
    <id>https://www.maoqitian.com/2020/01/11/Flutter-Pull-Refresh/</id>
    <published>2020-01-11T14:52:04.000Z</published>
    <updated>2020-10-15T14:26:43.685Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/maoqitian/MaoMdPhoto/master/flutter/flutter-logo.png" alt="image"></p><blockquote><p>基础页面实现</p></blockquote><h3 id="TabBar-TabBarView-实现页面切换联动（类似Android-tablayout-ViewPage）效果"><a href="#TabBar-TabBarView-实现页面切换联动（类似Android-tablayout-ViewPage）效果" class="headerlink" title="TabBar + TabBarView 实现页面切换联动（类似Android tablayout + ViewPage）效果"></a>TabBar + TabBarView 实现页面切换联动（类似Android tablayout + ViewPage）效果</h3><a id="more"></a><ul><li>直接上代码</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span> &lt;<span class="type">String</span>&gt;_titles=['湖人','勇士','雄鹿','快船','凯尔特人','马刺',<span class="symbol">'76</span>人','猛龙'];</span><br><span class="line"><span class="type">TabController</span>  _tabController;</span><br><span class="line"><span class="comment">///省略部分代码</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="type">MyHomePage</span>(&#123;<span class="type">Key</span> key, <span class="keyword">this</span>.title&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="type">String</span> title;</span><br><span class="line"></span><br><span class="line">  <span class="comment">///省略部分代码</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyHomePageState</span> <span class="keyword">extends</span> <span class="title">State&lt;MyHomePage&gt;</span> <span class="keyword">with</span> <span class="title">SingleTickerProviderStateMixin</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  void initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    <span class="comment">//初始化控制器 </span></span><br><span class="line">    _tabController = <span class="keyword">new</span> <span class="type">TabController</span>(length: _titles.length,vsync: <span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="type">Widget</span> build(<span class="type">BuildContext</span> context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Scaffold</span>(</span><br><span class="line">      appBar: <span class="type">AppBar</span>(</span><br><span class="line">        leading: <span class="type">Icon</span>(<span class="type">Icons</span>.menu),</span><br><span class="line">        title: buildTabBar(),</span><br><span class="line">        <span class="comment">//bottom: buildTabBar(),</span></span><br><span class="line">      ),</span><br><span class="line">      body: <span class="type">TabBarViewLayout</span>()</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">Widget</span> buildTabBar() &#123;</span><br><span class="line">    <span class="keyword">return</span>  <span class="type">TabBar</span>(</span><br><span class="line">          <span class="comment">//构造Tab集合</span></span><br><span class="line">          tabs: _titles.map((<span class="type">String</span> title)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">Tab</span>(</span><br><span class="line">              text: title,</span><br><span class="line">            );</span><br><span class="line">          &#125;).toList(),</span><br><span class="line">          <span class="comment">///省略部分代码</span></span><br><span class="line">          controller: _tabController,</span><br><span class="line">        );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TabBarView Widget</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TabBarViewLayout</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="type">Widget</span> build(<span class="type">BuildContext</span> context) &#123;</span><br><span class="line">    print(<span class="string">"TabBarViewLayout build......."</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="type">TabBarView</span>(</span><br><span class="line">      controller: _tabController,</span><br><span class="line">      children: _titles.map((<span class="type">String</span> title)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">TabPageView</span>(title);</span><br><span class="line">      &#125;).toList(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果代码，可以看到在AppBar这个widget的title属性中加入TabBar，也就是AppBat的title模块显示TabBar，也可在AppBar的bottom属性加入；还需要注意TabBar和TabBarView正是通过同一个controller来实现菜单切换和滑动状态同步的，最终运行结果如下，分被设置tabbar在title 和bottom属性</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/flutter/refreshPage/page_tab_title.jpg" height="400" width="230"></p><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/flutter/refreshPage/page_tab_bottom.jpg" height="400" width="230"></p><h3 id="下拉刷新，上拉加载更多实现（RefreshIndicator）"><a href="#下拉刷新，上拉加载更多实现（RefreshIndicator）" class="headerlink" title="下拉刷新，上拉加载更多实现（RefreshIndicator）"></a>下拉刷新，上拉加载更多实现（RefreshIndicator）</h3><ul><li>下拉刷新 Flutter SDK中已经提供了一个RefreshIndicator控件，所以结合RefreshIndicator控件，让其包裹ListView控件，结合滑动监听ScrollController，并且设置头部，尾部加载更多等界面，就可以完成一个通用的下拉刷新，上拉加载更多的通用控件。首先来看看RefreshIndicator构造方法</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> RefreshIndicator(&#123;</span><br><span class="line">  Key key,</span><br><span class="line">  <span class="meta">@required</span> <span class="keyword">this</span>.child, <span class="comment">//包装一个可滚动widget</span></span><br><span class="line">  <span class="keyword">this</span>.displacement = <span class="number">40.0</span>,</span><br><span class="line">  <span class="meta">@required</span> <span class="keyword">this</span>.onRefresh, <span class="comment">//触发刷新调用方法</span></span><br><span class="line">  <span class="keyword">this</span>.color, <span class="comment">//指示器颜色</span></span><br><span class="line">  <span class="keyword">this</span>.backgroundColor,</span><br><span class="line">  <span class="keyword">this</span>.notificationPredicate = defaultScrollNotificationPredicate,</span><br><span class="line">  <span class="keyword">this</span>.semanticsLabel,</span><br><span class="line">  <span class="keyword">this</span>.semanticsValue,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>RefreshIndicator包装一个可滚动widget，这里使用ListView</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">RefreshIndicator</span>(</span><br><span class="line">      <span class="attribute">child</span>: ListView.builder(</span><br><span class="line">          <span class="comment">///保持ListView任何情况都能滚动，解决在RefreshIndicator的兼容问题。</span></span><br><span class="line">          <span class="attribute">physics</span>: const AlwaysScrollableScrollPhysics(),</span><br><span class="line">          <span class="attribute">itemBuilder</span>: (context,index)&#123;</span><br><span class="line">              return _getItem(index);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">///根据状态返回绘制 item 数量</span></span><br><span class="line">          <span class="attribute">itemCount</span>: _getListCount(),</span><br><span class="line">          <span class="comment">///滑动监听</span></span><br><span class="line">          <span class="attribute">controller</span>: _scrollController,</span><br><span class="line">      ),</span><br><span class="line">      <span class="attribute">onRefresh</span>: _handleRefresh,</span><br><span class="line">      <span class="attribute">color</span>: Theme.of(context).primaryColor, <span class="comment">//指示器颜色</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>ListView有两个重要方法设置，一个是itemBuilder构建列表item的每一个页面，另一个构建item页面数量itemCount。首先看itemCount方法</li></ul><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///根据配置状态返回实际列表数量</span></span><br><span class="line">  _getListCount() &#123;</span><br><span class="line">    <span class="comment">///是否需要头部</span></span><br><span class="line">    <span class="keyword">if</span> (widget.isHaveHeader) &#123;</span><br><span class="line">      <span class="keyword">return</span> (items.<span class="built_in">length</span> &gt; <span class="number">0</span>) ? items.<span class="built_in">length</span> + <span class="number">2</span> : items.<span class="built_in">length</span> + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (items.<span class="built_in">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> (items.<span class="built_in">length</span> &gt; <span class="number">0</span>) ? items.<span class="built_in">length</span> + <span class="number">1</span> : items.<span class="built_in">length</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>该方法中，做了几种内容类型判断，如果需要头部，用Item 0 的 Widget 作为ListView的头部，列表数量大于0时，因为头部和底部加载更多选项，需要对列表数据总数+2，如果不需要头部，在数据获取为零时，固定返回数量1用于空页面呈现或者错误页面；如果有数据，加上外部加载更多选项，需要对列表数据总数+1。接着看_getItem()方法，返回对应渲染页面。</li></ul><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///根据配置状态返回实际列表渲染Item</span></span><br><span class="line">  _getItem(<span class="type">int</span> <span class="keyword">index</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!widget.isHaveHeader &amp;&amp; <span class="keyword">index</span> == items.<span class="built_in">length</span> &amp;&amp; items.<span class="built_in">length</span> != <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> _buildProgressIndicator();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (widget.isHaveHeader &amp;&amp; <span class="keyword">index</span> == _getListCount()<span class="number">-1</span> &amp;&amp; items.<span class="built_in">length</span> != <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> _buildProgressIndicator();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (widget.isHaveHeader &amp;&amp; <span class="keyword">index</span> == <span class="number">0</span> &amp;&amp; items.<span class="built_in">length</span> != <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> widget.headerView();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!widget.isHaveHeader &amp;&amp; items.<span class="built_in">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">///如果不需要头部，并且数据为0，渲染空页面</span></span><br><span class="line">      <span class="keyword">if</span>(isLoading)&#123;</span><br><span class="line">        <span class="keyword">return</span> _buildIsLoading();</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _buildEmpty();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(widget.isHaveHeader &amp;&amp; items.<span class="built_in">length</span> == <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(isLoading)&#123;</span><br><span class="line">        <span class="keyword">return</span> _buildIsLoading();</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> _buildEmpty();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> widget.renderItem(<span class="keyword">index</span>, items[widget.isHaveHeader ? <span class="keyword">index</span><span class="number">-1</span> : <span class="keyword">index</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><p>该方法中，如果没有设置头部，并且数据不为0，当index等于数据长度时，渲染加载更多页面（因为index是从0开始）；如果设置了头部页面，并且数据不为0，当index等于实际渲染长度 - 1时，渲染加载更多页面（在该方法判断是否已经加载到底）；接着如果设置了头部widget，并且数据不为0，当index = 0 ，渲染头部widget；如果没设置头部，并且数据为0，如果当前正在刷新，渲染Loading页面，否则渲染空页面或者Error页面；同理，如果设置头部，并且数据为0，并且当前正在刷新，渲染Loading页面，否则渲染空页面或者Error页面；如果不是上面情况，则渲染正常渲染Item，如果这里有需要，可以直接返回相对位置的index，如果有头部 index 减一 ，保持不会忽略 index = 0 的数据。</p></li><li><p>接着封装一个统一网络请求方法，外部请求安装固定格式的 Map 将数据返回给下拉刷新上拉加载更多widget，达到通用的目的。</p></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//网络请求获取数据 isRefresh 是否为下拉刷新</span></span><br><span class="line"> Future&lt;<span class="built_in">List</span>&gt; makeHttpRequest(<span class="built_in">bool</span> isRefresh) <span class="keyword">async</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (widget.requestApi <span class="keyword">is</span> <span class="built_in">Function</span>) &#123;</span><br><span class="line">     <span class="built_in">Map</span> listObj = <span class="keyword">new</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="keyword">dynamic</span>&gt;();</span><br><span class="line">     <span class="keyword">if</span>(isRefresh)&#123;</span><br><span class="line">       <span class="comment">//下拉刷新</span></span><br><span class="line">       listObj = <span class="keyword">await</span> widget.requestApi(&#123;<span class="string">'pageIndex'</span>: <span class="number">0</span>&#125;);</span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       <span class="comment">//上拉加载更多</span></span><br><span class="line">       listObj = <span class="keyword">await</span> widget.requestApi(&#123;<span class="string">'pageIndex'</span>: _pageIndex&#125;);</span><br><span class="line">     &#125;</span><br><span class="line">     _pageIndex = listObj[<span class="string">'pageIndex'</span>];</span><br><span class="line">     _pageTotal = listObj[<span class="string">'total'</span>];</span><br><span class="line">     <span class="keyword">return</span> listObj[<span class="string">'list'</span>];</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> Future.delayed(<span class="built_in">Duration</span>(seconds: <span class="number">2</span>), () &#123;</span><br><span class="line">       <span class="keyword">return</span> [];</span><br><span class="line">     &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>基础东西写好了，loading 加载动画这里直接就使用现成的轮子好了，推荐一个loading库，<a href="https://github.com/jogboms/flutter_spinkit" target="_blank" rel="noopener">flutter_spinkit</a></li><li>贴上loading加载代码（更多实现细节请看文末demo地址代码）</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Widget</span> <span class="selector-tag">_buildIsLoading</span>() &#123;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">Container</span>(</span><br><span class="line">      <span class="attribute">width</span>: MediaQuery.of(context).size.width,</span><br><span class="line">      <span class="attribute">height</span>: MediaQuery.of(context).size.height*<span class="number">0.85</span>,</span><br><span class="line">      <span class="attribute">child</span>: new Center(</span><br><span class="line">        <span class="attribute">child</span>: Column(</span><br><span class="line">            <span class="attribute">crossAxisAlignment</span>: CrossAxisAlignment.center,</span><br><span class="line">            <span class="attribute">mainAxisAlignment</span>: MainAxisAlignment.center,</span><br><span class="line">            <span class="attribute">children</span>: &lt;Widget&gt;[</span><br><span class="line">                 Row(</span><br><span class="line">                   <span class="attribute">mainAxisAlignment</span>: MainAxisAlignment.spaceEvenly,</span><br><span class="line">                   <span class="attribute">children</span>: &lt;Widget&gt;[</span><br><span class="line">                     SpinKitCircle(<span class="attribute">size</span>: <span class="number">55.0</span>, <span class="attribute">color</span>: Theme.of(context).primaryColor),</span><br><span class="line">                   ],</span><br><span class="line">                 ),</span><br><span class="line">                Padding(</span><br><span class="line">                 <span class="attribute">child</span>: Text(<span class="string">"正在加载.."</span>,</span><br><span class="line">                    <span class="attribute">style</span>: TextStyle(<span class="attribute">color</span>: Colors.black54, <span class="attribute">fontSize</span>: <span class="number">15.0</span>)),</span><br><span class="line">                <span class="attribute">padding</span>: EdgeInsets.all(<span class="number">15.0</span>),)</span><br><span class="line">                ],)</span><br><span class="line">    ));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>最后，通过构造方法设置设置需要加载的item值和是否支持下拉刷新和上来加载更多等，灵活配置控件</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模块item</span></span><br><span class="line"> <span class="keyword">final</span> renderItem;</span><br><span class="line"> <span class="comment">//数据获取方法</span></span><br><span class="line"> <span class="keyword">final</span> requestApi;</span><br><span class="line"> <span class="comment">//头部</span></span><br><span class="line"> <span class="keyword">final</span> headerView;</span><br><span class="line"> <span class="comment">//是否添加头部 默认不添加</span></span><br><span class="line"> <span class="keyword">final</span> <span class="built_in">bool</span> isHaveHeader;</span><br><span class="line"> <span class="comment">//是否支持下拉刷新 默认可以下拉刷新</span></span><br><span class="line"> <span class="keyword">final</span> <span class="built_in">bool</span> isCanRefresh;</span><br><span class="line"> <span class="comment">//是否支持下拉加载更多 默认可以加载更多</span></span><br><span class="line"> <span class="keyword">final</span> <span class="built_in">bool</span> isCanLoadMore;</span><br><span class="line"> <span class="keyword">const</span> RefreshPage(&#123;<span class="meta">@required</span> <span class="keyword">this</span>.requestApi,</span><br><span class="line">                    <span class="meta">@required</span> <span class="keyword">this</span>.renderItem,</span><br><span class="line">                    <span class="keyword">this</span>.headerView,</span><br><span class="line">                    <span class="keyword">this</span>.isHaveHeader = <span class="keyword">false</span>,</span><br><span class="line">                    <span class="keyword">this</span>.isCanRefresh = <span class="keyword">true</span>,</span><br><span class="line">                    <span class="keyword">this</span>.isCanLoadMore = <span class="keyword">true</span> &#125;)</span><br><span class="line">                    : <span class="keyword">assert</span>(requestApi <span class="keyword">is</span> <span class="built_in">Function</span>),</span><br><span class="line">                      <span class="keyword">assert</span>(renderItem <span class="keyword">is</span> <span class="built_in">Function</span>),</span><br><span class="line">                     <span class="keyword">super</span>();</span><br></pre></td></tr></table></figure><h3 id="最终demo-效果"><a href="#最终demo-效果" class="headerlink" title="最终demo 效果"></a>最终demo 效果</h3><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/flutter/refreshPage/loadingdata.gif" height="400" width="230"></p><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/flutter/refreshPage/loadingerror.gif" height="400" width="230"></p><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/flutter/refreshPage/noloadmore.gif" height="400" width="230"></p><h3 id="Demo-地址"><a href="#Demo-地址" class="headerlink" title="Demo 地址"></a>Demo 地址</h3><ul><li><a href="https://github.com/maoqitian/flutter_demo" target="_blank" rel="noopener">https://github.com/maoqitian/flutter_demo</a> </li></ul><h3 id="About-me"><a href="#About-me" class="headerlink" title="About me"></a>About me</h3><h4 id="blog："><a href="#blog：" class="headerlink" title="blog："></a>blog：</h4><ul><li><a href="https://www.maoqitian.com/">个人博客</a></li><li><a href="https://juejin.im/user/59e956626fb9a045204b57d4" target="_blank" rel="noopener">掘金</a></li><li><a href="https://www.jianshu.com/u/f58cd7ff1a08" target="_blank" rel="noopener">简书</a></li><li><a href="https://github.com/maoqitian" target="_blank" rel="noopener">Github</a><h4 id="mail："><a href="#mail：" class="headerlink" title="mail："></a>mail：</h4></li><li><a href="">maoqitian@gmail.com</a></li><li><a href="">maoqitian068@163.com</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/maoqitian/MaoMdPhoto/master/flutter/flutter-logo.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;基础页面实现&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;TabBar-TabBarView-实现页面切换联动（类似Android-tablayout-ViewPage）效果&quot;&gt;&lt;a href=&quot;#TabBar-TabBarView-实现页面切换联动（类似Android-tablayout-ViewPage）效果&quot; class=&quot;headerlink&quot; title=&quot;TabBar + TabBarView 实现页面切换联动（类似Android tablayout + ViewPage）效果&quot;&gt;&lt;/a&gt;TabBar + TabBarView 实现页面切换联动（类似Android tablayout + ViewPage）效果&lt;/h3&gt;
    
    </summary>
    
      <category term="Flutter探索" scheme="https://www.maoqitian.com/categories/Flutter%E6%8E%A2%E7%B4%A2/"/>
    
    
      <category term="dart" scheme="https://www.maoqitian.com/tags/dart/"/>
    
      <category term="Flutter" scheme="https://www.maoqitian.com/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 之数据共享 InheritedWidget</title>
    <link href="https://www.maoqitian.com/2019/12/01/Flutter-%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB-InheritedWidget/"/>
    <id>https://www.maoqitian.com/2019/12/01/Flutter-之数据共享-InheritedWidget/</id>
    <published>2019-12-01T05:19:04.000Z</published>
    <updated>2020-10-15T15:15:47.757Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/maoqitian/MaoMdPhoto/master/flutter/flutter-logo.png" alt="image"></p><blockquote><p>Flutter 中Widget 多种多样，有UI的，当然也有功能型的组件InheritedWidget 组件就是Flutter 中的一个功能组件，它可以实现Flutter 组件之间的数据共享，他的数据传递方向在Widget树传递是从上到下的。<br><a id="more"></a></p></blockquote><h1 id="InheritedWidget-实现组件数据共享"><a href="#InheritedWidget-实现组件数据共享" class="headerlink" title="InheritedWidget 实现组件数据共享"></a>InheritedWidget 实现组件数据共享</h1><ul><li>既然要使用InheritedWidget，首先写一个Widget继承InheritedWidget</li></ul><h2 id="实现ShareDataWidget"><a href="#实现ShareDataWidget" class="headerlink" title="实现ShareDataWidget"></a>实现ShareDataWidget</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Created with Android Studio.</span></span><br><span class="line"><span class="comment">/// User: maoqitian</span></span><br><span class="line"><span class="comment">/// Date: 2019/11/15 0015</span></span><br><span class="line"><span class="comment">/// email: maoqitian068@163.com</span></span><br><span class="line"><span class="comment">/// des:  InheritedWidget是Flutter中非常重要的一个功能型组件，它提供了一种数据在widget树中从上到下传递、共享的方式</span></span><br><span class="line"><span class="keyword">import</span> <span class="symbol">'package</span>:flutter/material.dart';</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShareDataWidget</span> <span class="keyword">extends</span> <span class="title">InheritedWidget</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> int data; <span class="comment">//需要在子树中共享的数据，保存点击次数</span></span><br><span class="line"></span><br><span class="line">  <span class="type">ShareDataWidget</span>( &#123;<span class="meta">@required</span> <span class="keyword">this</span>.data,<span class="type">Widget</span> child&#125;)</span><br><span class="line">      :<span class="keyword">super</span>(child:child);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 子树中的widget通过该方法获取ShareDataWidget，从而获取共享数据</span></span><br><span class="line">  static <span class="type">ShareDataWidget</span> of(<span class="type">BuildContext</span> context)&#123;</span><br><span class="line">    <span class="keyword">return</span> context.inheritFromWidgetOfExactType(<span class="type">ShareDataWidget</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//继承 InheritedWidget 实现的方法 返回值 决定当data发生变化时，是否通知子树中依赖data的Widget 更新数据</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  bool updateShouldNotify(<span class="type">ShareDataWidget</span> oldWidget) &#123;</span><br><span class="line">    <span class="comment">//如果返回true，则子树中依赖(build函数中有调用)本widget的子widget的`state.didChangeDependencies`会被调用</span></span><br><span class="line">    <span class="keyword">return</span> oldWidget.data != data;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>由以上实现我们可以看到updateShouldNotify 返回值 决定当data发生变化时，是否通知子树中依赖data的Widget 更新数据，并且实现了of 方法方便子widget获取共享数据。</li></ul><h2 id="测试ShareDataWidget数据共享"><a href="#测试ShareDataWidget数据共享" class="headerlink" title="测试ShareDataWidget数据共享"></a>测试ShareDataWidget数据共享</h2><ul><li>前面我们已经实现了InheritedWidget，现在我们来看看如何使用随便写一个widget，让其显示ShareDataWidget的data 数据</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/// Created with Android Studio.</span></span><br><span class="line"><span class="comment">/// User: maoqitian</span></span><br><span class="line"><span class="comment">/// Date: 2019/11/15 0015</span></span><br><span class="line"><span class="comment">/// email: maoqitian068@163.com</span></span><br><span class="line"><span class="comment">/// des:  测试 ShareDataWidget</span></span><br><span class="line"><span class="keyword">import</span> <span class="symbol">'package</span>:flutter/material.dart';</span><br><span class="line"><span class="keyword">import</span> <span class="symbol">'package</span>:flutter_hellow_world/<span class="type">InheritedWidget</span>/<span class="type">ShareDataWidget</span>.dart';</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestShareDataWidget</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _TestShareDataWidgetState createState() =&gt; _TestShareDataWidgetState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_TestShareDataWidgetState</span> <span class="keyword">extends</span> <span class="title">State&lt;TestShareDataWidget&gt;</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  void didChangeDependencies() &#123;</span><br><span class="line">    <span class="keyword">super</span>.didChangeDependencies();</span><br><span class="line">    <span class="comment">//上层 widget中的InheritedWidget改变(updateShouldNotify返回true)时会被调用。</span></span><br><span class="line">    <span class="comment">//如果build中没有依赖InheritedWidget，则此回调不会被调用。</span></span><br><span class="line">    print(<span class="string">"didChangeDependencies"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="type">Widget</span> build(<span class="type">BuildContext</span> context) &#123;</span><br><span class="line">    <span class="comment">//显示 ShareDataWidget 数据变化，如果build中没有依赖InheritedWidget，则此回调不会被调用。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="type">Text</span>(<span class="type">ShareDataWidget</span>.of(context).data.toString());</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>接着新建widget 来使用ShareDataWidget，创建一个按钮，每点击一次，就将ShareDataWidget的值自增</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Created with Android Studio.</span></span><br><span class="line"><span class="comment">/// User: maoqitian</span></span><br><span class="line"><span class="comment">/// Date: 2019/11/15 0015</span></span><br><span class="line"><span class="comment">/// email: maoqitian068@163.com</span></span><br><span class="line"><span class="comment">/// des:  创建一个按钮，每点击一次，就将ShareDataWidget的值自增</span></span><br><span class="line"><span class="keyword">import</span> <span class="symbol">'package</span>:flutter/material.dart';</span><br><span class="line"><span class="keyword">import</span> <span class="symbol">'package</span>:flutter_hellow_world/<span class="type">InheritedWidget</span>/<span class="type">ShareDataWidget</span>.dart';</span><br><span class="line"><span class="keyword">import</span> <span class="symbol">'package</span>:flutter_hellow_world/<span class="type">InheritedWidget</span>/<span class="type">TestShareDataWidget</span>.dart';</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InheritedWidgetTest</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _InheritedWidgetTestState createState() =&gt; _InheritedWidgetTestState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_InheritedWidgetTestState</span> <span class="keyword">extends</span> <span class="title">State&lt;InheritedWidgetTest&gt;</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  int count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="type">Widget</span> build(<span class="type">BuildContext</span> context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Center</span>(</span><br><span class="line">      child: <span class="type">ShareDataWidget</span>(</span><br><span class="line">        data: count, <span class="comment">//共享数据 data</span></span><br><span class="line">        child: <span class="type">Column</span>(</span><br><span class="line">          mainAxisAlignment: <span class="type">MainAxisAlignment</span>.center,</span><br><span class="line">          children: &lt;<span class="type">Widget</span>&gt;[</span><br><span class="line">            <span class="type">Padding</span>(</span><br><span class="line">              padding: const <span class="type">EdgeInsets</span>.only(bottom: <span class="number">20.0</span>),</span><br><span class="line">              child: <span class="type">TestShareDataWidget</span>()<span class="comment">//子widget中依赖ShareDataWidget</span></span><br><span class="line">            ),</span><br><span class="line">            <span class="type">RaisedButton</span>(</span><br><span class="line">              child: <span class="type">Text</span>(<span class="string">"计数增加"</span>),</span><br><span class="line">              onPressed: ()&#123; </span><br><span class="line">                setState(() &#123;</span><br><span class="line">                  ++ count;</span><br><span class="line">                &#125;);</span><br><span class="line">              &#125;,</span><br><span class="line">            )</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>代码很简单，创建一个按钮，每点击一次，就将ShareDataWidget的data值加一，而前面创建的TestShareDataWidget中依赖了ShareDataWidget的data值，如果数据共享则它的值就会跟随变化。</p></li><li><p>运行效果</p></li></ul><p><img src="https://raw.githubusercontent.com/maoqitian/MaoMdPhoto/master/flutter/InheritedWidget/demo.gif" height="400" width="230"></p><h2 id="didChangeDependencies调用"><a href="#didChangeDependencies调用" class="headerlink" title="didChangeDependencies调用"></a>didChangeDependencies调用</h2><ul><li>运行上面的例子我们看到日志中会打印出如下日志，这就说明改变ShareDataWidget的data值时TestShareDataWidget的didChangeDependencies方法被调用了，该方法我们在写StatefulWidget时很少用到，我们可以在该方法中做一些耗时操作，比如数据持久化、网络请求等。</li></ul><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I/flutter <span class="comment">( 7082)</span>: didCha<span class="symbol">ngeDependencies</span></span><br></pre></td></tr></table></figure><ul><li>如果不想调用让didChangeDependencies被调用，也是有办法的，如下改变ShareDataWidget的of方法</li></ul><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子树中的widget获取共享数据 方法</span></span><br><span class="line"> <span class="keyword">static</span> ShareDataWidget of(BuildContext <span class="keyword">context</span>)&#123;</span><br><span class="line">   <span class="comment">//return context.inheritFromWidgetOfExactType(ShareDataWidget);</span></span><br><span class="line">   <span class="comment">//使用 ancestorInheritedElementForWidgetOfExactType 方法当数据变化则不会调用 子widget 的didChangeDependencies 方法 </span></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">context</span><span class="variable">.ancestorInheritedElementForWidgetOfExactType</span>(ShareDataWidget)<span class="variable">.widget</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>这里可以看到改变使用context.ancestorInheritedElementForWidgetOfExactType方法，而为什么使用这个方法didChangeDependencies就不会被调用呢？看源码就是最好的解释，我们直接翻到<strong>framework.dart</strong>中这两个方法的源码</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/**</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> * framework.dart  inheritFromWidgetOfExactType和ancestorInheritedElementForWidgetOfExactType方法源码</span></span></span><br><span class="line"><span class="comment"><span class="markdown"> */</span></span></span><br><span class="line"> <span class="meta">@override</span></span><br><span class="line">  InheritedWidget inheritFromWidgetOfExactType(<span class="built_in">Type</span> targetType, &#123; <span class="built_in">Object</span> aspect &#125;) &#123;</span><br><span class="line">    <span class="keyword">assert</span>(_debugCheckStateIsActiveForAncestorLookup());</span><br><span class="line">    <span class="keyword">final</span> InheritedElement ancestor = _inheritedWidgets == <span class="keyword">null</span> ? <span class="keyword">null</span> : _inheritedWidgets[targetType];</span><br><span class="line">    <span class="keyword">if</span> (ancestor != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">assert</span>(ancestor <span class="keyword">is</span> InheritedElement);</span><br><span class="line">      <span class="keyword">return</span> inheritFromElement(ancestor, aspect: aspect);</span><br><span class="line">    &#125;</span><br><span class="line">    _hadUnsatisfiedDependencies = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  InheritedElement ancestorInheritedElementForWidgetOfExactType(<span class="built_in">Type</span> targetType) &#123;</span><br><span class="line">    <span class="keyword">assert</span>(_debugCheckStateIsActiveForAncestorLookup());</span><br><span class="line">    <span class="keyword">final</span> InheritedElement ancestor = _inheritedWidgets == <span class="keyword">null</span> ? <span class="keyword">null</span> : _inheritedWidgets[targetType];</span><br><span class="line">    <span class="keyword">return</span> ancestor;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>显然，一对比我们就可以看到inheritFromWidgetOfExactType多调用了inheritFromElement方法，继续看该方法源码</li></ul><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * framework.dart  inheritFromElement方法源码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">@override</span></span><br><span class="line">  <span class="function">InheritedWidget <span class="title">inheritFromElement</span><span class="params">(InheritedElement ancestor, &#123; Object aspect &#125;)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">assert</span>(ancestor != <span class="keyword">null</span>);</span><br><span class="line">    _dependencies ??= HashSet&lt;InheritedElement&gt;();</span><br><span class="line">    _dependencies.add(ancestor);</span><br><span class="line">    ancestor.updateDependencies(<span class="keyword">this</span>, <span class="class"><span class="keyword">aspect</span>)</span>;</span><br><span class="line">    <span class="keyword">return</span> ancestor.widget;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>到这里，一切都变得很清晰， inheritFromWidgetOfExactType方法中调用了inheritFromElement方法，而在该方法中InheritedWidget将其子widget添加了依赖关系，所以InheritedWidget发生改变，依赖它的子widget就会更新，也就会调用刚刚所说的didChangeDependencies方法，而ancestorInheritedElementForWidgetOfExactType方法没有和子widget注册依赖关系，当然也不会调用didChangeDependencies方法。</li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul><li>以上通过一个使用InheritedWidget的简单例子，实现了InheritedWidget的使用，了解了didChangeDependencies调用，可以说对InheritedWidget这个组件有了一定了解，接下来通过对InheritedWidget封装，实现一个简易的Provider实现跨组件数据共享。</li></ul><h1 id="实现跨组件数据共享组件"><a href="#实现跨组件数据共享组件" class="headerlink" title="实现跨组件数据共享组件"></a>实现跨组件数据共享组件</h1><ul><li>作为一个原生Android 开发者，跨组件数据共享对于我们来说并不陌生，比如Android 开发中的Eventbus 就可以实现对事件订阅者的状态更新，Flutter中也有Eventbus的实现，但是这里直接使用Flutter 提供给我们的组件InheritedWidget来实现跨组件数据共享，Flutter中比较有名的<a href="https://pub.dev/packages/provider" target="_blank" rel="noopener">Provider</a>核心也是通过InheritedWidget来实现的，接着我们来实现一个自己的简易Provider。</li></ul><h2 id="实现通用InheritedWidget"><a href="#实现通用InheritedWidget" class="headerlink" title="实现通用InheritedWidget"></a>实现通用InheritedWidget</h2><ul><li>要共享的数据多种多样，使用泛型来声明需要共享的数据</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Created with Android Studio.</span></span><br><span class="line"><span class="comment">/// User: maoqitian</span></span><br><span class="line"><span class="comment">/// Date: 2019-11-17</span></span><br><span class="line"><span class="comment">/// email: maoqitian068@163.com</span></span><br><span class="line"><span class="comment">/// des:  实现InheritedWidget  保存需要共享的数据InheritedWidget</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="symbol">'package</span>:flutter/material.dart';</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InheritedProvider&lt;T&gt;</span> <span class="keyword">extends</span> <span class="title">InheritedWidget</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//共享数据  外部传入</span></span><br><span class="line">  <span class="keyword">final</span> <span class="type">T</span> data;</span><br><span class="line"></span><br><span class="line">  <span class="type">InheritedProvider</span>(&#123;<span class="meta">@required</span> <span class="keyword">this</span>.data, <span class="type">Widget</span> child&#125;):<span class="keyword">super</span>(child:child);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  bool updateShouldNotify(<span class="type">InheritedProvider</span>&lt;<span class="type">T</span>&gt; oldWidget) &#123;</span><br><span class="line">    <span class="comment">///返回true，则每次更新都会调用依赖其的子孙节点的`didChangeDependencies`方法。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="InheritedWidget-封装"><a href="#InheritedWidget-封装" class="headerlink" title="InheritedWidget 封装"></a>InheritedWidget 封装</h2><ul><li>通过上面的实现，可以看到InheritedProvider中并没有方让调用者可以获取InheritedWidget组件，别着急，这里需要先明确两点；<strong>首先，数据更新通知使用ChangeNotifier（FlultterSDK提供的一个Flutter风格的发布者-订阅者模式类）来进行通知，其次，接收到通知之后则由订阅者本身更新来重新构建InheritedProvider。</strong></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Created with Android Studio.</span></span><br><span class="line"><span class="comment">/// User: maoqitian</span></span><br><span class="line"><span class="comment">/// Date: 2019-11-17</span></span><br><span class="line"><span class="comment">/// email: maoqitian068@163.com</span></span><br><span class="line"><span class="comment">/// des:  订阅者</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="symbol">'package</span>:flutter/material.dart';</span><br><span class="line"><span class="keyword">import</span> <span class="symbol">'package</span>:flutter_theme_change/provider/<span class="type">InheritedProvider</span>.dart';</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该方法用于在Dart中获取模板类型</span></span><br><span class="line"><span class="type">Type</span> _typeOf&lt;<span class="type">T</span>&gt;()&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="type">T</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChangeNotifierProvider&lt;T</span> <span class="keyword">extends</span> <span class="title">ChangeNotifier&gt;</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="type">Widget</span> child;</span><br><span class="line">  <span class="keyword">final</span> <span class="type">T</span> data;</span><br><span class="line"></span><br><span class="line">  <span class="type">ChangeNotifierProvider</span>(&#123;<span class="type">Key</span> key,<span class="keyword">this</span>.child,<span class="keyword">this</span>.data&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//方便子树中的widget获取共享数据</span></span><br><span class="line">  static <span class="type">T</span> of&lt;<span class="type">T</span>&gt; (<span class="type">BuildContext</span> context,&#123;bool listen = <span class="literal">true</span>&#125;)&#123; <span class="comment">//listen 是否注册依赖关系 默认注册</span></span><br><span class="line">    <span class="keyword">final</span> <span class="class"><span class="keyword">type</span> </span>= _typeOf&lt;<span class="type">InheritedProvider</span>&lt;<span class="type">T</span>&gt;&gt;();</span><br><span class="line">    <span class="keyword">final</span> provider = listen ? context.inheritFromWidgetOfExactType(<span class="class"><span class="keyword">type</span>) <span class="title">as</span> <span class="title">InheritedProvider&lt;T&gt;</span> </span>:</span><br><span class="line">    context.ancestorInheritedElementForWidgetOfExactType(<span class="class"><span class="keyword">type</span>)<span class="title">?</span>.<span class="title">widget</span> <span class="title">as</span> <span class="title">InheritedProvider&lt;T&gt;</span></span>;</span><br><span class="line">    <span class="keyword">return</span> provider.data;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="type">State</span>&lt;<span class="type">StatefulWidget</span>&gt; createState() &#123;</span><br><span class="line">    <span class="keyword">return</span> _ChangeNotifierProviderState&lt;<span class="type">T</span>&gt;();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ChangeNotifierProviderState&lt;T</span> <span class="keyword">extends</span> <span class="title">ChangeNotifier&gt;</span> <span class="keyword">extends</span> <span class="title">State&lt;ChangeNotifierProvider&lt;T&gt;&gt;</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="type">Widget</span> build(<span class="type">BuildContext</span> context) &#123;</span><br><span class="line">  <span class="comment">//构建 InheritedProvider</span></span><br><span class="line">    <span class="keyword">return</span> <span class="type">InheritedProvider</span>&lt;<span class="type">T</span>&gt;(</span><br><span class="line">      data: widget.data,</span><br><span class="line">      child: widget.child,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>由上代码，创建了一个StatefulWidget，最终build构建的还是InheritedProvider，这时创建了返回对应data 数据的of方法，并且可以通过设置让子控件是否与InheritedWidget绑定（上一小节已经分析过），这样改变数据的控件就可以灵活的不与InheritedWidget绑定，也不用每次都更新改变数据的控件widget。</li><li>接着我们完善 _ChangeNotifierProviderState，当外部控件更新数据，并通过ChangeNotifier通知更新，ChangeNotifierProvider能够更新自身，让新数据生效，如何更新，那就是是使用setState方法，这也是创建StatefulWidget的目的。<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ChangeNotifierProviderState&lt;T</span> <span class="keyword">extends</span> <span class="title">ChangeNotifier&gt;</span> <span class="keyword">extends</span> <span class="title">State&lt;ChangeNotifierProvider&lt;T&gt;&gt;</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  void initState() &#123;</span><br><span class="line">    <span class="comment">// 给model添加监听器</span></span><br><span class="line">    widget.data.addListener(update);</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  void didUpdateWidget(<span class="type">ChangeNotifierProvider</span>&lt;<span class="type">T</span>&gt; oldWidget) &#123;</span><br><span class="line">    <span class="comment">//当Provider更新时，如果新旧数据不"=="，则解绑旧数据监听，同时添加新数据监听</span></span><br><span class="line">    <span class="keyword">if</span>(widget.data != oldWidget.data)&#123;</span><br><span class="line">       oldWidget.data.removeListener(update);</span><br><span class="line">       widget.data.addListener(update);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">super</span>.didUpdateWidget(oldWidget);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// build方法 省略</span></span><br><span class="line">  ........</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  void dispose() &#123;</span><br><span class="line">    <span class="comment">// 移除model监听器</span></span><br><span class="line">    widget.data.removeListener(update);</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  void update() &#123;</span><br><span class="line">    <span class="comment">//如果数据发生变化（model类调用了notifyListeners），重新构建InheritedProvider</span></span><br><span class="line">    setState(() =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="数据消费者封装（Consumer）"><a href="#数据消费者封装（Consumer）" class="headerlink" title="数据消费者封装（Consumer）"></a>数据消费者封装（Consumer）</h2><ul><li>数据有更新，有消息发出，还得有人消费，这样订阅者-消费者模式才完整，消费数说白了就是调用ChangeNotifierProvider的of方法来获取新数据，上一步我们已经触发订阅者的更新，间接就会重新构建它的子widget，子widget重新构建也就是对应消费消费数据，因为消费者依赖了订阅者本身，来看代码</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Created with Android Studio.</span></span><br><span class="line"><span class="comment">/// User: maoqitian</span></span><br><span class="line"><span class="comment">/// Date: 2019/11/18 0018</span></span><br><span class="line"><span class="comment">/// email: maoqitian068@163.com</span></span><br><span class="line"><span class="comment">/// des:  事件 消费者 获得当前context和指定数据类型的Provider</span></span><br><span class="line"><span class="keyword">import</span> <span class="symbol">'package</span>:flutter/material.dart';</span><br><span class="line"><span class="keyword">import</span> <span class="symbol">'package</span>:flutter_theme_change/provider/<span class="type">ChangeNotifierProvider</span>.dart';</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer&lt;T&gt;</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="type">Widget</span> child;</span><br><span class="line">  <span class="comment">//获得当前context</span></span><br><span class="line">  <span class="keyword">final</span> <span class="type">Widget</span> <span class="type">Function</span>(<span class="type">BuildContext</span> context, <span class="type">T</span> value) builder;</span><br><span class="line"></span><br><span class="line">  <span class="type">Consumer</span>(&#123;<span class="type">Key</span> key,<span class="meta">@required</span> <span class="keyword">this</span>.builder,<span class="keyword">this</span>.child&#125;):assert(builder !=<span class="literal">null</span>),<span class="keyword">super</span>(key:key);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="type">Widget</span> build(<span class="type">BuildContext</span> context) &#123;  <span class="comment">//默认绑定 注册依赖关系</span></span><br><span class="line">    <span class="keyword">return</span> builder(context,<span class="type">ChangeNotifierProvider</span>.of&lt;<span class="type">T</span>&gt;(context)); <span class="comment">//自动获取Model 获取更新的数据</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>由上代码，Consumer的build调用ChangeNotifierProvider.of方法默认就注册了依赖关系，所以由Consumer实现的widget就会由InheritedWidget的功能更新数据。</li></ul><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><ul><li>以上小结可以用一个流程图代替</li></ul><p><img src="https://raw.githubusercontent.com/maoqitian/MaoMdPhoto/master/flutter/InheritedWidget/Provider%E6%95%B0%E6%8D%AE%E5%85%B1%E4%BA%AB%E5%8E%9F%E7%90%86%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg" alt="Provider 数据共享原理流程图"></p><h1 id="数据共享组件实践切换主题"><a href="#数据共享组件实践切换主题" class="headerlink" title="数据共享组件实践切换主题"></a>数据共享组件实践切换主题</h1><ul><li><p>上一节中手写了一个非常简单基于InheritedWidget的Provider数据共享组件，接下来通过一个切换主题的例子来使用刚刚写好的ChangeNotifierProvider。</p></li><li><p>主题切换这里简单的改变主题颜色，所以共享数据就是颜色值，Demo 思路为使用Dialog，提供可选择的主题颜色，然后点击对应颜色则切换应用主题颜色，接下来一起实现。</p></li></ul><h2 id="创建主题model"><a href="#创建主题model" class="headerlink" title="创建主题model"></a>创建主题model</h2><ul><li>model 也可以看做是共享数据，继承ChangeNotifier，这样就能够调用notifyListeners方法触发ChangeNotifierProvider收到数据改变通知</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Created with Android Studio.</span></span><br><span class="line"><span class="comment">/// User: maoqitian</span></span><br><span class="line"><span class="comment">/// Date: 2019/11/18 0018</span></span><br><span class="line"><span class="comment">/// email: maoqitian068@163.com</span></span><br><span class="line"><span class="comment">/// des:  主题 model</span></span><br><span class="line"><span class="keyword">import</span> <span class="symbol">'package</span>:flutter/material.dart';</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThemeModel</span> <span class="keyword">extends</span> <span class="title">ChangeNotifier</span> </span>&#123;</span><br><span class="line">  int settingThemeColor ;</span><br><span class="line">  <span class="type">ThemeModel</span>(<span class="keyword">this</span>.settingThemeColor);</span><br><span class="line"></span><br><span class="line">  void changeTheme (int themeColor)&#123;</span><br><span class="line">    <span class="keyword">this</span>.settingThemeColor = themeColor;</span><br><span class="line">    <span class="comment">// 通知监听器（订阅者），重新构建InheritedProvider， 更新状态。</span></span><br><span class="line">    notifyListeners();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MaterialApp作为ChangeNotifierProvider子widget"><a href="#MaterialApp作为ChangeNotifierProvider子widget" class="headerlink" title="MaterialApp作为ChangeNotifierProvider子widget"></a>MaterialApp作为ChangeNotifierProvider子widget</h2><ul><li>改变主题颜色，也就是MaterialApp的theme 属性，所以讲 MaterialApp作为ChangeNotifierProvider子widget，这样MaterialApp就能收到共享的主题颜色数据值</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyHomePageState</span> <span class="keyword">extends</span> <span class="title">State&lt;MyHomePage&gt;</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  int themeColor =<span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  void initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    themeColor = sp.getInt(<span class="type">SharedPreferencesKeys</span>.themeColor);</span><br><span class="line">    <span class="keyword">if</span>(themeColor == <span class="literal">null</span> )&#123;</span><br><span class="line">      themeColor = <span class="number">0xFF3391EA</span>;<span class="comment">//默认蓝色</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="type">Widget</span> build(<span class="type">BuildContext</span> context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Center</span>(</span><br><span class="line">      child: <span class="type">ChangeNotifierProvider</span>&lt;<span class="type">ThemeModel</span>&gt;(</span><br><span class="line">        data: <span class="type">ThemeModel</span>(themeColor),</span><br><span class="line">        child: <span class="type">Consumer</span>&lt;<span class="type">ThemeModel</span>&gt;(</span><br><span class="line">          builder: (<span class="type">BuildContext</span> context,themeModel)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">MaterialApp</span>(</span><br><span class="line">              theme: <span class="type">ThemeData</span>(</span><br><span class="line">                primaryColor: <span class="type">Color</span>(themeModel.settingThemeColor),</span><br><span class="line">              ),</span><br><span class="line">              home: <span class="type">Scaffold</span>(</span><br><span class="line">                  appBar: <span class="type">AppBar</span>(</span><br><span class="line">                    title: <span class="type">Text</span>(<span class="string">"Flutter Theme Change"</span>),</span><br><span class="line">                    actions: &lt;<span class="type">Widget</span>&gt;[</span><br><span class="line">                      <span class="type">Builder</span>(builder: (context)&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="type">IconButton</span>(icon: <span class="keyword">new</span> <span class="type">Icon</span>(<span class="type">Icons</span>.color_lens), onPressed: ()&#123;</span><br><span class="line">                          _changeColor(context);</span><br><span class="line">                        &#125;);</span><br><span class="line">                      &#125;,)</span><br><span class="line">                      <span class="comment">// onPressed 点击事件</span></span><br><span class="line">                    ],</span><br><span class="line">                  ),</span><br><span class="line">                  body: <span class="type">Center</span>(</span><br><span class="line">                    child: <span class="type">Text</span>(<span class="string">"主题变化测试"</span>),</span><br><span class="line">                  )</span><br><span class="line">              ),</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  void _changeColor(<span class="type">BuildContext</span> context) &#123;</span><br><span class="line">      buildSimpleDialog(context);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>在AppBar 加入IconButton 让其点击能显示颜色选择Dialog，Dialog 显示的是一个颜色值数组widget，每个widget实现如下</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleThemeColor</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> int themeColor;</span><br><span class="line">  <span class="keyword">final</span> <span class="type">String</span> colorName;</span><br><span class="line"></span><br><span class="line">  const <span class="type">SingleThemeColor</span>(&#123;<span class="type">Key</span> key,<span class="keyword">this</span>.themeColor, <span class="keyword">this</span>.colorName&#125;):</span><br><span class="line">        <span class="keyword">super</span>(key:key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="type">Widget</span> build(<span class="type">BuildContext</span> context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">InkWell</span>(</span><br><span class="line">      onTap: () async&#123;</span><br><span class="line">         print(<span class="string">"点击了改变主题"</span>);</span><br><span class="line">         <span class="comment">//改变主题</span></span><br><span class="line">         <span class="type">ChangeNotifierProvider</span>.of&lt;<span class="type">ThemeModel</span>&gt;(context,listen: <span class="literal">false</span>).changeTheme(<span class="keyword">this</span>.themeColor);</span><br><span class="line">         await <span class="type">SpUtil</span>.getInstance()..putInt(<span class="type">SharedPreferencesKeys</span>.themeColor, <span class="keyword">this</span>.themeColor);</span><br><span class="line">         <span class="type">Navigator</span>.pop(context);</span><br><span class="line">      &#125;,</span><br><span class="line">      child: <span class="keyword">new</span> <span class="type">Column</span>( <span class="comment">// 竖直布局</span></span><br><span class="line">        children: &lt;<span class="type">Widget</span>&gt;[</span><br><span class="line">           <span class="type">Container</span>(</span><br><span class="line">             width: <span class="number">50</span>,</span><br><span class="line">             height: <span class="number">50</span>,</span><br><span class="line">             margin: const <span class="type">EdgeInsets</span>.all(<span class="number">5.0</span>),</span><br><span class="line">             decoration: <span class="type">BoxDecoration</span>( <span class="comment">//圆形背景装饰</span></span><br><span class="line">               borderRadius:<span class="type">BorderRadius</span>.all(</span><br><span class="line">                  <span class="type">Radius</span>.circular(<span class="number">50</span>)</span><br><span class="line">               ),</span><br><span class="line">               color: <span class="type">Color</span>(<span class="keyword">this</span>.themeColor)</span><br><span class="line">             ),</span><br><span class="line">           ),</span><br><span class="line">           <span class="type">Text</span>(</span><br><span class="line">             colorName,</span><br><span class="line">             style: <span class="type">TextStyle</span>(</span><br><span class="line">               color: <span class="type">Color</span>(<span class="keyword">this</span>.themeColor),</span><br><span class="line">               fontSize: <span class="number">14.0</span>),</span><br><span class="line">           ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以看到每个widget点击响应onTap 则调用ChangeNotifierProvider.of获取ThemeModel对象调用changeTheme方法来触发notifyListeners方法。还有一些细节，比如通过SharedPreferences保存颜色值等代码，具体可以查看文末demo 项目源码地址。</li><li>Demo 运行效果</li></ul><p><img src="https://raw.githubusercontent.com/maoqitian/MaoMdPhoto/master/flutter/InheritedWidget/theme-change.gif" height="400" width="230"></p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><ul><li>看到这里，相信你应该对InheritedWidget有了比较好的理解，了解了原理，使用起轮子来也会更加得心应手吧。如果要使用跨组件数据共享，还是直接使用功能完整的<a href="https://pub.dev/packages/provider" target="_blank" rel="noopener">Provider</a>吧。又一篇文章完成了，相信多少都会对看到文章的你有帮助，文章中如果有错误，请大家给我提出来，大家一起学习进步，如果觉得我的文章给予你帮助，也请给我一个喜欢和关注，同时也欢迎访问我的<a href="https://www.maoqitian.com"><strong>个人博客</strong></a>。</li></ul><h3 id="Demo-地址"><a href="#Demo-地址" class="headerlink" title="Demo 地址"></a>Demo 地址</h3><ul><li><a href="https://github.com/maoqitian/flutter_demo" target="_blank" rel="noopener">https://github.com/maoqitian/flutter_demo</a></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://book.flutterchina.club/" target="_blank" rel="noopener">Flutter 实战电子书</a></li></ul><h1 id="About-me"><a href="#About-me" class="headerlink" title="About me"></a>About me</h1><h3 id="blog："><a href="#blog：" class="headerlink" title="blog："></a>blog：</h3><ul><li><a href="https://www.maoqitian.com/">个人博客</a></li><li><a href="https://juejin.im/user/59e956626fb9a045204b57d4" target="_blank" rel="noopener">掘金</a></li><li><a href="https://www.jianshu.com/u/f58cd7ff1a08" target="_blank" rel="noopener">简书</a></li><li><a href="https://github.com/maoqitian" target="_blank" rel="noopener">Github</a><h3 id="mail："><a href="#mail：" class="headerlink" title="mail："></a>mail：</h3></li><li><a href="">maoqitian@gmail.com</a></li><li><a href="">maoqitian068@163.com</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/maoqitian/MaoMdPhoto/master/flutter/flutter-logo.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Flutter 中Widget 多种多样，有UI的，当然也有功能型的组件InheritedWidget 组件就是Flutter 中的一个功能组件，它可以实现Flutter 组件之间的数据共享，他的数据传递方向在Widget树传递是从上到下的。&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Flutter探索" scheme="https://www.maoqitian.com/categories/Flutter%E6%8E%A2%E7%B4%A2/"/>
    
    
      <category term="dart" scheme="https://www.maoqitian.com/tags/dart/"/>
    
      <category term="Flutter" scheme="https://www.maoqitian.com/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 与 Dart 语法初探</title>
    <link href="https://www.maoqitian.com/2019/12/01/Flutter-%E4%B8%8E-Dart-%E8%AF%AD%E6%B3%95%E5%88%9D%E6%8E%A2/"/>
    <id>https://www.maoqitian.com/2019/12/01/Flutter-与-Dart-语法初探/</id>
    <published>2019-12-01T04:24:15.000Z</published>
    <updated>2020-10-15T14:26:43.685Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/maoqitian/MaoMdPhoto/master/flutter/flutter-logo.png" alt="image"></p><h1 id="什么是flutter"><a href="#什么是flutter" class="headerlink" title="什么是flutter"></a>什么是flutter</h1><ul><li>google 推出的跨平台UI框架</li></ul><h1 id="环境搭建-MAC环境"><a href="#环境搭建-MAC环境" class="headerlink" title="环境搭建(MAC环境)"></a>环境搭建(MAC环境)</h1><ul><li>Flutter 依赖下面这些命令行工具<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash, <span class="keyword">mkdir</span>, <span class="keyword">rm</span>, git, curl, unzip, <span class="keyword">which</span></span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><h2 id="获取Flutter-SDK"><a href="#获取Flutter-SDK" class="headerlink" title="获取Flutter SDK"></a>获取Flutter SDK</h2><ul><li><p>flutter官网下载其最新可用的<a href="https://flutter.dev/docs/development/tools/sdk/releases?tab=macos#macos" target="_blank" rel="noopener">安装包</a></p></li><li><p>安装包下载完成则可以进行解压</p></li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip /指定解压目录/flutter_macos_v1<span class="number">.9</span><span class="number">.1</span>+hotfix<span class="number">.4</span>-stable.zip</span><br></pre></td></tr></table></figure><ul><li>解压完成之后我们会在解压好的目录下会多出一个flutter目录，获取并记住该目录路径，下一步我们会用到</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用pwd 命令查看目录路径</span></span><br><span class="line"><span class="regexp">/Users/</span>XXXXX<span class="regexp">/development/</span>flutter</span><br></pre></td></tr></table></figure><h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><ul><li><p>设置环境变量目的是以便我们可以运行flutter命令在任何终端会话中</p></li><li><p>确定Flutter SDK的目录，上一步我们解压获取了flutter的路径/Users/XXXXX/development/flutter</p></li><li><p>打开(或创建) $HOME/.bash_profile. 文件路径和文件名可能在您的机器上不同（注意$HOME 指的是 路径是 /Users/用户名XX/ ）</p></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vim</span> <span class="variable">$HOME</span>/.bash_profile</span><br></pre></td></tr></table></figure><ul><li>文件加入环境变量</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export PUB_HOSTED_URL=<span class="string">https:</span><span class="comment">//pub.flutter-io.cn //国内用户需要设置</span></span><br><span class="line">export FLUTTER_STORAGE_BASE_URL=<span class="string">https:</span><span class="comment">//storage.flutter-io.cn //国内用户需要设置</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">export PATH=<span class="regexp">/Users/</span>XXXXX<span class="regexp">/development/</span>flutter/<span class="string">bin:</span>$PATH</span><br></pre></td></tr></table></figure><ul><li>最后我们执行创建好的.bash_profile文件</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source <span class="variable">$HOME</span>/.bash_profile</span><br><span class="line">注意: 如果你使用的是zsh，终端启动时 ~/<span class="selector-class">.bash_profile</span> 将不会被加载，解决办法就是修改 ~/<span class="selector-class">.zshrc</span> ，在其中添加：source ~/.bash_profile</span><br></pre></td></tr></table></figure><ul><li><a href="https://pub.dev/" target="_blank" rel="noopener">flutter dev 网站</a><h2 id="执行-flutter-docter-检查本机软件环境，没安装的插件根据提示安装就行了"><a href="#执行-flutter-docter-检查本机软件环境，没安装的插件根据提示安装就行了" class="headerlink" title="执行 flutter docter 检查本机软件环境，没安装的插件根据提示安装就行了"></a>执行 flutter docter 检查本机软件环境，没安装的插件根据提示安装就行了</h2></li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flutter doctor</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/maoqitian/MaoMdPhoto/master/flutter/%E8%BF%90%E8%A1%8Cflutter-doctor%E5%91%BD%E4%BB%A4.png" height="200" width="550"></p><h2 id="手动升级-Flutter"><a href="#手动升级-Flutter" class="headerlink" title="手动升级 Flutter"></a>手动升级 Flutter</h2><ul><li>flutter 版本升级迭代很快，前面我们下载SDK默认是stable分支，也就是稳定版，如何手动升级呢？只需要下面一条flutter命令</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flutter upgrade</span></span><br></pre></td></tr></table></figure><h1 id="Dart-语法"><a href="#Dart-语法" class="headerlink" title="Dart 语法"></a>Dart 语法</h1><p><img src="https://raw.githubusercontent.com/maoqitian/MaoMdPhoto/master/flutter/dart/logo-dart.png" alt="logo-dart"></p><ul><li>我们知道Flutter框架是使用Dart 语言来编写的，Dart 是一个面向对象编程语言， 每个对象都是一个类的实例，所有的类都继承于 Object.如果熟悉Java，语言是很容易上手的。首先来熟悉一下Dart语法</li></ul><h2 id="Dart-变量"><a href="#Dart-变量" class="headerlink" title="Dart 变量"></a>Dart 变量</h2><ul><li>var 声明变量，和 kt 、js语法很像，需要注意的是如下示例 name 只要复制字符串，则他就是String类型，number就是int 类型，不能再更改它的类型，而没有初始化的变量自动获取一个默认值为 null。</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">var name</span> = <span class="string">'maoqitian'</span>;</span><br><span class="line"><span class="attribute">var number</span> = 1;</span><br></pre></td></tr></table></figure><h2 id="Dart-常量"><a href="#Dart-常量" class="headerlink" title="Dart 常量"></a>Dart 常量</h2><ul><li>final 和 const声明都是表示常量，一个 final 变量只能赋值一次，可以省略变量类型，如下声明一个存放WordPair值的List 数组</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="built_in">List</span> _suggestions = <span class="keyword">new</span> <span class="built_in">List</span>&lt;WordPair&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> _suggestions = &lt;WordPair&gt;[];</span><br></pre></td></tr></table></figure><ul><li>const 关键字不仅仅只用来定义常量， 也可以用来创建不变的值</li></ul><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如下定义一个字体大小的值一直都是 18 ，不会改变</span></span><br><span class="line"><span class="keyword">final</span> _biggerFont = <span class="keyword">const</span> TextStyle(fontSize: <span class="number">18.0</span>)</span><br></pre></td></tr></table></figure><h3 id="final-和-const区别"><a href="#final-和-const区别" class="headerlink" title="final 和 const区别"></a>final 和 const区别</h3><ul><li>const 的值在编译期确定，final 的值要到运行时才确定</li></ul><h2 id="Dart-函数方法"><a href="#Dart-函数方法" class="headerlink" title="Dart 函数方法"></a>Dart 函数方法</h2><ul><li>Dart 是一个真正的面向对象语言，方法也是对象他的类型是 Function。 这意味着，方法可以赋值给变量，也可以当做其他方法的参数。</li></ul><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个返回 bool(布尔)类型的方法 </span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isNoble</span>(<span class="params"><span class="keyword">int</span> atomicNumber</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> _nobleGases[atomicNumber] != <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//转换如下可以忽略类型定义</span></span><br><span class="line">isNoble(atomicNumber) &#123;</span><br><span class="line">  <span class="keyword">return</span> _nobleGases[atomicNumber] != <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//只有一个表达式的方法，你可以选择 使用缩写语法来定义</span></span><br><span class="line"><span class="comment">// =&gt; expr 语法是 &#123; return expr; &#125; 形式的缩写</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isNoble</span>(<span class="params"><span class="keyword">int</span> atomicNumber</span>)</span> =&gt; _nobleGases[atomicNumber] != <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h3 id="Dart-方法参数"><a href="#Dart-方法参数" class="headerlink" title="Dart 方法参数"></a>Dart 方法参数</h3><ul><li>方法可以定义两种类型的参数：必需的和可选的。 必需的参数在参数列表前面， 后面是可选参数，必选参数没啥好说的，我们来了解可选参数。可选参数可以是自己命名参数或者基于可选位置的参数，但是这两种参数不能同时当做可选参数来一起用。</li></ul><h4 id="可选命名参数"><a href="#可选命名参数" class="headerlink" title="可选命名参数"></a>可选命名参数</h4><ul><li>调用可选命名参数方法的时候可以使用 paramName: value （key:value形式，只不是过key 是参数名称）来指定参数值</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用有可选命名参数方法 playGames</span></span><br><span class="line">playGames(bold: <span class="literal">true</span>, hidden: <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//playGames 方法</span></span><br><span class="line">playGames(&#123;<span class="keyword">bool</span> bold, <span class="keyword">bool</span> hidden&#125;) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="可选位置参数"><a href="#可选位置参数" class="headerlink" title="可选位置参数"></a>可选位置参数</h4><ul><li>方法参数列表中用[]修饰的参数就是可选位置参数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义可选位置参数方法</span></span><br><span class="line"><span class="built_in">String</span> playGames (<span class="built_in">String</span> <span class="keyword">from</span>, <span class="built_in">String</span> msg, [<span class="built_in">String</span> sports]) &#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="string">'$from suggest $msg'</span>;</span><br><span class="line">  <span class="keyword">if</span> (sports != <span class="literal">null</span>) &#123;</span><br><span class="line">    result = <span class="string">'$result playing $sports together'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 不用可选参数 </span></span><br><span class="line">playGames(<span class="string">'Bob'</span>, <span class="string">'Howdy'</span>); <span class="comment">// 返回值 Bob suggest Howdy</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用可选参数</span></span><br><span class="line">playGames(<span class="string">'I'</span>, <span class="string">'Xiao Ming'</span>, <span class="string">'basketball'</span>); <span class="comment">//返回值 I suggest Xiao Ming playing basketball together.</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Dart-方法参数默认值"><a href="#Dart-方法参数默认值" class="headerlink" title="Dart 方法参数默认值"></a>Dart 方法参数默认值</h3><ul><li>在定义方法的时候，可以使用 = 来定义可选参数的默认值。 默认值只能是编译时常量。 如果没有提供默认值，则默认值为 null</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义可选位置参数方法</span></span><br><span class="line"><span class="built_in">String</span> playGames (<span class="built_in">String</span> <span class="keyword">from</span> , <span class="built_in">String</span> msg, [<span class="built_in">String</span> sports = <span class="string">'football'</span>]) &#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="string">'$from suggest $msg'</span>;</span><br><span class="line">  <span class="keyword">if</span> (sports != <span class="literal">null</span>) &#123;</span><br><span class="line">    result = <span class="string">'$result playing $sports together'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">playGames(<span class="string">'I'</span>, <span class="string">'Xiao Ming'</span>); <span class="comment">//返回值 I suggest Xiao Ming playing football together.</span></span><br></pre></td></tr></table></figure><h3 id="入口函数（The-main-function）"><a href="#入口函数（The-main-function）" class="headerlink" title="入口函数（The main() function）"></a>入口函数（The main() function）</h3><ul><li>每个应用都需要有个顶级的 main() 入口方法才能执行</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Android studio 创建Demo 项目  main.dart 文件开头 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>=&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以转换为</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    runApp(MyApp());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="异步操作"><a href="#异步操作" class="headerlink" title="异步操作"></a>异步操作</h3><ul><li>async 方法和 await 异步操作，直接看看一个网络请求例子就能够了解</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> Future&lt;ArticleListData&gt; getArticleData(<span class="built_in">int</span> pageNum) <span class="keyword">async</span>&#123;</span><br><span class="line">    <span class="built_in">String</span> path = <span class="string">'/article/list/<span class="subst">$pageNum</span>/json'</span>;</span><br><span class="line">    Response response = <span class="keyword">await</span> HttpUtils.<span class="keyword">get</span>(Api.BASE_URL+path);</span><br><span class="line">    ArticleBaseData articleBaseData = ArticleBaseData.fromJson(response.data);</span><br><span class="line">    <span class="keyword">return</span> articleBaseData.data;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>先了解这么多，更多Dart 相关内容可以查看<a href="http://dart.goodev.org/" target="_blank" rel="noopener">Dart语言官网</a></p></blockquote><h1 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h1><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><ul><li><a href="https://flutter.dev/" target="_blank" rel="noopener">flutter.dev</a></li><li><a href="https://flutter.dev/" target="_blank" rel="noopener">Flutter中文网</a></li></ul><h2 id="Flutter-Hello-world"><a href="#Flutter-Hello-world" class="headerlink" title="Flutter Hello world"></a>Flutter Hello world</h2><ul><li><p>在开始Flutter Hello world程序之前，作为一名Android 开发者，首先我们要认识到Flutter中没有原生开发的XML，所有界面和逻辑代码都在.dart文件中，Flutter给我提供了一套视觉、结构、平台、和交互式的Widgets，所以在Flutter中一构架的一切界面都是Widgets。接下来我们先看一个简单的Hello World Flutter应用。</p></li><li><p>Android Studio 新建Flutter demo</p></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="symbol">'package</span>:flutter/material.dart';</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(<span class="type">MyApp</span>());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span></span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="type">Widget</span> build(<span class="type">BuildContext</span> context) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement build</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">MaterialApp</span>(</span><br><span class="line">      theme: <span class="type">ThemeData</span>(</span><br><span class="line">        primaryColor: <span class="type">Colors</span>.blueAccent,</span><br><span class="line">      ),</span><br><span class="line">      home: <span class="keyword">new</span> <span class="type">Scaffold</span>(</span><br><span class="line">        appBar: <span class="keyword">new</span> <span class="type">AppBar</span>(</span><br><span class="line">            title: <span class="keyword">new</span> <span class="type">Center</span>(</span><br><span class="line">              child: <span class="keyword">new</span> <span class="type">Text</span>(<span class="string">"Welcome to Flutter"</span>),</span><br><span class="line">            )</span><br><span class="line">        ),</span><br><span class="line">        body: <span class="type">DemoStatelessWidget</span>(<span class="string">"Flutter Hello World ! 无状态的Widget"</span>), </span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无状态 Widget</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoStatelessWidget</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="type">String</span> text;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//构造方法传入 text 值</span></span><br><span class="line">  <span class="type">DemoStatelessWidget</span>(<span class="keyword">this</span>.text);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="type">Widget</span> build(<span class="type">BuildContext</span> context) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement build</span></span><br><span class="line">    <span class="keyword">return</span> <span class="type">Container</span>(</span><br><span class="line">      constraints: <span class="type">BoxConstraints</span>.expand(</span><br><span class="line">        height: <span class="type">Theme</span>.of(context).textTheme.display1.fontSize * <span class="number">1.1</span> + <span class="number">200.0</span>,</span><br><span class="line">      ),</span><br><span class="line">      padding: const <span class="type">EdgeInsets</span>.all(<span class="number">8.0</span>),</span><br><span class="line">      color: <span class="type">Colors</span>.blue[<span class="number">600</span>],</span><br><span class="line">      alignment: <span class="type">Alignment</span>.center,</span><br><span class="line">      child: <span class="type">Text</span>(text,</span><br><span class="line">          style: <span class="type">Theme</span>.of(context)</span><br><span class="line">              .textTheme</span><br><span class="line">              .display1</span><br><span class="line">              .copyWith(color: <span class="type">Colors</span>.white)),</span><br><span class="line">      transform: <span class="type">Matrix4</span>.rotationZ(<span class="number">0.1</span>),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行结果</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/flutter/Flutter%20Hello%20world.jpg" height="300" width="170"></p><ul><li>如上代码所示，首先main函数运行MyApp，MyApp 是一个DemoStatelessWidget，字面可以理解为一个没有状态的Widget，他的build 方法创建了MaterialApp这个Widget才使得应用可以跑在手机上，接着创建了Scaffold 这个Widget，可以让我们创建AppBar和页面内容，body 的页面内容又包含了一个无状态的DemoStatelessWidget，通过构造方法可以传入我们想要现实的页面内容，该widget包含白色背景和一个现实文字的Text widget。</li></ul><h2 id="Flutter-ListView"><a href="#Flutter-ListView" class="headerlink" title="Flutter ListView"></a>Flutter ListView</h2><ul><li><p>上个小例子中我们提到无状态 StatelessWidget，想必也能猜到，肯定会有一个有状态的widget，这个widget就是StatefulWidget，该widget为何说是有状态的呢，主要是在其管理的State中我们可以调用setState来动态改变页面显示。接着我们看一个显示数据列表的例子，并加入一个可以点击收藏的按钮。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="symbol">'package</span>:flutter/material.dart';</span><br><span class="line"><span class="keyword">import</span> <span class="symbol">'package</span>:english_words/english_words.dart';</span><br><span class="line"></span><br><span class="line">void main() =&gt; runApp(<span class="type">MyApp</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// StatelessWidget 无状态的widget</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123; <span class="comment">//Stateless widgets是不可变的, 这意味着它们的属性不能改变 - 所有的值都是最终的.</span></span><br><span class="line">  <span class="comment">// This widget is the root of your application.</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="type">Widget</span> build(<span class="type">BuildContext</span> context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">MaterialApp</span>(</span><br><span class="line">      <span class="comment">//title: 'Welcome to Flutter',</span></span><br><span class="line">      theme: <span class="type">ThemeData</span>(</span><br><span class="line">        primaryColor: <span class="type">Colors</span>.blueAccent,</span><br><span class="line">      ),</span><br><span class="line">     home: <span class="keyword">new</span> <span class="type">RandomWords</span>(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//StatefulWidget 有状态的widget</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomWords</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span></span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  createState() =&gt; <span class="keyword">new</span> <span class="type">RandomWordsState</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回 显示单词对的ListView Widget</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomWordsState</span> <span class="keyword">extends</span> <span class="title">State&lt;RandomWords&gt;</span> </span>&#123;</span><br><span class="line">  <span class="comment">//保存建议的单词对列表(变量以下划线（_）开头，在Dart语言中使用下划线前缀标识符，会强制其变成私有的)  final _suggestions = &lt;WordPair&gt;[];</span></span><br><span class="line">  <span class="keyword">final</span> <span class="type">List</span> _suggestions = <span class="keyword">new</span> <span class="type">List</span>&lt;<span class="type">WordPair</span>&gt;();</span><br><span class="line">  <span class="comment">//设置字体大小的变量</span></span><br><span class="line">  <span class="keyword">final</span> _biggerFont = const <span class="type">TextStyle</span>(fontSize: <span class="number">18.0</span>);</span><br><span class="line">  <span class="comment">// 保存喜欢单词组的集合 set 集合不允许值重复</span></span><br><span class="line">  <span class="keyword">final</span> <span class="type">Set</span> _saved = <span class="keyword">new</span> <span class="type">Set</span>&lt;<span class="type">WordPair</span>&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// State 生命周期方法</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  void initState() &#123;</span><br><span class="line">    <span class="comment">// state 初始化</span></span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  void didChangeDependencies() &#123;</span><br><span class="line">    <span class="comment">// 在 initState 之后调用，此时可以获取其他 State</span></span><br><span class="line">    <span class="keyword">super</span>.didChangeDependencies();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  void dispose() &#123;</span><br><span class="line">    <span class="comment">// state 销毁</span></span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="type">Widget</span> build(<span class="type">BuildContext</span> context) &#123;</span><br><span class="line">    <span class="comment">//return new Text(new WordPair.random().asPascalCase);</span></span><br><span class="line">    <span class="comment">//返回单词对的ListView。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">Scaffold</span>(</span><br><span class="line">      appBar: <span class="keyword">new</span> <span class="type">AppBar</span>(</span><br><span class="line">        title:<span class="keyword">new</span> <span class="type">Center</span>( <span class="comment">//居中显示</span></span><br><span class="line">          child: <span class="keyword">new</span> <span class="type">Text</span>(<span class="symbol">'Flutter</span> <span class="type">ListView</span>'),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      body: _buildSuggestions(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//构建显示建议单词对的ListView。</span></span><br><span class="line">  <span class="type">Widget</span> _buildSuggestions()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">ListView</span>.builder(</span><br><span class="line">        padding: const <span class="type">EdgeInsets</span>.all(<span class="number">16.0</span>),</span><br><span class="line">        <span class="comment">// 对于每个建议的单词对都会调用一次itemBuilder，然后将单词对添加到ListTile行中</span></span><br><span class="line">        <span class="comment">// 在偶数行，该函数会为单词对添加一个ListTile row.</span></span><br><span class="line">        <span class="comment">// 在奇数行，该函数会添加一个分割线widget，来分隔相邻的词对。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//itemBuilder 值是一个匿名回调函数， 接受两个参数- BuildContext和行迭代器i。迭代器从0开始，</span></span><br><span class="line">        <span class="comment">// 每调用一次该函数，i就会自增1，对于每个建议的单词对都会执行一次。该模型允许建议的单词对列表在用户滚动时无限增长。</span></span><br><span class="line">          itemBuilder: (context,i)&#123;</span><br><span class="line">          <span class="comment">// 在每一列之前，添加一个1像素高的分隔线widget</span></span><br><span class="line">          <span class="keyword">if</span>(i.isOdd) <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">Divider</span>();</span><br><span class="line">          <span class="comment">// 语法 "i ~/ 2" 表示i除以2，但返回值是整形（向下取整），比如i为：1, 2, 3, 4, 5</span></span><br><span class="line">          <span class="comment">// 时，结果为0, 1, 1, 2, 2， 这可以计算出ListView中减去分隔线后的实际单词对数量</span></span><br><span class="line">          <span class="keyword">final</span> index = i~/<span class="number">2</span>;</span><br><span class="line">          </span><br><span class="line">          <span class="keyword">if</span>(index &gt;= _suggestions.length)&#123;</span><br><span class="line">            <span class="comment">//  如果是建议单词列表中最后一个单词对 接着再生成10个单词对，然后添加到建议列表</span></span><br><span class="line">            _suggestions.addAll(generateWordPairs().take(<span class="number">10</span>));</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> _buildRow(_suggestions[index]);</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//创建 ListTile中显示每个新词对</span></span><br><span class="line">  <span class="type">Widget</span> _buildRow(<span class="type">WordPair</span> suggestion) &#123;</span><br><span class="line">    <span class="comment">//获取是否保存了该单词状态</span></span><br><span class="line">    <span class="keyword">final</span> isSaved = _saved.contains(suggestion);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">ListTile</span>(</span><br><span class="line">      <span class="comment">// 设置 标题</span></span><br><span class="line">      title: <span class="keyword">new</span> <span class="type">Text</span>(</span><br><span class="line">        suggestion.asPascalCase,</span><br><span class="line">        style: _biggerFont,</span><br><span class="line">      ),</span><br><span class="line">      <span class="comment">//图标</span></span><br><span class="line">      trailing: <span class="keyword">new</span> <span class="type">Icon</span>(</span><br><span class="line">        <span class="comment">//星型图标状态</span></span><br><span class="line">        isSaved ? <span class="type">Icons</span>.favorite : <span class="type">Icons</span>.favorite_border,</span><br><span class="line">        color: isSaved ? <span class="type">Colors</span>.deepOrange : <span class="literal">null</span> ,</span><br><span class="line">      ),</span><br><span class="line">      onTap: ()&#123;  <span class="comment">// 当用户点击 ListTile 击时， ListTile 会调用它的onTap回调</span></span><br><span class="line">        setState(() &#123; <span class="comment">//调用setState() 会为State对象触发build()方法，从而导致对UI的更新</span></span><br><span class="line">          <span class="keyword">if</span>(isSaved)&#123;</span><br><span class="line">             _saved.remove(suggestion);</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            _saved.add(suggestion);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行效果</p></li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/flutter/Flutter%20ListView.jpg" height="300" width="170"></p><ul><li><p>如上代码，将原来的无状态Widget改成了StatefulWidget，并在build中构建ListView，到此你可能有疑惑，不是说有状态的Widget，怎么还是创建Widget，有状态如何体现呢? 别急，我们看到_buildRow方法，方法中构建了ListTile 这个Widget，它响应点击事件回到为onTap方法，也就是当我们点击ListTile，我们在onTap方法中就可以调用setState方法来动态改变页面显示，也就是改变桃心收藏按钮变化（注意setState方法需要在State类中才能调用）。</p></li><li><p>State 是有周期的，其中包括三个函数：</p></li></ul><ol><li>initState()：初始化方法</li><li>didChangeDependencies()：在 initState 之后调用，此时可以获取其他 State</li><li>dispose()：state 销毁</li></ol><ul><li>如果你使用Android Studio 我们可以使用快捷键快速创建StatelessWidget和StatefulWidget，创建StatelessWidget快捷键为<strong>stl</strong>，创建StatefulWidget快捷键为<strong>stf</strong>。</li></ul><h3 id="小节总结"><a href="#小节总结" class="headerlink" title="小节总结"></a>小节总结</h3><ul><li>Flutter 页面都是由一个个 widget 搭建而来的</li><li>widget类型有两种，一种是无状态页面内容固定的StatelessWidget，一种是页面内容可以动态改变的 StatefulWidget</li></ul><h2 id="Widget-速览"><a href="#Widget-速览" class="headerlink" title="Widget 速览"></a>Widget 速览</h2><ul><li>在开始开发实战之前，我们需要对基本常用的Widget有个大概的认识。</li></ul><h3 id="layout-Widget"><a href="#layout-Widget" class="headerlink" title="layout Widget"></a>layout Widget</h3><ul><li>在刚开始写原生界面的时候，我们最先了解的也应该是布局，Flutter 也提供了不少<a href="https://flutterchina.club/widgets/layout/" target="_blank" rel="noopener">布局widget</a>，接下来列举一些常用的布局widget</li></ul><table><thead><tr><th>布局名称</th><th>特点描述</th></tr></thead><tbody><tr><td>Container</td><td>拥有单个子元素的布局widget，可以灵活设置</td></tr><tr><td>Padding</td><td>拥有单个子元素，给其子widget添加指定的填充</td></tr><tr><td>Center</td><td>将其子widget居中显示</td></tr><tr><td>Align</td><td>将其子widget对齐，并可以根据子widget的大小自动调整大小。</td></tr><tr><td>Row</td><td>可以拥有多个子元素，在水平方向上排列子widget的列表，和原生控件 LinerLayout orientation=”horizontal” 类似 </td></tr><tr><td>Column</td><td>可以拥有多个子元素，在竖直方向上排列子widget的列表，和原生控件 LinerLayout orientation=”vertical” 类似 </td></tr><tr><td>Stack</td><td>可以拥有多个子元素，允许其子widget简单的堆叠在一起</td></tr><tr><td>Flow</td><td>实现流式布局算法的widget</td></tr><tr><td>ListView</td><td>可滚动的列表控件</td></tr></tbody></table><ul><li>了解更多的widget请参考 <a href="https://flutterchina.club/widgets/" target="_blank" rel="noopener">Flutter widget 目录</a>.</li></ul><h3 id="界面-Widget"><a href="#界面-Widget" class="headerlink" title="界面 Widget"></a>界面 Widget</h3><ul><li>有了布局，还需要在布局中填放各种控件，才最终组成我们的页面，比如我们开发Material Design 风格的App，Flutter 就给我们提供了Material Components Widgets，接下来选取一些常用的控件来了解。了解更多的widget请参考 <a href="https://flutterchina.club/widgets/material/" target="_blank" rel="noopener">Material Components Widgets 目录</a>。</li></ul><table><thead><tr><th>Widget名称</th><th>特点描述</th></tr></thead><tbody><tr><td>MaterialApp</td><td>封装了应用程序实现Material Design所需要的一些widget，由前面demo可以发现它一般为应用顶层入口widget</td></tr><tr><td>Scaffold</td><td>Material Design布局结构的基本实现。此类提供了用于显示drawer、snackbar和底部sheet的API。</td></tr><tr><td>Appbar</td><td>一般和Scaffold结合使用，可以设置页面标题和各种按钮等(Toolbar)</td></tr><tr><td>BottomNavigationBar</td><td>底部导航条，可以很容易地在tap之间切换和浏览顶级视图</td></tr><tr><td>Drawer</td><td>和Scaffold结合使用，从Scaffold边缘水平滑动以显示应用程序中导航链接的Material Design面板</td></tr><tr><td>RaisedButton</td><td>Material Design中的button，响应点击事件(button)</td></tr><tr><td>IconButton</td><td>一个Material图标按钮，可以设置icon，点击时会有水波动画</td></tr><tr><td>TextField</td><td>文本输入框 （EditText）</td></tr><tr><td>image</td><td>显示图片的widget(ImageView)</td></tr><tr><td>Text</td><td>单一格式的文本 (TextView)</td></tr></tbody></table><h2 id="导航栏返回按钮监听"><a href="#导航栏返回按钮监听" class="headerlink" title="导航栏返回按钮监听"></a>导航栏返回按钮监听</h2><ul><li>WillPopScope ，Flutter中可以通过WillPopScope来实现返回按钮拦截</li><li>以下示例提供两种效果，双击返回Toast提示（Toast库 fluttertoast: ^3.1.3），或者弹出提示dialog是否退出。<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="symbol">'package</span>:flutter/material.dart';</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _AppPageState createState() =&gt; _AppPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_AppPageState</span> <span class="keyword">extends</span> <span class="title">State&lt;AppPage&gt;</span> </span>&#123;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">  <span class="type">Widget</span> build(<span class="type">BuildContext</span> context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">WillPopScope</span>( <span class="comment">///通过WillPopScope 嵌套，可以用于监听处理 Android 返回键的逻辑。 WillPopScope 并不是监听返回按键，只是当前页面将要被pop时触发的回调</span></span><br><span class="line">        child: <span class="type">Container</span>(),</span><br><span class="line">        onWillPop: () async&#123;</span><br><span class="line">           <span class="keyword">return</span> _doubleExitApp();</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//双击返回 退出应用</span></span><br><span class="line">  bool _doubleExitApp()&#123;</span><br><span class="line">    <span class="keyword">if</span> (_lastPressedAt == <span class="literal">null</span> ||</span><br><span class="line">        <span class="type">DateTime</span>.now().difference(_lastPressedAt) &gt; <span class="type">Duration</span>(seconds: <span class="number">1</span>)) &#123;</span><br><span class="line">      <span class="type">ToolUtils</span>.<span class="type">ShowToast</span>(msg: <span class="string">"再点一次退出应用"</span>);</span><br><span class="line">      <span class="comment">//两次点击间隔超过1秒则重新计时</span></span><br><span class="line">      _lastPressedAt = <span class="type">DateTime</span>.now();</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//应用关闭直接取消 Toast</span></span><br><span class="line">    <span class="type">Fluttertoast</span>.cancel();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">///如果返回 return new Future.value(false); popped 就不会被处理</span></span><br><span class="line">  <span class="comment">///如果返回 return new Future.value(true); popped 就会触发</span></span><br><span class="line">  <span class="comment">///这里可以通过 showDialog 弹出确定框，在返回时通过 Navigator.of(context).pop(true);决定是否退出</span></span><br><span class="line">  <span class="comment">/// 单击提示退出</span></span><br><span class="line">  <span class="type">Future</span>&lt;bool&gt; _dialogExitApp(<span class="type">BuildContext</span> context) &#123;</span><br><span class="line">    <span class="keyword">return</span> showDialog(</span><br><span class="line">        context: context,</span><br><span class="line">        builder: (context) =&gt; <span class="keyword">new</span> <span class="type">AlertDialog</span>(</span><br><span class="line">          content: <span class="keyword">new</span> <span class="type">Text</span>(<span class="string">"是否退出"</span>),</span><br><span class="line">          actions: &lt;<span class="type">Widget</span>&gt;[</span><br><span class="line">            <span class="keyword">new</span> <span class="type">FlatButton</span>(onPressed: () =&gt; <span class="type">Navigator</span>.of(context).pop(<span class="literal">false</span>), child:  <span class="keyword">new</span> <span class="type">Text</span>(<span class="string">"取消"</span>)),</span><br><span class="line">            <span class="keyword">new</span> <span class="type">FlatButton</span>(</span><br><span class="line">                onPressed: () &#123;</span><br><span class="line">                  <span class="type">Navigator</span>.of(context).pop(<span class="literal">true</span>);</span><br><span class="line">                &#125;,</span><br><span class="line">                child: <span class="keyword">new</span> <span class="type">Text</span>(<span class="string">"确定"</span>))</span><br><span class="line">          ],</span><br><span class="line">        ));</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><ul><li>万事开头难，对于Flutter到此可以说是迈出了第一步，对于未尝试的东西，开始可能会有畏惧心理，但只要敢于尝试，敢于迈出第一步，相信难不难只在于自己的用心程度而言。本篇文章就先到这里，文章中如果有错误，请大家给我提出来，大家一起学习进步，如果觉得我的文章给予你帮助，也请给我一个喜欢和关注，同时也欢迎访问我的<a href="https://www.maoqitian.com"><strong>个人博客</strong></a>。</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://flutter.dev/" target="_blank" rel="noopener">Flutter 官方网站</a></li><li><a href="https://flutterchina.club/" target="_blank" rel="noopener">Flutter中文网</a></li><li><a href="https://dart.dev/" target="_blank" rel="noopener">Dart 官方网站</a></li><li><a href="http://dart.goodev.org/" target="_blank" rel="noopener">Dart 语言中文网</a></li></ul><h1 id="About-me"><a href="#About-me" class="headerlink" title="About me"></a>About me</h1><h3 id="blog："><a href="#blog：" class="headerlink" title="blog："></a>blog：</h3><ul><li><a href="https://www.maoqitian.com/">个人博客</a></li><li><a href="https://juejin.im/user/59e956626fb9a045204b57d4" target="_blank" rel="noopener">掘金</a></li><li><a href="https://www.jianshu.com/u/f58cd7ff1a08" target="_blank" rel="noopener">简书</a></li><li><a href="https://github.com/maoqitian" target="_blank" rel="noopener">Github</a><h3 id="mail："><a href="#mail：" class="headerlink" title="mail："></a>mail：</h3></li><li><a href="">maoqitian@gmail.com</a></li><li><a href="">maoqitian068@163.com</a> </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/maoqitian/MaoMdPhoto/master/flutter/flutter-logo.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;什么是flutter&quot;&gt;&lt;a href=&quot;#什么是flutter&quot; class=&quot;headerlink&quot; title=&quot;什么是flutter&quot;&gt;&lt;/a&gt;什么是flutter&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;google 推出的跨平台UI框架&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;环境搭建-MAC环境&quot;&gt;&lt;a href=&quot;#环境搭建-MAC环境&quot; class=&quot;headerlink&quot; title=&quot;环境搭建(MAC环境)&quot;&gt;&lt;/a&gt;环境搭建(MAC环境)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Flutter 依赖下面这些命令行工具&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;bash, &lt;span class=&quot;keyword&quot;&gt;mkdir&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;rm&lt;/span&gt;, git, curl, unzip, &lt;span class=&quot;keyword&quot;&gt;which&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Flutter探索" scheme="https://www.maoqitian.com/categories/Flutter%E6%8E%A2%E7%B4%A2/"/>
    
    
      <category term="dart" scheme="https://www.maoqitian.com/tags/dart/"/>
    
      <category term="Flutter" scheme="https://www.maoqitian.com/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Docker容器学习（四）之Docker Compose</title>
    <link href="https://www.maoqitian.com/2019/09/30/Docker%E5%AE%B9%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%9B%9B%EF%BC%89%E4%B9%8BDocker-Compose/"/>
    <id>https://www.maoqitian.com/2019/09/30/Docker容器学习（四）之Docker-Compose/</id>
    <published>2019-09-30T07:26:49.000Z</published>
    <updated>2020-10-15T14:26:43.684Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/maoqitian/MaoMdPhoto/master/Docker/dockerlogo.jpg" alt="dockerlogo"></p><blockquote><p>之前的文章中，我们使用docker run 命令来启动一个容器，而作为真正的线上业务环境，我们服务肯定不止一个，也就说明容器肯定不止一个，而如果还是手动的一个个来启动容器这未免会让人头皮发麻，幸好有<strong>Docker Compose</strong>，用于定义和运行多容器Docker应用程序的工具，有了它我们可以一次启动多个容器，这也非常适合与持续集成工具（Jenkins）来配合。<br><a id="more"></a></p></blockquote><h3 id="安装-Docker-Compose"><a href="#安装-Docker-Compose" class="headerlink" title="安装 Docker Compose"></a>安装 Docker Compose</h3><ul><li>根据<a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener">官方</a>安装最新版本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L <span class="string">"https://github.com/docker/compose/releases/download/1.24.0/docker-compose-<span class="variable">$(uname -s)</span>-<span class="variable">$(uname -m)</span>"</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><ul><li>安装脚本添加执行权限</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>docker-compose</span><br></pre></td></tr></table></figure><ul><li><strong>注意：</strong> 根据前面的步骤理论上是安装完成了，但是我们执行官方命令只是下载到了/usr/local/bin/这个目录，添加脚本执行权限之后docker-compose并不能生效，依据官方文档提示复制该文件到/usr/bin/目录下，并未该文件添加脚本执行权限</li></ul><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s <span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/bin/</span>docker-compose <span class="meta-keyword">/usr/</span>bin/docker-compose</span><br><span class="line"></span><br><span class="line">chmod +x <span class="meta-keyword">/usr/</span>bin/docker-compose</span><br></pre></td></tr></table></figure><ul><li>此时我们执行docker-compose版本命令就能看到版本号打印</li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># docker-compose --version</span><br><span class="line">docker-compose version <span class="number">1.24</span><span class="number">.0</span>, build <span class="number">0</span>aa59064</span><br></pre></td></tr></table></figure><ul><li>命令补全工具</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/docker/</span>compose<span class="regexp">/1.24.0/</span>contrib<span class="regexp">/completion/</span>bash<span class="regexp">/docker-compose -o /</span>etc<span class="regexp">/bash_completion.d/</span>docker-compose</span><br></pre></td></tr></table></figure><ul><li>版本<br><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Docker/Docker%20Compose%E7%89%88%E6%9C%AC%E5%AF%B9%E5%BA%94.png" alt="Docker Compose版本对应"></li></ul><h3 id="docker-compose-yml-命令"><a href="#docker-compose-yml-命令" class="headerlink" title="docker-compose.yml 命令"></a>docker-compose.yml 命令</h3><ul><li><a href="https://docs.docker.com/compose/compose-file/" target="_blank" rel="noopener">https://docs.docker.com/compose/compose-file/</a><h3 id="docker-compose-命令"><a href="#docker-compose-命令" class="headerlink" title="docker-compose 命令"></a>docker-compose 命令</h3></li><li>和前面学习Docker容器命令一样，docker-compose也有不少命令</li></ul><table><thead><tr><th>命令</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td>build</td><td>构建或重新构建服务</td><td>build [options] [–build-arg key=val…] [SERVICE…]（使用 docker-compose help build 查看详细使用）</td></tr><tr><td>help</td><td>查看docker-compose命令帮助文档</td><td>docker-compose help COMMAND（标识要看的命令）</td></tr><tr><td>up</td><td>构建、创建、重新创建、启动，连接服务的相关容器。所有连接的服务都会启动，除非它们已经运行(前提该目录下已经存在docker-compose.yml文件)</td><td>docker-compose up(直接启动，该命令退出，所有容器停止) docker-compose up -d (后台运行所有容器)</td></tr><tr><td>kill</td><td>发送SIGKILL 信号停止指定服务的容器</td><td>docker-compose kill api-feign(注意该名称为docker-compose.yml中定义的服务名称) </td></tr><tr><td>start</td><td>启动指定服务已存在的容器</td><td>docker-compose start api-feign</td></tr><tr><td>stop</td><td>停止指定服务已存在的容器</td><td>docker-compose stop api-feign</td></tr><tr><td>logs</td><td>查看服务的日志输出</td><td>docker-compose logs –tail=”all” api-feign（查看api-feign 全部日志输出）</td></tr><tr><td>ps</td><td>列出所有容器</td><td>docker-compose ps （和docker ps -a 一样可以查看容器，显示信息不一样）</td></tr><tr><td>rm</td><td>删除指定服务的容器</td><td>docker-compose rm api-feign</td></tr></tbody></table><ul><li>更多docker-compose命令查看<a href="https://docs.docker.com/compose/reference/overview/" target="_blank" rel="noopener">docker-compose官方文档</a></li></ul><h3 id="编写docker-compose-yml-启动多服务"><a href="#编写docker-compose-yml-启动多服务" class="headerlink" title="编写docker-compose.yml 启动多服务"></a>编写docker-compose.yml 启动多服务</h3><ul><li><p>服务器任意目录编写文件 docker-compose.yml</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">version</span>: <span class="string">'3.4'</span></span><br><span class="line"><span class="attribute">services</span>:</span><br><span class="line">  <span class="attribute">configerver</span>:  # 指定一个服务名称</span><br><span class="line">    <span class="attribute">image</span>: mao/<span class="attribute">configserver</span>:<span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT  # 镜像名称</span><br><span class="line">    <span class="attribute">ports</span>:</span><br><span class="line">      - <span class="number">8666</span>:<span class="number">8666</span>  # 指定端口映射</span><br><span class="line">  <span class="attribute">eureka</span>:</span><br><span class="line">    <span class="attribute">image</span>: test1/<span class="attribute">eureka1</span>:<span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT</span><br><span class="line">    <span class="attribute">ports</span>:</span><br><span class="line">      - <span class="number">8805</span>:<span class="number">8805</span></span><br><span class="line">  <span class="attribute">server-admin</span>:</span><br><span class="line">    <span class="attribute">image</span>: mao/<span class="attribute">server-admin</span>:<span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT</span><br><span class="line">    <span class="attribute">ports</span>:</span><br><span class="line">      - <span class="number">8806</span>:<span class="number">8806</span></span><br><span class="line">  <span class="attribute">api-feign</span>:</span><br><span class="line">    <span class="attribute">image</span>: mao/<span class="attribute">api-feign</span>:<span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT</span><br><span class="line">    <span class="attribute">ports</span>:</span><br><span class="line">      - <span class="number">8840</span>:<span class="number">8840</span></span><br><span class="line">  <span class="attribute">ribbon-consumer</span>:</span><br><span class="line">    <span class="attribute">image</span>: mao/<span class="attribute">ribbon-consumer</span>:<span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT</span><br><span class="line">    <span class="attribute">ports</span>:</span><br><span class="line">      - <span class="number">8830</span>:<span class="number">8830</span></span><br><span class="line">  <span class="attribute">ribbon-provider</span>:</span><br><span class="line">    <span class="attribute">image</span>: mao/<span class="attribute">ribbon-provider</span>:<span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT</span><br><span class="line">    <span class="attribute">ports</span>:</span><br><span class="line">      - <span class="number">8820</span>:<span class="number">8820</span></span><br></pre></td></tr></table></figure></li><li><p>在docker-compose.yml目录下执行命令启动多个服务(安装好Docker Compose前提下)</p></li></ul><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># docker compose 构建镜像并使用镜像启动容器（-d 表示后台启动）</span></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Docker/docker-compose.yml%E5%90%AF%E5%8A%A8%E5%AF%B9%E5%BA%94%E7%9A%84%E6%9C%8D%E5%8A%A1.png" alt="docker-compose.yml启动对应的服务"></p><ul><li>由上图我们发现各个服务都已经启动在各自的容器当中，但是访问服务的时候只有configserver（配置中心）能够访问，其他服务都不能访问，我们仔细想想就能知道，除了配置中心，其他服务的配置文件都要通过配置中心来获取，但是docker-compose启动是同时的，所以配置中心服务还没提供其他服务就已经启动了，这显然会让其他服务报错，所以在生产环境中我们必须要控制服务的启动顺序，也就是最先启动配置中心，然后启动注册中心，最后再启动其他服务。</li></ul><h3 id="Docker-Compose控制服务启动顺序"><a href="#Docker-Compose控制服务启动顺序" class="headerlink" title="Docker Compose控制服务启动顺序"></a>Docker Compose控制服务启动顺序</h3><ul><li><a href="https://docs.docker.com/compose/startup-order/" target="_blank" rel="noopener">Docker Compose控制服务启动顺序官方文档说明</a>，本文使用<a href="https://github.com/vishnubob/wait-for-it" target="_blank" rel="noopener">wait-for-it</a>方案，除了wait-for-it，还有<a href="https://github.com/jwilder/dockerize" target="_blank" rel="noopener">dockerize</a>和 <a href="https://github.com/Eficode/wait-for" target="_blank" rel="noopener">wait-for</a> 方案。</li><li>wait-for-it是一个bash脚本，执行该脚本将等待主机和TCP端口的可用性。它可用于同步相互依赖的服务的启动，例如链接的docker容器<h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3></li><li>接下来我将介绍如何使用该脚本来控制我们服务启动顺序</li><li><p>首先我们可以将脚本打包到我们的镜像中，修改Dockerfile文件</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Dockerfile中 </span></span><br><span class="line">....</span><br><span class="line">COPY <span class="built_in">wait</span>-<span class="keyword">for</span>-<span class="keyword">it</span>.sh /<span class="built_in">wait</span>-<span class="keyword">for</span>-<span class="keyword">it</span>.sh <span class="comment">#在本项目模块根目录下复制wait-for-it.sh 到镜像/目录下</span></span><br><span class="line">RUN chmod +x /<span class="built_in">wait</span>-<span class="keyword">for</span>-<span class="keyword">it</span>.sh <span class="comment"># 修改脚本权限</span></span><br><span class="line">....</span><br></pre></td></tr></table></figure></li><li><p>再次使用docker-maven-plugin打包镜像</p></li><li>重新编写docker-compose.yml文件，添加entrypoint执行我们前面打包如镜像的wait-for-it.sh脚本监控配置中心是否已经提供服务，注意ENTRYPOINT指令是不会被覆盖的，最终会执行监控./wait-for-it.sh configerver:8666配置中心是否提供服务来通过配置中心获取配置来启动其他服务</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">version</span>: <span class="string">'3.7'</span></span><br><span class="line"><span class="attribute">services</span>:</span><br><span class="line">  <span class="attribute">configerver</span>:  # 指定一个服务名词</span><br><span class="line">    <span class="attribute">image</span>: mao/<span class="attribute">configserver</span>:<span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT  # 镜像名称</span><br><span class="line">    <span class="attribute">ports</span>:</span><br><span class="line">      - <span class="number">8666</span>:<span class="number">8666</span>  # 指定端口映射</span><br><span class="line">    <span class="attribute">depends_on</span>:</span><br><span class="line">      - eureka</span><br><span class="line">  <span class="attribute">eureka</span>:</span><br><span class="line">    <span class="attribute">image</span>: mao/<span class="attribute">eureka</span>:<span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT</span><br><span class="line">    <span class="attribute">ports</span>:</span><br><span class="line">      - <span class="number">8805</span>:<span class="number">8805</span></span><br><span class="line">    <span class="attribute">entrypoint</span>: <span class="string">"./wait-for-it.sh configerver:8666 -- java -jar /app.jar"</span></span><br><span class="line">  <span class="attribute">server-admin</span>:</span><br><span class="line">    <span class="attribute">image</span>: mao/<span class="attribute">server-admin</span>:<span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT</span><br><span class="line">    <span class="attribute">ports</span>:</span><br><span class="line">      - <span class="number">8806</span>:<span class="number">8806</span></span><br><span class="line">    <span class="attribute">depends_on</span>:</span><br><span class="line">      - eureka</span><br><span class="line">      - configerver</span><br><span class="line">    <span class="attribute">entrypoint</span>: <span class="string">"./wait-for-it.sh configerver:8666 -- java -jar /app.jar"</span></span><br><span class="line">  <span class="attribute">api-feign</span>:</span><br><span class="line">    <span class="attribute">image</span>: mao/<span class="attribute">api-feign</span>:<span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT</span><br><span class="line">    <span class="attribute">ports</span>:</span><br><span class="line">      - <span class="number">8840</span>:<span class="number">8840</span></span><br><span class="line">    <span class="attribute">depends_on</span>:</span><br><span class="line">      - eureka</span><br><span class="line">      - configerver</span><br><span class="line">    <span class="attribute">entrypoint</span>: <span class="string">"./wait-for-it.sh configerver:8666 -- java -jar /app.jar"</span></span><br><span class="line">  <span class="attribute">ribbon-consumer</span>:</span><br><span class="line">    <span class="attribute">image</span>: mao/<span class="attribute">ribbon-consumer</span>:<span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT</span><br><span class="line">    <span class="attribute">ports</span>:</span><br><span class="line">      - <span class="number">8830</span>:<span class="number">8830</span></span><br><span class="line">    <span class="attribute">depends_on</span>:</span><br><span class="line">      - eureka</span><br><span class="line">      - configerver</span><br><span class="line">    <span class="attribute">entrypoint</span>: <span class="string">"./wait-for-it.sh configerver:8666 -- java -jar /app.jar"</span></span><br><span class="line">  <span class="attribute">ribbon-provider</span>:</span><br><span class="line">    <span class="attribute">image</span>: mao/<span class="attribute">ribbon-provider</span>:<span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT</span><br><span class="line">    <span class="attribute">ports</span>:</span><br><span class="line">      - <span class="number">8820</span>:<span class="number">8820</span></span><br><span class="line">    <span class="attribute">depends_on</span>:</span><br><span class="line">      - eureka</span><br><span class="line">      - configerver</span><br><span class="line">    <span class="attribute">entrypoint</span>: <span class="string">"./wait-for-it.sh configerver:8666 -- java -jar /app.jar"</span></span><br><span class="line">  <span class="attribute">gateway</span>:</span><br><span class="line">    <span class="attribute">image</span>: mao/<span class="attribute">gateway</span>:<span class="number">0.0</span>.<span class="number">1</span>-SNAPSHOT</span><br><span class="line">    <span class="attribute">ports</span>:</span><br><span class="line">      - <span class="number">8081</span>:<span class="number">8081</span></span><br><span class="line">    <span class="attribute">depends_on</span>:</span><br><span class="line">      - eureka</span><br><span class="line">      - configerver</span><br><span class="line">    <span class="attribute">entrypoint</span>: <span class="string">"./wait-for-it.sh configerver:8666 -- java -jar /app.jar"</span></span><br></pre></td></tr></table></figure><ul><li>然后我们在服务器中执行docker-compose命令后台一键启动服务，不出意外服务就能够全部启动</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker-compose up -d</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Docker/%E5%90%8E%E5%8F%B0%E6%9C%89%E9%A1%BA%E5%BA%8F%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1%E6%88%90%E5%8A%9F.png" alt="后台有顺序启动服务成功"></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><ul><li>本篇文章我们学习了如何使用Docker Compose来启动多个容器，而多个容器改如何管理呢？谷歌已经给了我们答案，那就是使用k8s，而k8s是什么呢，请看我的这一篇文章<a href="https://juejin.im/post/5d4145696fb9a06b2a201c47" target="_blank" rel="noopener">Kubeadm 部署 Kubernetes 1.14.2 集群</a></li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://stackoverflow.com/questions/36685980/docker-is-installed-but-docker-compose-is-not-why/47061271" target="_blank" rel="noopener">Docker is installed but Docker Compose is not ? why?</a></li><li><a href="https://github.com/vishnubob/wait-for-it/issues/57" target="_blank" rel="noopener">wait for it Usage with Docker</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/maoqitian/MaoMdPhoto/master/Docker/dockerlogo.jpg&quot; alt=&quot;dockerlogo&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;之前的文章中，我们使用docker run 命令来启动一个容器，而作为真正的线上业务环境，我们服务肯定不止一个，也就说明容器肯定不止一个，而如果还是手动的一个个来启动容器这未免会让人头皮发麻，幸好有&lt;strong&gt;Docker Compose&lt;/strong&gt;，用于定义和运行多容器Docker应用程序的工具，有了它我们可以一次启动多个容器，这也非常适合与持续集成工具（Jenkins）来配合。&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Docker" scheme="https://www.maoqitian.com/categories/Docker/"/>
    
    
      <category term="docker" scheme="https://www.maoqitian.com/tags/docker/"/>
    
      <category term="Maven" scheme="https://www.maoqitian.com/tags/Maven/"/>
    
      <category term="Git" scheme="https://www.maoqitian.com/tags/Git/"/>
    
      <category term="CentOs" scheme="https://www.maoqitian.com/tags/CentOs/"/>
    
      <category term="docker-compose" scheme="https://www.maoqitian.com/tags/docker-compose/"/>
    
      <category term="wait-for-it" scheme="https://www.maoqitian.com/tags/wait-for-it/"/>
    
  </entry>
  
  <entry>
    <title>Docker容器学习（三）之Docker 镜像构建</title>
    <link href="https://www.maoqitian.com/2019/09/22/Docker%E5%AE%B9%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%89%EF%BC%89%E4%B9%8BDocker-%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA/"/>
    <id>https://www.maoqitian.com/2019/09/22/Docker容器学习（三）之Docker-镜像构建/</id>
    <published>2019-09-22T15:43:34.000Z</published>
    <updated>2020-10-15T14:26:43.683Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/maoqitian/MaoMdPhoto/master/Docker/dockerlogo.jpg" alt="dockerlogo"></p><blockquote><p>Docker 镜像构建一般使用Dockerfile，首先我们需要了解Dockerfile语法（<a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="noopener">Dockerfile官方文档</a>），然后我们编写好Dockerfile文件之后就可以开始构建我们的项目对应Docker镜像，如果构建呢？我们可以手动使用docker命令构建，也可以使用开源插件帮助构建，请往下看。<br><a id="more"></a></p></blockquote><h2 id="Dockerfile-构建镜像"><a href="#Dockerfile-构建镜像" class="headerlink" title="Dockerfile 构建镜像"></a>Dockerfile 构建镜像</h2><h3 id="自己手动构建"><a href="#自己手动构建" class="headerlink" title="自己手动构建"></a>自己手动构建</h3><ul><li>首先我们使用maven 命令将项目打包成 jar 包（jar包一般生成在项目的target目录中）</li></ul><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mvn </span>install</span><br></pre></td></tr></table></figure><ul><li><p>将jar包复制到服务器我们想要的位置，使用docker命令构建docker镜像</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 格式：docker <span class="keyword">build </span>-t 标签名称 Dockerfile的相对位置</span><br><span class="line"><span class="symbol">docker</span> <span class="keyword">build </span>-t configserver .</span><br></pre></td></tr></table></figure></li><li><p>Dockerfile 内容</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于哪个镜像</span></span><br><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将本地文件夹挂载到当前容器</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /data/cloudtest</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># 拷贝文件到容器，也可以直接写成ADD xxxxx.jar /app.jar</span></span></span><br><span class="line"><span class="bash">ADD configserver-0.0.1-SNAPSHOT.jar  /app.jar</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># 声明需要暴露的端口</span></span></span><br><span class="line"><span class="bash">EXPOSE 8666</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># 配置容器启动后执行的命令</span></span></span><br><span class="line"><span class="bash">ENTRYPOINT [<span class="string">"java"</span>,<span class="string">"-Djava.security.egd=file:/dev/./urandom"</span>,<span class="string">"-jar"</span>,<span class="string">"/app.jar"</span>]</span></span><br></pre></td></tr></table></figure></li><li><p>启动构建好的镜像</p></li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> -p 8666:8666 configserver</span></span><br></pre></td></tr></table></figure><h3 id="使用插件来构建镜像"><a href="#使用插件来构建镜像" class="headerlink" title="使用插件来构建镜像"></a>使用插件来构建镜像</h3><ul><li>使用插件之前，如果本地环境中没有安装docker，则我们也可以使用远程服务器安装的docker来帮助我们构建，如何使用远程docker呢，首先我们要开启docker的远程访问<h4 id="Centos7中docker开启远程访问"><a href="#Centos7中docker开启远程访问" class="headerlink" title="Centos7中docker开启远程访问"></a>Centos7中docker开启远程访问</h4></li><li><p>在/usr/lib/systemd/system/docker.service，配置远程访问。主要是在[Service]这个部分，加上下面两个参数</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /usr/lib/systemd/system/docker.service</span></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">ExecStart</span>=</span><br><span class="line"><span class="attr">ExecStart</span>=/usr/bin/dockerd -H tcp://<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">2375</span> -H unix://var/run/docker.sock</span><br></pre></td></tr></table></figure></li><li><p>以上配置完成之后我们需要重新读取docker配置文件，重新启动docker服务</p></li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">systemctl daemon-reload</span></span><br><span class="line"><span class="attribute">systemctl restart docker</span></span><br></pre></td></tr></table></figure><ul><li><p>看进程docker是否已经监听2375端口，命令为 ps aux | grep docker</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root      8902  0.5  0.1 637948 37388 ?        Ssl  10<span class="function">:34</span>   1<span class="function">:30</span> <span class="string">/usr/bin/dockerd</span> -H tcp:<span class="string">//0.0.0.0</span><span class="function">:2375</span> -H unix:<span class="string">//var/run/docker.sock</span></span><br><span class="line">root      8909  0.0  0.0 432312 10904 ?        Ssl  10<span class="function">:34</span>   0<span class="function">:09</span> docker-containerd -l unix:<span class="string">///var/run/docker/libcontainerd/docker-containerd.sock</span> <span class="params">--metrics-interval=0</span> <span class="params">--start-timeout</span> 2m <span class="params">--state-dir</span> <span class="string">/var/run/docker/libcontainerd/containerd</span> <span class="params">--shim</span> docker-containerd-shim <span class="params">--runtime</span> docker-runc</span><br></pre></td></tr></table></figure></li><li><p>此时docker已经开启远程访问地址为 服务器地址:2375(别忘了服务器防火墙需要开放2375端口)</p></li></ul><h4 id="docker-maven-plugin（spotify）"><a href="#docker-maven-plugin（spotify）" class="headerlink" title="docker-maven-plugin（spotify）"></a>docker-maven-plugin（spotify）</h4><ul><li>使用<a href="https://github.com/spotify/docker-maven-plugin" target="_blank" rel="noopener">docker-maven-plugin</a>来构建镜像</li><li><p>配置POM build 模块，使用docker 镜像私服（nexus）作为镜像仓库</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>172.31.116.12:9290/mao/microservice-discovery-eureka:0.0.1<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">dockerDirectory</span>&gt;</span>$</span><span class="template-variable">&#123;project.basedir&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">dockerDirectory</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="comment">&lt;!--远程docker 地址--&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">dockerHost</span>&gt;</span>http://172.31.76.16:2375<span class="tag">&lt;/<span class="name">dockerHost</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="comment">&lt;!--&lt;dockerCertPath&gt;&lt;/dockerCertPath&gt;--&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$</span><span class="template-variable">&#123;project.build.directory&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">include</span>&gt;</span>$</span><span class="template-variable">&#123;project.build.finalName&#125;</span><span class="xml">.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">                    <span class="comment">&lt;!-- 与maven配置文件settings.xml中配置的server.id一致，用于推送镜像 --&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">serverId</span>&gt;</span>docker-nexus<span class="tag">&lt;/<span class="name">serverId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>创建并上传镜像执行</p></li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean <span class="keyword">package</span> <span class="title">docker:build  -DpushImage</span></span><br></pre></td></tr></table></figure><ul><li>构建成功，使用docker 查看构建成功的镜像</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Docker/%E4%BD%BF%E7%94%A8docker-maven-plugin%E6%9D%A5%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F%E6%88%90%E5%8A%9F.png" alt="使用docker-maven-plugin来构建镜像成功"><br><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Docker/docker-maven-plugin%E6%9E%84%E5%BB%BA%E6%88%90%E5%8A%9F%E7%9A%84%E9%95%9C%E5%83%8F.png" alt="docker-maven-plugin构建成功的镜像"></p><ul><li>可借助imageTags元素更为灵活地指定镜像名称和标签</li></ul><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>172.31.116.12:9390/test/eureka<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">dockerDirectory</span>&gt;</span>$</span><span class="template-variable">&#123;project.basedir&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">dockerDirectory</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="comment">&lt;!--远程docker 地址--&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">dockerHost</span>&gt;</span>http://172.31.76.16:2375<span class="tag">&lt;/<span class="name">dockerHost</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="comment">&lt;!--&lt;dockerCertPath&gt;&lt;/dockerCertPath&gt;--&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span></span><br><span class="line"><span class="xml">                           <span class="comment">&lt;!--Dockerfile文件路径 此路径代表本项目根目录--&gt;</span> <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$</span><span class="template-variable">&#123;project.build.directory&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">include</span>&gt;</span>$</span><span class="template-variable">&#123;project.build.finalName&#125;</span><span class="xml">.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="comment">&lt;!--重复构建相同标签名称的镜像，可将forceTags设为true，这样就会覆盖构建相同标签的镜像--&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">forceTags</span>&gt;</span>true<span class="tag">&lt;/<span class="name">forceTags</span>&gt;</span></span></span><br><span class="line"><span class="xml">                     <span class="comment">&lt;!--借助imageTags元素更为灵活地指定镜像名称和标签--&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">imageTags</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">imageTag</span>&gt;</span>0.0.1<span class="tag">&lt;/<span class="name">imageTag</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">imageTag</span>&gt;</span>latest<span class="tag">&lt;/<span class="name">imageTag</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">imageTags</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="comment">&lt;!-- 与maven配置文件settings.xml中配置的server.id一致，用于推送镜像 --&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">serverId</span>&gt;</span>docker-nexus<span class="tag">&lt;/<span class="name">serverId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>使用如下命令进行构建（注意构建命令和没有加入imageTags有所不同）</li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean <span class="keyword">package</span> <span class="title">docker:build  -DpushImageTag</span></span><br></pre></td></tr></table></figure><h4 id="docker-maven-plugin-多项目共同构建"><a href="#docker-maven-plugin-多项目共同构建" class="headerlink" title="docker-maven-plugin 多项目共同构建"></a>docker-maven-plugin 多项目共同构建</h4><ul><li>以上配置我们只是针对单个项目配置，如果项目中包含多个子项目，我们希望一起打包成镜像并上传到私服，则需要用到phase 将镜像构建绑定到maven 命令上</li><li><p>平常打包构建命令为mvn clean package docker:build，而对应maven的命令格式为mvn phase:goal，所以打包构建命令中package docker对应为phase，build则对应goal，这样根据官方文档提示将POM改造得出</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="comment">&lt;!--将构建的触发绑定到对应的命令上--&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>build-image<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>build<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>tag-image<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>tag<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">image</span>&gt;</span>test1/eureka1:$</span><span class="template-variable">&#123;project.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">newName</span>&gt;</span>172.31.116.12:9290/test1/eureka1:$</span><span class="template-variable">&#123;project.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">newName</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>push-image<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>push<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>172.31.116.12:9290/test1/eureka1:$</span><span class="template-variable">&#123;project.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>test1/eureka1:$</span><span class="template-variable">&#123;project.version&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">imageName</span>&gt;</span> <span class="comment">&lt;!--镜像名--&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="comment">&lt;!--Dockerfile文件路径 此路径代表本项目根目录--&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">dockerDirectory</span>&gt;</span>$</span><span class="template-variable">&#123;project.basedir&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">dockerDirectory</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="comment">&lt;!--本地不安装 docker 使用远程docker 地址，该地址为docker 开启远程访问地址 --&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">dockerHost</span>&gt;</span>http://172.31.76.16:2375<span class="tag">&lt;/<span class="name">dockerHost</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="comment">&lt;!--&lt;dockerCertPath&gt;&lt;/dockerCertPath&gt;--&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">resource</span>&gt;</span> <span class="comment">&lt;!-- 指定资源文件 --&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span>  <span class="comment">&lt;!-- 指定要复制的目录路径，这里是当前目录 --&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$</span><span class="template-variable">&#123;project.build.directory&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">directory</span>&gt;</span> <span class="comment">&lt;!-- 指定要复制的根目录，这里是target目录 --&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">include</span>&gt;</span>$</span><span class="template-variable">&#123;project.build.finalName&#125;</span><span class="xml">.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span> <span class="comment">&lt;!-- 指定需要拷贝的文件，这里指最后生成的jar包 --&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="comment">&lt;!--重复构建相同标签名称的镜像，可将forceTags设为true，这样就会覆盖构建相同标签的镜像--&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">forceTags</span>&gt;</span>true<span class="tag">&lt;/<span class="name">forceTags</span>&gt;</span>  <span class="comment">&lt;!--覆盖相同标签镜像--&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="comment">&lt;!-- 与maven配置文件settings.xml中配置的server.id一致，用于推送镜像 --&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">serverId</span>&gt;</span>docker-nexus<span class="tag">&lt;/<span class="name">serverId</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>如此我们只要在项目根目录使用命令，则项目就会自动打包构建镜像并上传到nexus私服</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">## -DskipTests 表示 跳过Test</span><br><span class="line">mvn clean <span class="keyword">package</span> <span class="title">-DskipTests</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Docker/%E6%95%B4%E4%B8%AA%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E6%88%90%E5%8A%9F%E5%B9%B6%E4%B8%8A%E4%BC%A0%E7%A7%81%E6%9C%8D.png" alt="整个项目构建成功并上传私服"></p><h2 id="Docker-私有仓库结合-nexus-搭建与使用"><a href="#Docker-私有仓库结合-nexus-搭建与使用" class="headerlink" title="Docker 私有仓库结合 nexus 搭建与使用"></a>Docker 私有仓库结合 nexus 搭建与使用</h2><ul><li>每次构建好的镜像我们存放在哪呢，这里可以搭建自己的私服仓库来存放docker镜像。<h3 id="安装nexus"><a href="#安装nexus" class="headerlink" title="安装nexus"></a>安装nexus</h3></li><li><a href="https://juejin.im/post/5d1cd04b6fb9a07eb051de8e" target="_blank" rel="noopener">Centos下 Nexus 搭建Maven 私服</a><h3 id="创建私有仓库"><a href="#创建私有仓库" class="headerlink" title="创建私有仓库"></a>创建私有仓库</h3><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Docker/nexus%E5%88%9B%E5%BB%BAdocker%E7%A7%81%E6%9C%8D%E4%BB%93%E5%BA%93.png" alt="nexus创建docker私服仓库"></li></ul><h3 id="docker连接私服仓库"><a href="#docker连接私服仓库" class="headerlink" title="docker连接私服仓库"></a>docker连接私服仓库</h3><ul><li>上一小节我们创建好了私服仓库，还需配置，在docker服务器新建文件</li></ul><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 配置 vim /etc/docker/daemon.json 填写我们仓库地址和对应的仓库端口号</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"insecure-registries"</span>: [<span class="string">"xxx.xxx.xxx.xxx:9290"</span>] </span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta"># 重启docker</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><ul><li>登录仓库，输入nexus的用户名和密码，默认用户名为admin，密码为admin123</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">docker</span> <span class="selector-tag">login</span> <span class="selector-tag">xxx</span><span class="selector-class">.xxx</span><span class="selector-class">.xxx</span><span class="selector-class">.xxx</span><span class="selector-pseudo">:9290</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/maoqitian/MaoMdPhoto/master/Docker/dockerlogo.jpg&quot; alt=&quot;dockerlogo&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Docker 镜像构建一般使用Dockerfile，首先我们需要了解Dockerfile语法（&lt;a href=&quot;https://docs.docker.com/engine/reference/builder/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Dockerfile官方文档&lt;/a&gt;），然后我们编写好Dockerfile文件之后就可以开始构建我们的项目对应Docker镜像，如果构建呢？我们可以手动使用docker命令构建，也可以使用开源插件帮助构建，请往下看。&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Docker" scheme="https://www.maoqitian.com/categories/Docker/"/>
    
    
      <category term="docker" scheme="https://www.maoqitian.com/tags/docker/"/>
    
      <category term="Maven" scheme="https://www.maoqitian.com/tags/Maven/"/>
    
      <category term="Git" scheme="https://www.maoqitian.com/tags/Git/"/>
    
      <category term="CentOs" scheme="https://www.maoqitian.com/tags/CentOs/"/>
    
      <category term="Nexus" scheme="https://www.maoqitian.com/tags/Nexus/"/>
    
  </entry>
  
  <entry>
    <title>Docker容器学习（二）之Docker 命令</title>
    <link href="https://www.maoqitian.com/2019/09/22/Docker%E5%AE%B9%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B9%8BDocker-%E5%91%BD%E4%BB%A4/"/>
    <id>https://www.maoqitian.com/2019/09/22/Docker容器学习（二）之Docker-命令/</id>
    <published>2019-09-22T15:23:11.000Z</published>
    <updated>2020-10-15T14:26:43.684Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/maoqitian/MaoMdPhoto/master/Docker/dockerlogo.jpg" alt="dockerlogo"></p><h1 id="Docker-命令"><a href="#Docker-命令" class="headerlink" title="Docker 命令"></a>Docker 命令</h1><blockquote><p>上一篇文章我们了解如何在CentOs安装Docker,接下来我们学习Docker 命令</p></blockquote><h2 id="Docker镜像常用命令"><a href="#Docker镜像常用命令" class="headerlink" title="Docker镜像常用命令"></a>Docker镜像常用命令</h2><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td>docker images 或者 docker image ls</td><td>列表本地所有镜像</td></tr><tr><td>docker search 关键词</td><td>在Docker Hub中搜索镜像</td></tr><tr><td>docker pull 镜像名称</td><td>下载Docker镜像</td></tr><tr><td>docker rmi 镜像id</td><td>删除Docker镜像。加参数-f表示强制删除。</td></tr><tr><td>docker run 镜像名称称</td><td>下载Docker镜像</td></tr><tr><td>docker build -t 标签名称 目录</td><td>构建Docker镜像，-t 表示指定一个标签</td></tr><tr><td>docker tag</td><td>为镜像打标签</td></tr></tbody></table><a id="more"></a><h2 id="Docker-容器常用命令"><a href="#Docker-容器常用命令" class="headerlink" title="Docker 容器常用命令"></a>Docker 容器常用命令</h2><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td>docker ps</td><td>列表所有运行中的Docker容器（包括已停止的容器）。该命令参数比较多，-a：列表所有容器；-f：过滤；-q 只列表容器的id。</td></tr><tr><td>docker version</td><td>查看docker 版本信息</td></tr><tr><td>docker –version</td><td>查看docker 版本</td></tr><tr><td>docker info</td><td>查看Docker系统信息，例如：CPU、内存、容器个数等等</td></tr><tr><td>docker kill 容器id</td><td>杀死id对应容器</td></tr><tr><td>docker start / stop / restart 容器id</td><td>启动、停止、重启指定容器</td></tr></tbody></table><ul><li>更多命令，请输入–help参数查询；如果想看docker命令可输入docker –help；如果想查询docker run命令的用法，可输入docker run –help。<h3 id="搜索、下载、删除镜像"><a href="#搜索、下载、删除镜像" class="headerlink" title="搜索、下载、删除镜像"></a>搜索、下载、删除镜像</h3></li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 搜索镜像 nginx</span></span><br><span class="line">NAME                                                   DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">nginx                                                  Official build of Nginx.                        11281               [OK]                </span><br><span class="line">jwilder/nginx-proxy                                    Automated Nginx reverse<span class="built_in"> proxy </span><span class="keyword">for</span> docker c<span class="built_in">..</span>.   1586                                    [OK]</span><br><span class="line">richarvey/nginx-php-fpm                                Container running Nginx + PHP-FPM capable <span class="built_in">..</span>.   708                                     [OK]</span><br><span class="line">jrcs/letsencrypt-nginx-proxy-companion                 LetsEncrypt container <span class="keyword">to</span> use with nginx as<span class="built_in">..</span>.   504                                     [OK]</span><br><span class="line">webdevops/php-nginx                                    Nginx with PHP-FPM                              125                                     [OK]</span><br><span class="line">zabbix/zabbix-web-nginx-mysql                          Zabbix frontend based on Nginx web-server <span class="built_in">..</span>.   96                                      [OK]</span><br><span class="line">bitnami/nginx                                          Bitnami nginx Docker Image                      65                                      [OK]</span><br><span class="line">linuxserver/nginx                                      An Nginx container, brought <span class="keyword">to</span> you by Linu<span class="built_in">..</span>.   59                                      </span><br><span class="line">1and1internet/ubuntu-16-nginx-php-phpmyadmin-mysql-5   ubuntu-16-nginx-php-phpmyadmin-mysql-5          50                                      [OK]</span><br></pre></td></tr></table></figure><ul><li>NAME：镜像仓库名称。</li><li>DESCRIPTION：镜像仓库描述。</li><li>STARS：镜像仓库收藏数，表示该镜像仓库的受欢迎程度，类似于GitHub的Stars。</li><li>OFFICAL：表示是否为官方仓库，该列标记为[OK]的镜像均由各软件的官方项目组创建和维护。由结果可知，java这个镜像仓库是官方仓库，而其他的仓库都不是镜像仓库。</li><li>AUTOMATED：表示是否是自动构建的镜像仓库。</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#下载镜像</span></span><br><span class="line"><span class="attribute">docker</span> pull nginx</span><br></pre></td></tr></table></figure><h3 id="列出镜像"><a href="#列出镜像" class="headerlink" title="列出镜像"></a>列出镜像</h3><ul><li><p>docker images 或者 docker image ls </p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">nginx               latest              <span class="number">27</span>a188018e18        <span class="number">7</span> days ago          <span class="number">109</span>MB</span><br><span class="line">hello-world         latest              fce289e99eb9        <span class="number">3</span> months ago        <span class="number">1.84</span>kB</span><br></pre></td></tr></table></figure></li><li><p>REPOSITORY：镜像所属仓库名称。</p></li><li><p>TAG：镜像标签。默认是latest，表示最新。</p></li><li><p>IMAGE ID：镜像ID，表示镜像唯一标识。</p></li><li><p>CREATED：镜像创建时间。</p></li><li><p>SIZE：镜像大小。</p><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3></li></ul><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 删除指定名称镜像</span></span><br><span class="line">docker rmi hello-world</span><br><span class="line"><span class="meta">#删除所有镜像</span></span><br><span class="line">docker rmi -f $(docker images)</span><br></pre></td></tr></table></figure><h2 id="docker-run-命令启动容器"><a href="#docker-run-命令启动容器" class="headerlink" title="docker run 命令启动容器"></a>docker run 命令启动容器</h2><ul><li>该命令即可新建并启动一个容器</li></ul><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-d</td><td>表示后台运行2</td></tr><tr><td>-P</td><td>随机端口映射（指定端口映射）</td></tr></tbody></table><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定端口映射，有以下四种格式。</span></span><br><span class="line"><span class="attr">     ip:</span><span class="attr">hostPort:containerPort</span></span><br><span class="line"><span class="attr">     ip:</span><span class="string">:containerPort</span></span><br><span class="line"><span class="attr">     hostPort:</span><span class="string">containerPort</span></span><br><span class="line">     <span class="string">containerPort</span></span><br></pre></td></tr></table></figure><h3 id="例子-启动一个nginx容器"><a href="#例子-启动一个nginx容器" class="headerlink" title="例子 启动一个nginx容器"></a>例子 启动一个nginx容器</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 前面我们已经pull了一个nginx的镜像 </span></span><br><span class="line"><span class="meta"># -d                           # 后台运行</span></span><br><span class="line"><span class="meta"># -p 宿主机端口:容器端口         # 开放容器端口到宿主机端口 （服务器防火墙必须开放91端口）</span></span><br><span class="line"></span><br><span class="line">docker run -d -p <span class="number">91</span>:<span class="number">80</span> nginx</span><br><span class="line"></span><br><span class="line">浏览器访问 http:<span class="comment">//服务器地址:91/ 能够成功访问说明我们</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 需要注意的是，使用docker run命令创建容器时，会先检查本地是否存在指定镜像。如果本地不存在该名称的镜像，Docker就会自动从Docker Hub下载镜像并启动一个Docker容器。</span></span><br></pre></td></tr></table></figure><h2 id="Docker基本命令实践"><a href="#Docker基本命令实践" class="headerlink" title="Docker基本命令实践"></a>Docker基本命令实践</h2><h3 id="列出容器"><a href="#列出容器" class="headerlink" title="列出容器"></a>列出容器</h3><ul><li><p>docker ps -a</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                NAMES</span><br><span class="line">ded3613de77d        nginx               <span class="string">"nginx -g 'daemon ..."</span>   <span class="number">4</span> hours ago         <span class="meta">Up</span> About an hour    <span class="number">0.0</span><span class="meta">.0</span><span class="meta">.0</span>:<span class="number">91</span>-&gt;<span class="number">80</span>/tcp   nervous_curie</span><br></pre></td></tr></table></figure></li><li><p>CONTAINER_ID：表示容器ID。</p></li><li><p>IMAGE：表示镜像名称。</p></li><li><p>COMMAND：表示启动容器时运行的命令。</p></li><li><p>CREATED：表示容器的创建时间。</p></li><li><p>STATUS：表示容器运行的状态。Up表示运行中，Exited表示已停止。</p></li><li><p>PORTS：表示容器对外的端口号。</p></li><li><p>NAMES：表示容器名称。该名称默认由Docker自动生成，也可使用docker run命令的–name选项自行指定。</p></li></ul><h3 id="停止、强制停止、重启、删除容器"><a href="#停止、强制停止、重启、删除容器" class="headerlink" title="停止、强制停止、重启、删除容器"></a>停止、强制停止、重启、删除容器</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 停止容器</span></span><br><span class="line">docker stop ded3613de77d</span><br><span class="line"></span><br><span class="line"><span class="meta"># 强制停止容器</span></span><br><span class="line">docker kill ded3613de77d</span><br><span class="line"></span><br><span class="line"><span class="meta"># 启动或者重启已经停止的容器</span></span><br><span class="line">docker start ded3613de77d</span><br><span class="line">docker restart ded3613de77d</span><br><span class="line"></span><br><span class="line"><span class="meta"># 删除容器</span></span><br><span class="line">docker rm ded3613de77d</span><br><span class="line"><span class="meta"># 删除所有容器</span></span><br><span class="line">docker rm -f $(docker ps -a -q)</span><br></pre></td></tr></table></figure><h3 id="进入、退出容器"><a href="#进入、退出容器" class="headerlink" title="进入、退出容器"></a>进入、退出容器</h3><ul><li><p>使用nsenter工具进入容器（nsenter工具包含在util-linux 2.23或更高版本中）</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 找到容器第一个进程的PID，可通过以下命令获取</span></span><br><span class="line">docker inspect <span class="params">--format</span> <span class="string">"&#123;&#123;.State.Pid&#125;&#125;"</span> $CONTAINER_ID</span><br><span class="line"><span class="comment"># 获得PID，使用nsenter命令进入容器</span></span><br><span class="line">nsenter <span class="params">--target</span> <span class="string">"$PID"</span> <span class="params">--mount</span> <span class="params">--uts</span> <span class="params">--ipc</span> <span class="params">--net</span> <span class="params">--pid</span></span><br></pre></td></tr></table></figure></li><li><p>实战例子</p></li></ul><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@gxst_docker_76_16</span> ~]<span class="meta"># docker restart ded3613de77d </span></span><br><span class="line">ded3613de77d</span><br><span class="line">[root<span class="symbol">@gxst_docker_76_16</span> ~]<span class="meta"># docker inspect --format <span class="string">"&#123;&#123;.State.Pid&#125;&#125;"</span> ded3613de77d</span></span><br><span class="line"><span class="number">26878</span></span><br><span class="line">[root<span class="symbol">@gxst_docker_76_16</span> ~]<span class="meta"># nsenter --target 26878 --mount --uts --ipc --net --pid</span></span><br><span class="line">mesg: ttyname failed: No such file <span class="literal">or</span> directory</span><br><span class="line">root<span class="symbol">@ded3613de77d</span>:/<span class="meta">#</span></span><br></pre></td></tr></table></figure><ul><li>退出容器，在容器中使用exit命令即可</li></ul><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@ded3613de77d</span><span class="symbol">:/</span><span class="comment"># exit</span></span><br><span class="line">logout</span><br><span class="line">[root<span class="variable">@gxst_docker_76_16</span> ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li>可以结合以上两条命令写一个进入容器脚本</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建脚本文件 </span></span><br><span class="line"><span class="attribute">vim</span> docker-enter.sh</span><br></pre></td></tr></table></figure><ul><li><p>脚本代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#Use nsenter to access docker</span></span><br><span class="line">CNAME=<span class="variable">$1</span></span><br><span class="line"></span><br><span class="line">CPID=$(docker inspect --format <span class="string">"&#123;&#123;.State.Pid&#125;&#125;"</span> <span class="variable">$CNAME</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$#</span>"</span> -gt 1 ]; <span class="keyword">then</span></span><br><span class="line"></span><br><span class="line">    nsenter --target <span class="variable">$CPID</span> --mount --uts --ipc --net --pid -- <span class="string">"<span class="variable">$2</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">    nsenter --target <span class="variable">$CPID</span> --mount --uts --ipc --net --pid -- /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li><li><p>使用脚本进入容器</p></li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">sh </span>docker-enter.<span class="keyword">sh </span>ded3613de77d（容器名称或者ID）</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/maoqitian/MaoMdPhoto/master/Docker/dockerlogo.jpg&quot; alt=&quot;dockerlogo&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Docker-命令&quot;&gt;&lt;a href=&quot;#Docker-命令&quot; class=&quot;headerlink&quot; title=&quot;Docker 命令&quot;&gt;&lt;/a&gt;Docker 命令&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;上一篇文章我们了解如何在CentOs安装Docker,接下来我们学习Docker 命令&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Docker镜像常用命令&quot;&gt;&lt;a href=&quot;#Docker镜像常用命令&quot; class=&quot;headerlink&quot; title=&quot;Docker镜像常用命令&quot;&gt;&lt;/a&gt;Docker镜像常用命令&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;docker images 或者 docker image ls&lt;/td&gt;
&lt;td&gt;列表本地所有镜像&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;docker search 关键词&lt;/td&gt;
&lt;td&gt;在Docker Hub中搜索镜像&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;docker pull 镜像名称&lt;/td&gt;
&lt;td&gt;下载Docker镜像&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;docker rmi 镜像id&lt;/td&gt;
&lt;td&gt;删除Docker镜像。加参数-f表示强制删除。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;docker run 镜像名称称&lt;/td&gt;
&lt;td&gt;下载Docker镜像&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;docker build -t 标签名称 目录&lt;/td&gt;
&lt;td&gt;构建Docker镜像，-t 表示指定一个标签&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;docker tag&lt;/td&gt;
&lt;td&gt;为镜像打标签&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="Docker" scheme="https://www.maoqitian.com/categories/Docker/"/>
    
    
      <category term="docker" scheme="https://www.maoqitian.com/tags/docker/"/>
    
      <category term="Maven" scheme="https://www.maoqitian.com/tags/Maven/"/>
    
      <category term="Git" scheme="https://www.maoqitian.com/tags/Git/"/>
    
      <category term="CentOs" scheme="https://www.maoqitian.com/tags/CentOs/"/>
    
  </entry>
  
  <entry>
    <title>Docker容器学习（一）之Docker安装和启动</title>
    <link href="https://www.maoqitian.com/2019/09/15/Docker%E5%AE%B9%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8BDocker%E5%AE%89%E8%A3%85%E5%92%8C%E5%90%AF%E5%8A%A8/"/>
    <id>https://www.maoqitian.com/2019/09/15/Docker容器学习（一）之Docker安装和启动/</id>
    <published>2019-09-15T15:06:53.000Z</published>
    <updated>2020-10-15T14:26:43.683Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/maoqitian/MaoMdPhoto/master/Docker/dockerlogo.jpg" alt="dockerlogo"></p><h1 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker"></a>什么是Docker</h1><blockquote><p>首先我们了解什么是Docker</p><ul><li><a href="https://github.com/eacdy/spring-cloud-book/blob/master/3%20%E4%BD%BF%E7%94%A8Docker%E6%9E%84%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1/3.1%20Docker%E4%BB%8B%E7%BB%8D.md" target="_blank" rel="noopener">Docker介绍</a></li></ul></blockquote><h1 id="Docker-准备工作"><a href="#Docker-准备工作" class="headerlink" title="Docker 准备工作"></a>Docker 准备工作</h1><ul><li>目前使用服务器为CentOS 7.6</li><li>使用Docker构建微服务首先我们需要Java环境（JDK）,Maven和Git<a id="more"></a><h2 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h2></li><li>到Oracle官网下载好 <a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">jdk-8u211-linux-x64.rpm</a> 备用</li><li><p>首先查看系统自带java，并卸载</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果有结果出来，则说明自带了java</span></span><br><span class="line">java -version  </span><br><span class="line"><span class="comment"># 查询出已经安装的java</span></span><br><span class="line">rpm -qa|grep java    </span><br><span class="line"></span><br><span class="line">yum -y <span class="builtin-name">remove</span> [删除上面查出来的东西，多个用空格分隔]</span><br></pre></td></tr></table></figure></li><li><p>安装JDK</p></li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/usr</span></span><br><span class="line">mkdir <span class="string">/usr/java</span></span><br><span class="line">rpm -ivh jdk-8u65-linux-x64.rpm</span><br></pre></td></tr></table></figure><ul><li>配置环境变量，编辑/etc/profile文件找到： export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL 这一行，并在其下面一行添加如下内容，最后使profile文件环境变量生效</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#编辑/etc/profile文件</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置java环境变量</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_HOME</span>=/usr/java/jdk1.8.0_211-amd64 # 根据情况修改</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$JAVA_HOME</span>/bin:$PATH</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">CLASSPATH</span>=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line"></span><br><span class="line"><span class="comment">#使profile文件环境变量生效</span></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><ul><li>最后可以使用如下命令查看Java 版本<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -<span class="built_in">version</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Maven的安装"><a href="#Maven的安装" class="headerlink" title="Maven的安装"></a>Maven的安装</h2><ul><li><p>下载 <a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">maven 3.6.1</a></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行以下命令</span></span><br><span class="line">tar -zxvf apache-maven-3.6.1-bin.tar.gz -C /data/opt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在/etc/profile文件末尾增加以下配置</span></span><br><span class="line"><span class="comment"># 设置Maven环境变量</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">MAVEN_HOME</span>=/data/opt/apache-maven-3.6.1/</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$MAVEN_HOME</span>/bin:$PATH</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 重载/etc/profile这个文件</span></span><br><span class="line"> source /etc/profile</span><br></pre></td></tr></table></figure></li><li><p>测试</p></li></ul><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mvn </span>-v</span><br></pre></td></tr></table></figure><ul><li>Maven本地仓库配置（/data/opt/apache-maven-3.6.1/conf/settings.xml）</li></ul><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">&lt;localRepository&gt;</span><span class="meta-keyword">/data/</span>maven/repo<span class="params">&lt;/localRepository&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置maven私服地址 和 登录私服账号密码</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--私服账号配置--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">server</span>&gt;</span>  </span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span><br><span class="line">     <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span>  </span><br><span class="line">     <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">server</span>&gt;</span>  </span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>3rdParty<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span><br><span class="line">     <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span>  </span><br><span class="line">     <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin123<span class="tag">&lt;/<span class="name">password</span>&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--私服地址配置--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>local nexus<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://172.31.116.12:9190/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span>  </span><br><span class="line">     <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">安装依赖</span><br><span class="line">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel asciidoc</span><br><span class="line"></span><br><span class="line">yum install  gcc <span class="keyword">perl</span>-ExtUtils-MakeMaker</span><br><span class="line"></span><br><span class="line">如果已经安装了git,但是版本太老，可以先卸载</span><br><span class="line">yum <span class="built_in">remove</span> git </span><br><span class="line"></span><br><span class="line">下载git包解压</span><br><span class="line">tar -vxf git-<span class="number">2.15</span>.<span class="number">1</span>.tar.gz -C /<span class="keyword">opt</span></span><br><span class="line"></span><br><span class="line">进入git 目录</span><br><span class="line"><span class="keyword">cd</span> /<span class="keyword">opt</span>/git-<span class="number">2.18</span>.<span class="number">0</span>/</span><br><span class="line"></span><br><span class="line">执行以下命令</span><br><span class="line"></span><br><span class="line"><span class="keyword">make</span> prefix=/usr/local/git <span class="keyword">all</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">make</span> prefix=/usr/local/git install</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"export PATH=$PATH:/usr/local/git/bin"</span> &gt;&gt; /etc/<span class="keyword">profile</span>  //配置环境变量</span><br><span class="line"></span><br><span class="line"><span class="keyword">source</span> /etc/<span class="keyword">profile</span> //跟新配置文件</span><br><span class="line"></span><br><span class="line">git --<span class="keyword">version</span> 查看git版本</span><br></pre></td></tr></table></figure><h1 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a>Docker 安装</h1><ul><li><a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">Docker 官方安装文档</a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2></li><li>卸载老版本的Docker</li></ul><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker <span class="string">\</span></span><br><span class="line">                  docker-client <span class="string">\</span></span><br><span class="line">                  docker-client-latest <span class="string">\</span></span><br><span class="line">                  docker-common <span class="string">\</span></span><br><span class="line">                  docker-latest <span class="string">\</span></span><br><span class="line">                  docker-latest-logrotate <span class="string">\</span></span><br><span class="line">                  docker-logrotate <span class="string">\</span></span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><ul><li>在新的一台机器上安装Docker，首先我们需要设置Docker的存储仓库，然后我们就可以从存储仓库中安装和更新Docker</li></ul><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安裝所需的包。 yum-utils提供yum-config-manager實用程序，devicemapper存儲驅動程序需要device-mapper-persistent-data和lvm2。</span></span><br><span class="line">yum install -y yum-utils <span class="string">\</span></span><br><span class="line">  device-mapper-persistent-data <span class="string">\</span></span><br><span class="line">  lvm2</span><br><span class="line"><span class="comment"># 使用以下命令设置稳定版本（stable）存储库。</span></span><br><span class="line">yum-config-manager <span class="string">\</span></span><br><span class="line">    --add-repo <span class="string">\</span></span><br><span class="line">    https:<span class="regexp">//download.docker.com/linux/centos/docker-ce.repo</span></span><br></pre></td></tr></table></figure><ul><li>需要安装epel源 才能yum安装container-selinux</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装wget 网络工具</span></span><br><span class="line">yum -y <span class="keyword">install</span> wget</span><br><span class="line"></span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo <span class="keyword">http</span>://mirrors.aliyun.com/repo/Centos<span class="number">-7.</span>repo </span><br><span class="line"></span><br><span class="line">yum <span class="keyword">install</span> epel-<span class="keyword">release</span>   <span class="comment">#阿里云上的epel源</span></span><br></pre></td></tr></table></figure><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><ul><li>直接安装最新版本</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-<span class="keyword">ce</span> docker-<span class="keyword">ce</span>-cli containerd.io</span><br></pre></td></tr></table></figure><ul><li>查看可以安装版本</li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">list</span> docker-ce --showduplicates | <span class="keyword">sort</span> -<span class="built_in">r</span></span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2019/8/30/16cde51224a123cb?w=742&amp;h=434&amp;f=png&amp;s=46946" alt="Docker版本"></p><ul><li>指定安装的版本</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 官方方法</span><br><span class="line"><span class="selector-tag">yum</span> <span class="selector-tag">install</span> <span class="selector-tag">docker-ce-17</span><span class="selector-class">.03</span><span class="selector-class">.1</span> <span class="selector-tag">docker-ce-cli-17</span><span class="selector-class">.03</span><span class="selector-class">.1</span> <span class="selector-tag">containerd</span><span class="selector-class">.io</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 直接安装</span><br><span class="line"><span class="selector-tag">yum</span> <span class="selector-tag">install</span> <span class="selector-tag">docker-ce-17</span><span class="selector-class">.09</span><span class="selector-class">.1</span><span class="selector-class">.ce-1</span><span class="selector-class">.el7</span><span class="selector-class">.centos</span></span><br><span class="line"># 或者安装其他版本</span><br><span class="line"><span class="selector-tag">yum</span> <span class="selector-tag">install</span> <span class="selector-tag">docker-ce-18</span><span class="selector-class">.09</span><span class="selector-class">.6</span></span><br></pre></td></tr></table></figure><h2 id="Docker-启动"><a href="#Docker-启动" class="headerlink" title="Docker 启动"></a>Docker 启动</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="literal">start</span> docker</span><br></pre></td></tr></table></figure><ul><li>放入测试镜像</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull <span class="keyword">library</span>/hello-world</span><br></pre></td></tr></table></figure><ul><li>启动测试镜像</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> hello-world</span></span><br></pre></td></tr></table></figure><ul><li>出现如下输出说明安装成功<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Hello <span class="built_in">from</span> Docker!</span><br><span class="line">This message shows that your installation appears <span class="built_in">to</span> be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took <span class="keyword">the</span> following steps:</span><br><span class="line"> <span class="number">1.</span> The Docker client contacted <span class="keyword">the</span> Docker daemon.</span><br><span class="line"> <span class="number">2.</span> The Docker daemon pulled <span class="keyword">the</span> <span class="string">"hello-world"</span> image <span class="built_in">from</span> <span class="keyword">the</span> Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> <span class="number">3.</span> The Docker daemon created <span class="keyword">a</span> <span class="built_in">new</span> container <span class="built_in">from</span> that image which runs <span class="keyword">the</span></span><br><span class="line">    executable that produces <span class="keyword">the</span> output you are currently reading.</span><br><span class="line"> <span class="number">4.</span> The Docker daemon streamed that output <span class="built_in">to</span> <span class="keyword">the</span> Docker client, which sent <span class="keyword">it</span></span><br><span class="line">    <span class="built_in">to</span> your terminal.</span><br><span class="line"></span><br><span class="line">To <span class="keyword">try</span> something more ambitious, you can run <span class="keyword">an</span> Ubuntu container <span class="keyword">with</span>:</span><br><span class="line"> $ docker run -<span class="keyword">it</span> ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, <span class="keyword">and</span> more <span class="keyword">with</span> <span class="keyword">a</span> free Docker ID:</span><br><span class="line"> <span class="keyword">https</span>://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples <span class="keyword">and</span> ideas, visit:</span><br><span class="line"> <span class="keyword">https</span>://docs.docker.com/<span class="built_in">get</span>-started/</span><br></pre></td></tr></table></figure></li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">Docker官方文档</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/maoqitian/MaoMdPhoto/master/Docker/dockerlogo.jpg&quot; alt=&quot;dockerlogo&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;什么是Docker&quot;&gt;&lt;a href=&quot;#什么是Docker&quot; class=&quot;headerlink&quot; title=&quot;什么是Docker&quot;&gt;&lt;/a&gt;什么是Docker&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;首先我们了解什么是Docker&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/eacdy/spring-cloud-book/blob/master/3%20%E4%BD%BF%E7%94%A8Docker%E6%9E%84%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1/3.1%20Docker%E4%BB%8B%E7%BB%8D.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Docker介绍&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Docker-准备工作&quot;&gt;&lt;a href=&quot;#Docker-准备工作&quot; class=&quot;headerlink&quot; title=&quot;Docker 准备工作&quot;&gt;&lt;/a&gt;Docker 准备工作&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;目前使用服务器为CentOS 7.6&lt;/li&gt;
&lt;li&gt;使用Docker构建微服务首先我们需要Java环境（JDK）,Maven和Git&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="Docker" scheme="https://www.maoqitian.com/categories/Docker/"/>
    
    
      <category term="docker" scheme="https://www.maoqitian.com/tags/docker/"/>
    
      <category term="Maven" scheme="https://www.maoqitian.com/tags/Maven/"/>
    
      <category term="Git" scheme="https://www.maoqitian.com/tags/Git/"/>
    
      <category term="CentOs" scheme="https://www.maoqitian.com/tags/CentOs/"/>
    
  </entry>
  
  <entry>
    <title>开源库上传 jcenter</title>
    <link href="https://www.maoqitian.com/2019/09/03/%E5%BC%80%E6%BA%90%E5%BA%93%E4%B8%8A%E4%BC%A0-jcenter/"/>
    <id>https://www.maoqitian.com/2019/09/03/开源库上传-jcenter/</id>
    <published>2019-09-03T12:15:01.000Z</published>
    <updated>2020-10-15T14:26:43.690Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/jcenter%20upload/logo.png" alt="logo"></p><blockquote><p>平时撸代码避免不了在有些功能会使用到别人已经写好的轮子，别人的轮子开源库一般都已经上传了 jcenter仓库，我只需要比如 implementation ‘com.mao:xxxxxxx:1.0.0’一句话就能引入别人的开源库，这是怎么弄的呢？一般可以使用bintray-release插件和gradle-bintray-plugin插件，gradle-bintray-plugin插件不够简便（想了解可以看这篇文章<a href="https://www.cnblogs.com/mingfeng002/p/10255486.html" target="_blank" rel="noopener">https://www.cnblogs.com/mingfeng002/p/10255486.html</a>），所以接下来我们就了解一下如何使用bintray-release插件将自己的开源库上传到jcenter。<br><a id="more"></a></p></blockquote><h1 id="注册jcenter账号"><a href="#注册jcenter账号" class="headerlink" title="注册jcenter账号"></a>注册jcenter账号</h1><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><ul><li>进入<a href="https://bintray.com/" target="_blank" rel="noopener">注册地址</a>选择右边sign up here 进行注册</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/jcenter%20upload/jcenterRegister.png" alt="jcenterRegister"></p><h2 id="创建Repository（仓库）"><a href="#创建Repository（仓库）" class="headerlink" title="创建Repository（仓库）"></a>创建Repository（仓库）</h2><ul><li>注册成功之后创建Repository，作为存放开源库的仓库，选择为公共仓库（public），仓库名称和仓库类型为maven，仓库名称在后面上传时需要用到。</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/jcenter%20upload/createmavenrepository.png" alt="createmavenrepository"></p><h2 id="获取-API-Key"><a href="#获取-API-Key" class="headerlink" title="获取 API Key"></a>获取 API Key</h2><ul><li>登录bintray， Edit profile -&gt; API Key 可以获取上传的秘钥key，后面上传项目的时候需要用到</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/jcenter%20upload/getApiKey.png" alt="getApiKey"> </p><h1 id="配置引入-bintray-release插件"><a href="#配置引入-bintray-release插件" class="headerlink" title="配置引入 bintray-release插件"></a>配置引入 bintray-release插件</h1><ul><li>项目根目录build.gradle配置，加入bintray-release插件</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">       <span class="comment">//原有配置 ，保持不变</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="comment">// Android studio 原有IDE 配置，保持不变</span></span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:3.4.1'</span></span><br><span class="line">        <span class="comment">//加入bintray-release插件</span></span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.novoda:bintray-release:0.9.1'</span></span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">allprojects</span> &#123;</span><br><span class="line">     <span class="comment">//原有配置 ，保持不变</span></span><br><span class="line">&#125;</span><br><span class="line">.......</span><br></pre></td></tr></table></figure><ul><li>开源库目录build.gradle配置，每个配置描述都已经给出，完成这两个步骤，就可以准备上传开源库到jcenter了</li></ul><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">apply</span> plugin: <span class="string">'com.android.library'</span></span><br><span class="line"><span class="built_in">apply</span> plugin: <span class="string">'com.novoda.bintray-release'</span><span class="comment">//添加 bintray-release 配置</span></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">28</span></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">       <span class="comment">//原有配置 ，保持不变</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">           <span class="comment">//原有配置 ，保持不变</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    <span class="comment">//原有配置 ，保持不变 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加</span></span><br><span class="line">publish &#123;</span><br><span class="line">    userOrg = <span class="string">'maoqitian'</span><span class="comment">//bintray.com用户名</span></span><br><span class="line">    repoName = <span class="string">'maolibrary'</span>   <span class="comment">// bintray上仓库的名字</span></span><br><span class="line">    <span class="built_in">groupId</span> = <span class="string">'com.mao'</span><span class="comment">//jcenter上的路径</span></span><br><span class="line">    artifactId = <span class="string">'flexibleflowlayout'</span><span class="comment">//项目名称</span></span><br><span class="line">    publishVersion = <span class="string">'1.0.0'</span><span class="comment">//版本号</span></span><br><span class="line">    desc = <span class="string">'Make flow layouts simpler'</span><span class="comment">// 描述</span></span><br><span class="line">    website = <span class="string">'https://github.com/maoqitian/FlowLayout'</span><span class="comment">//一般填github 项目地址,一定是要有效的地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="上传开源库"><a href="#上传开源库" class="headerlink" title="上传开源库"></a>上传开源库</h1><h2 id="使用上传命令上传开源库"><a href="#使用上传命令上传开源库" class="headerlink" title="使用上传命令上传开源库"></a>使用上传命令上传开源库</h2><ul><li>上传命令解析</li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gradlew clean build bintrayUpload <span class="string">//</span>根命令</span><br><span class="line">-PbintrayUser=maoqitian <span class="string">//jcenter</span> 账号用户名</span><br><span class="line">-PbintrayKey=Xxxxxxxxx  <span class="string">//</span>文章开头获取的API Key</span><br><span class="line">-PdryRun=<span class="literal">false</span> <span class="string">//</span>配置参数，<span class="literal">true</span> 执行所以细节但是不上传开源库，<span class="literal">false</span>上传开源库</span><br></pre></td></tr></table></figure><ul><li>在项目根目录下执行上传命令</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># window 下执行</span></span><br><span class="line">gradlew clean build bintrayUpload <span class="attribute">-PbintrayUser</span>=maoqitian <span class="attribute">-PbintrayKey</span>=Xxxxxxxxx <span class="attribute">-PdryRun</span>=<span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># linux 下执行</span></span><br><span class="line">./gradlew clean build bintrayUpload <span class="attribute">-PbintrayUser</span>=maoqitian <span class="attribute">-PbintrayKey</span>=xxxxxxxxx <span class="attribute">-PdryRun</span>=<span class="literal">false</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/jcenter%20upload/Terminaluploadsuccess.png" alt="Terminaluploadsuccess"></p><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/jcenter%20upload/uploadsuccess.png" alt="uploadsuccess"></p><ul><li>到这里，我们可以看到开源库已经上传成功，在jcenter也可以看到刚刚上传的开源库</li></ul><h2 id="Add-to-Jcenter提交审核开源库"><a href="#Add-to-Jcenter提交审核开源库" class="headerlink" title="Add to Jcenter提交审核开源库"></a>Add to Jcenter提交审核开源库</h2><ul><li>经过上面的步骤，我确实已经把开源库上传到Jcenter了，但是我们还不能引用，要想引用上传的开源库还得提交人工审核，人工审核通过会收到站内message，并且开源库中的Add to Jcenter 也会消失。</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/jcenter%20upload/addtojcenter.png" alt="addtojcenter"></p><h1 id="版本更新"><a href="#版本更新" class="headerlink" title="版本更新"></a>版本更新</h1><ul><li>开源库有bug，或者我们进行迭代，就会涉及到版本更新，那就只需要修改开源库目录build.gradle配置中的版本号，其他配置保持不变，再次执行上传开源库命令就可以达到版本更新的目的。</li></ul><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">publish &#123;</span><br><span class="line">    userOrg = <span class="string">'maoqitian'</span><span class="comment">//bintray.com用户名</span></span><br><span class="line">    repoName = <span class="string">'maolibrary'</span>   <span class="comment">// bintray上仓库的名字</span></span><br><span class="line">    groupId = <span class="string">'com.mao'</span><span class="comment">//jcenter上的路径</span></span><br><span class="line">    artifactId = <span class="string">'flexibleflowlayout'</span><span class="comment">//项目名称</span></span><br><span class="line">    publishVersion = <span class="string">'2.0.0'</span><span class="comment">//版本号</span></span><br><span class="line">    <span class="keyword">desc</span> = <span class="string">'Make flow layouts simpler'</span><span class="comment">// 描述</span></span><br><span class="line">    website = <span class="string">'https://github.com/maoqitian/FlowLayout'</span><span class="comment">//一般填github 项目地址,一定是要有效的地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://blog.csdn.net/lmj623565791/article/details/51148825" target="_blank" rel="noopener">Android 快速发布开源项目到jcenter</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/maoqitian/MaoMdPhoto/raw/master/jcenter%20upload/logo.png&quot; alt=&quot;logo&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;平时撸代码避免不了在有些功能会使用到别人已经写好的轮子，别人的轮子开源库一般都已经上传了 jcenter仓库，我只需要比如 implementation ‘com.mao:xxxxxxx:1.0.0’一句话就能引入别人的开源库，这是怎么弄的呢？一般可以使用bintray-release插件和gradle-bintray-plugin插件，gradle-bintray-plugin插件不够简便（想了解可以看这篇文章&lt;a href=&quot;https://www.cnblogs.com/mingfeng002/p/10255486.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/mingfeng002/p/10255486.html&lt;/a&gt;），所以接下来我们就了解一下如何使用bintray-release插件将自己的开源库上传到jcenter。&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="development tool" scheme="https://www.maoqitian.com/categories/development-tool/"/>
    
    
      <category term="jcenter" scheme="https://www.maoqitian.com/tags/jcenter/"/>
    
  </entry>
  
  <entry>
    <title>Android 基本架构之MVP分析与实践</title>
    <link href="https://www.maoqitian.com/2019/08/30/AndroidMVP/"/>
    <id>https://www.maoqitian.com/2019/08/30/AndroidMVP/</id>
    <published>2019-08-30T12:27:22.000Z</published>
    <updated>2020-10-15T15:12:51.025Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>开发一个App，和起房子应该有异曲同工之处，起房子需要画好设计图纸，而我们开发App则需要先设计好App整个架构模式。目前Android一般有MVC、MVP和MVVM，本文则先来说说MVP架构。在了解MVP架构之前，有人可能会说，MVP架构是不是有点落后了，但是我想说，如果你公司有老项目，他就是用MVP架构写的，这时候我们MVP知识是不是就派上用场了；任何架构都有它存在的理由，学习架构的思想才是关键。MVP分别代表Model、View、Presenter三个英文字母，和传统的MVC 相比，C替换成了P。Presenter英文单词有主持人意思，也就是说Presenter是View 和 Model 的主持人，按照惯例我们先来看两张图。</p></blockquote><h1 id="MVC-MVP-架构对比图"><a href="#MVC-MVP-架构对比图" class="headerlink" title="MVC MVP 架构对比图"></a>MVC MVP 架构对比图</h1><h3 id="mvc"><a href="#mvc" class="headerlink" title="mvc"></a>mvc</h3><p><img src="https://raw.githubusercontent.com/maoqitian/MaoMdPhoto/master/MVP/mvc.jpg" alt="mvc"></p><h3 id="mvp"><a href="#mvp" class="headerlink" title="mvp"></a>mvp</h3><p><img src="https://raw.githubusercontent.com/maoqitian/MaoMdPhoto/master/MVP/MVP1.jpg" alt="mvp"><br><a id="more"></a></p><ul><li>通过以上两张图对比，MVC在Android中就是我们刚开始学习Android时输出Android代码的真实写照，Activity不仅负责显示View，它还是Controller，我们可以在Activity开始网络请求，请求完成更新UI，也可以在Activity中通过UI组件获取用户输入数据，然后执行网络请求再更新UI，这样一来，一个功能复杂的页面一个Activity三四千行代码是很常见的事情，这也会导致后面维护代码人来读你的Activity代码可能会直接崩溃，同时代码的耦合度也很高。</li><li>而我们再看MVP架构，这就会很清晰，它把MVC中的VC进行解耦，也就是说<strong>把Activity中的UI逻辑抽象成View 接口 ,把业务逻辑抽象成 presenter 接口, model 还是原来的model</strong>，这样其实就呼应了文章我们所说presenter主持人的意思，model 更新UI需要通过presenter，view 更新model数据也需要通过presenter，相当于presenter主持大局。</li><li>说了这么多，其实MVC和MVP的区别可以用一句话代替，那就是View能否直接操作Model，接下来我们就看看MVP架构如何在Android中实践。</li></ul><h1 id="Android-实现-mvp-架构"><a href="#Android-实现-mvp-架构" class="headerlink" title="Android 实现 mvp 架构"></a>Android 实现 mvp 架构</h1><h2 id="UI逻辑抽象成View接口"><a href="#UI逻辑抽象成View接口" class="headerlink" title="UI逻辑抽象成View接口"></a>UI逻辑抽象成View接口</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author maoqitian</span></span><br><span class="line"><span class="comment"> * @Description View 的基类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">BaseView</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 正常显示</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showNormal</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 显示错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showError</span>(<span class="params"></span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 正在加载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showLoading</span>(<span class="params"></span>)</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 显示错误信息</span></span><br><span class="line"><span class="comment">     * @param errorMsg 错误信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showErrorMsg</span>(<span class="params">String errorMsg</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="业务逻辑抽象成-Presenter-接口"><a href="#业务逻辑抽象成-Presenter-接口" class="headerlink" title="业务逻辑抽象成 Presenter 接口"></a>业务逻辑抽象成 Presenter 接口</h2><ul><li>抽象之前我们可以想一想，每个presenter都对应一个View 界面，所以我们需要一个方法来绑定对应的View，绑定的目的是为了方便我们在presenter中更新view，当界面销毁的时候也需要一个方法类解绑View。此外，界面肯定不止一个，并且肯定实现前面我们写的BaseView接口，我们用泛型代替，就有了如下BasePresenter 接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> maoqitian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> Presenter 基类接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AbstractBasePresenter</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">BaseView</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定View</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> view</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">attachView</span><span class="params">(T view)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解绑View</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">detachView</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="MVP工作流"><a href="#MVP工作流" class="headerlink" title="MVP工作流"></a>MVP工作流</h1><ul><li>前面我们已经抽象出了View、Presenter接口，接下来从结合文章开头MVP  architectural pattern图从用户打开App获取数据开始展现整体MVP工作流。</li></ul><h2 id="View-与-Presenter-结合"><a href="#View-与-Presenter-结合" class="headerlink" title="View 与 Presenter 结合"></a>View 与 Presenter 结合</h2><h3 id="View-获取Presenter对象"><a href="#View-获取Presenter对象" class="headerlink" title="View 获取Presenter对象"></a>View 获取Presenter对象</h3><ul><li>View 获取数据需要通过Presenter对象，view在Android 中一般代表Avtivity、或者Fragment。先创建Avtivity和Fragment抽象类类做基础封装。</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author maoqitian</span></span><br><span class="line"><span class="comment"> * @Description activity基类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void onCreate(<span class="meta">@Nullable</span> <span class="type">Bundle</span> savedInstanceState) &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(getLayout());</span><br><span class="line">        onViewCreated();</span><br><span class="line">        initToolbar();</span><br><span class="line">        initEventAndData();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * view 的创建 留给子类实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> void onViewCreated();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化 toolbar</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> void initToolbar();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化数据留给子类实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> void initEventAndData();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取布局对象 留给子类实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> int getLayout();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>接着我们实现MVP Activity基类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> maoqitian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> MVP BaseActivity 基类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span>  <span class="title">BaseActivity</span> &lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">AbstractBasePresenter</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractActivity</span> <span class="keyword">implements</span> <span class="title">BaseView</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> T mPresenter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        mPresenter = createPresenter();</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onViewCreated</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mPresenter != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mPresenter.attachView(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        <span class="keyword">if</span>(mPresenter != <span class="keyword">null</span>)&#123;</span><br><span class="line">            mPresenter.detachView();</span><br><span class="line">            mPresenter = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建Presenter</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> T <span class="title">createPresenter</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showNormal</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showError</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showLoading</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showErrorMsg</span><span class="params">(String errorMsg)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>到此，只要我们界面继承BaseActivity，并且实现createPresenter方法，我们就可以很直接在View中通过Presenter来获获取数据，如何获取呢？接着往下看。</li></ul><h3 id="Presenter-获取View-对象"><a href="#Presenter-获取View-对象" class="headerlink" title="Presenter 获取View 对象"></a>Presenter 获取View 对象</h3><ul><li>现在我们创建一个Presenter基类将其与View结合，为后续步骤做准备，注意我们RxBasePresenter基类构造方法中需要传入DataClient，该类其实就可以概括代表Module。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> maoqitian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 基于Presenter封装 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RxBasePresenter</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">BaseView</span>&gt; <span class="keyword">implements</span> <span class="title">AbstractBasePresenter</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> T mView;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> DataClient mDataClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RxBasePresenter</span><span class="params">(DataClient dataClient)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mDataClient=dataClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attachView</span><span class="params">(T view)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.mView=view;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detachView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mView = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Presenter-与-View-之间连接"><a href="#Presenter-与-View-之间连接" class="headerlink" title="Presenter 与 View 之间连接"></a>Presenter 与 View 之间连接</h3><ul><li>当我们创建View 对应Presenter让其继承 RxBasePresenter，则 Presenter便可以执行Updates view，如何操作呢？我们可以通过接口来进行数据获取与显示的扩展。以下举个例子</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public<span class="built_in"> interface </span>MainContract &#123;</span><br><span class="line"></span><br><span class="line">   <span class="built_in"> interface </span>MainView extends BaseView&#123;</span><br><span class="line">        void showMainData();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="built_in"> interface </span>MainActivityPresenter extends AbstractBasePresenter&lt;MainView&gt;&#123;</span><br><span class="line">        void getMainData();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>至此，我们基本MVP架构其实就已经搭建完成，我们来看看使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> maoqitian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> MainPresenter （Presenter）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainPresenter</span> <span class="keyword">extends</span> <span class="title">RxBasePresenter</span>&lt;<span class="title">MainContract</span>.<span class="title">MainView</span>&gt; <span class="keyword">implements</span> <span class="title">MainContract</span>.<span class="title">MainActivityPresenter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//（Model）</span></span><br><span class="line">    <span class="keyword">private</span> DataClient mDataClient;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainPresenter</span><span class="params">(DataClient dataClient)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(dataClient);</span><br><span class="line">        <span class="keyword">this</span>.mDataClient = dataClient;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attachView</span><span class="params">(MainContract.MainView view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.attachView(view);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取数据</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMainData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//mDataClient 网络请求获取数据</span></span><br><span class="line">        .......</span><br><span class="line">        <span class="comment">// 数据获取成功展示数据</span></span><br><span class="line">        mView.showMainData();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> maoqitian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> MainActivity （View）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span>&lt;<span class="title">MainPresenter</span>&gt;<span class="keyword">implements</span> <span class="title">MainContract</span>.<span class="title">MainView</span></span>&#123;</span><br><span class="line">    ..........</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> MainPresenter <span class="title">createPresenter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MainPresenter(<span class="keyword">new</span> DataClient());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initEventAndData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mPresenter.getMainData();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showMainData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//显示数据</span></span><br><span class="line">    &#125;   </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过以上示例代码，再次对比文章开头的Android MVP  architectural pattern图，从用户打开App获取数据开始展现整体MVP工作流已经走完。</li></ul><h3 id="谷歌官方示例MVP-demo"><a href="#谷歌官方示例MVP-demo" class="headerlink" title="谷歌官方示例MVP demo"></a>谷歌官方示例MVP demo</h3><ul><li>当然上面只是简单的讲解了在Android中搭建基本MVP架构，其实谷歌官方也给我提供了MVP示例代码，具体代码可以自行去了解。</li><li><a href="https://github.com/googlesamples/android-architecture/tree/todo-mvp/" target="_blank" rel="noopener">谷歌官方MVP示例Demo</a></li></ul><h1 id="使用dagger2优化MVP-架构"><a href="#使用dagger2优化MVP-架构" class="headerlink" title="使用dagger2优化MVP 架构"></a>使用dagger2优化MVP 架构</h1><ul><li>前面我们大致搭建了一个基础的MVP架构，每个Presnter需要我们在View 中去创建，创建Presnter的时候还需要传入Model，这就说明他们之间的解耦还不够。这里我们换一种思路，在原有基础，不管是DataClient（Model）还是对应的Presnter都可以直接提供对应的对象，然后对应的类创建我们就将其注入，这样不就省去了对象创建，Model、Presnter、View 之间耦合度就进一步降低，如何实现？还是强大的谷歌爸爸给我们提供了方案，使用<a href="https://github.com/google/dagger" target="_blank" rel="noopener"><strong>Dagger2</strong></a>(Dagger是一个完全静态的编译时依赖注入框架，适用于Java和Android)。</li></ul><h2 id="项目添加对应dagger依赖"><a href="#项目添加对应dagger依赖" class="headerlink" title="项目添加对应dagger依赖"></a>项目添加对应dagger依赖</h2><ul><li>使用dagger对应版本为2.22.1<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  <span class="keyword">implementation</span> <span class="string">'com.google.dagger:dagger:2.22.1'</span></span><br><span class="line">  annotationProcessor <span class="string">'com.google.dagger:dagger-compiler:2.22.1'</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="keyword">implementation</span> <span class="string">'com.google.dagger:dagger-android:2.22.1'</span></span><br><span class="line">  <span class="keyword">implementation</span> <span class="string">'com.google.dagger:dagger-android-support:2.22.1'</span></span><br><span class="line">  annotationProcessor <span class="string">'com.google.dagger:dagger-android-processor:2.22.1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="改造Presnter类"><a href="#改造Presnter类" class="headerlink" title="改造Presnter类"></a>改造Presnter类</h2><ul><li>这里我们以上面例子中MainPresenter为例，在其构造方法添加@Inject注解，表明Dagger2 可以从这获取对应MainPresenter实例，注意构造方法中需要DataClient对象，这里也使用Dagger来提供对象（稍后再说）<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainPresenter</span> <span class="keyword">extends</span> <span class="title">RxBasePresenter&lt;MainContract</span>.<span class="title">MainView&gt;</span> <span class="title">implements</span> <span class="title">MainContract</span>.<span class="title">MainActivityPresenter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">DataClient</span> mDataClient;</span><br><span class="line">    <span class="comment">//@Inject注解表示Dagger2 可以从这获取Presenter 实例</span></span><br><span class="line">    <span class="meta">@Inject</span> </span><br><span class="line">    public <span class="type">MainPresenter</span>(<span class="type">DataClient</span> dataClient) &#123;</span><br><span class="line">        <span class="keyword">super</span>(dataClient);</span><br><span class="line">        <span class="keyword">this</span>.mDataClient = dataClient;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="改造View"><a href="#改造View" class="headerlink" title="改造View"></a>改造View</h2><ul><li>View 中结合 Dagger2 本应该继承 DaggerAppCompatActivity，但是我们基类为AbstractActivity，查看DaggerAppCompatActivity源码，直接手动实现DaggerAppCompatActivity中代码。<figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author maoqitian</span></span><br><span class="line"><span class="comment"> * @Description MVP BaseActivity 基类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span>  <span class="title">BaseActivity</span> <span class="title">&lt;T</span> <span class="keyword">extends</span> <span class="title">AbstractBasePresenter&gt;</span> <span class="keyword">extends</span> <span class="title">AbstractSimpleActivity</span> <span class="title">implements</span> <span class="title">BaseView</span>, <span class="title">HasFragmentInjector</span>,<span class="title">HasSupportFragmentInjector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Presenter 对象注入 (注意不能使用 private )</span></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">T</span> mPresenter;</span><br><span class="line">    <span class="comment">//手动实现DaggerAppCompatActivity功能</span></span><br><span class="line">    <span class="meta">@Inject</span> <span class="type">DispatchingAndroidInjector</span>&lt;<span class="type">Fragment</span>&gt; supportFragmentInjector;</span><br><span class="line">    <span class="meta">@Inject</span> <span class="type">DispatchingAndroidInjector</span>&lt;android.app.<span class="type">Fragment</span>&gt; frameworkFragmentInjector;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> void onCreate(<span class="meta">@Nullable</span> <span class="type">Bundle</span> savedInstanceState) &#123;</span><br><span class="line">        <span class="comment">//必须在super.onCreate之前调用AndroidInjection.inject</span></span><br><span class="line">        <span class="type">AndroidInjection</span>.inject(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">    public <span class="type">AndroidInjector</span>&lt;<span class="type">Fragment</span>&gt; supportFragmentInjector() &#123;</span><br><span class="line">        <span class="keyword">return</span> supportFragmentInjector;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public <span class="type">AndroidInjector</span>&lt;android.app.<span class="type">Fragment</span>&gt; fragmentInjector() &#123;</span><br><span class="line">        <span class="keyword">return</span> frameworkFragmentInjector;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="添加Dagger-Module和Component"><a href="#添加Dagger-Module和Component" class="headerlink" title="添加Dagger Module和Component"></a>添加Dagger Module和Component</h2><h3 id="创建MainActivityModule"><a href="#创建MainActivityModule" class="headerlink" title="创建MainActivityModule"></a>创建MainActivityModule</h3><ul><li>抽象类MainActivityModule加入@Module注解，并添加返回我们对应MainActivityPresenter接口的抽象方法，@Binds注解就可以帮我们把MainActivityPresenter接口绑定到MainPresenter上。<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author maoqitian</span></span><br><span class="line"><span class="comment"> * @Description MainActivity 可以提供的注入对象Module</span></span><br><span class="line"><span class="comment"> * @Time 2019/3/27 0027 23:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable">@Module</span></span><br><span class="line">public abstract class MainActivityModule &#123;</span><br><span class="line">    <span class="variable">@ActivityScope</span></span><br><span class="line">    <span class="variable">@Binds</span></span><br><span class="line">    abstract MainContract.MainActivityPresenter bindPresenter(MainPresenter presenter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="创建用于生成Activity注入器的Module类"><a href="#创建用于生成Activity注入器的Module类" class="headerlink" title="创建用于生成Activity注入器的Module类"></a>创建用于生成Activity注入器的Module类</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author maoqitian</span></span><br><span class="line"><span class="comment"> * @Description 用于生成Activity注入器的Module，使用@ContributesAndroidInjector注解并指定modules为</span></span><br><span class="line"><span class="comment"> * @Time 2019/4/14 0014 14:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable">@Module</span></span><br><span class="line">public abstract class ActivityBindingModule &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="variable">@ActivityScope</span></span><br><span class="line">    <span class="variable">@ContributesAndroidInjector</span>(modules = MainActivityModule.class)</span><br><span class="line">    abstract MainActivity contributeMainActivity();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建提供我们需要对象的Module类"><a href="#创建提供我们需要对象的Module类" class="headerlink" title="创建提供我们需要对象的Module类"></a>创建提供我们需要对象的Module类</h3><ul><li>与前文对应，这里我们提供了对应了DataClient对象，也就是MVP中的Model，在注入Presenter的时候将其一起注入。<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Module</span></span><br><span class="line">public class MyAppModule &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">@Provides</span></span><br><span class="line">    <span class="variable">@Singleton</span></span><br><span class="line">    public DataClient providerDataClient()&#123;</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">new</span> <span class="selector-tag">DataClient</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="使用-Component注解创建AppCompontent接口类"><a href="#使用-Component注解创建AppCompontent接口类" class="headerlink" title="使用@Component注解创建AppCompontent接口类"></a>使用@Component注解创建AppCompontent接口类</h3><ul><li>Dagger会帮我们自动生成DaggerAppComponent类，继承自AndroidInjector并指定我们自己的Application类，指定AndroidSupportInjectionModule帮助把Android中四大组件以及Fragment进行绑定，@Singleton注解指定单例<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Singleton</span></span><br><span class="line"><span class="variable">@Component</span>(modules = &#123;</span><br><span class="line">        MyAppModule.class,</span><br><span class="line">        ActivityBindingModule.class,</span><br><span class="line">        AndroidSupportInjectionModule.class</span><br><span class="line">&#125;)</span><br><span class="line">public interface AppComponent extends AndroidInjector&lt;MyApplication&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="改造Application类继承自DaggerApplication"><a href="#改造Application类继承自DaggerApplication" class="headerlink" title="改造Application类继承自DaggerApplication"></a>改造Application类继承自DaggerApplication</h3><ul><li><p>按照如下改造MyApplication之后我们从新编译编译一下代码，如果编译通过，dagger就会帮我们生成对应DaggerAppComponent.create()方法，将其返回在applicationInjector()方法中。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">DaggerApplication</span> </span>&#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">AndroidInjector</span>&lt;? <span class="keyword">extends</span> <span class="type">DaggerApplication</span>&gt; applicationInjector() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">DaggerAppComponent</span>.create();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>项目编译通过dagger会在build目录生成对应对象注入类，具体源码以后再出文章分析，这里就先告一段落了。到此，使用dagger2优化MVP 架构基本完成了，但是还有其他细节这里没有提及，比如每个Presenter之间该如何通信，可以使用EventBus，也可以Rxbus等等，具体细节可以看接下架构实践中我写的开源项目的代码。</p></li></ul><p><img src="https://raw.githubusercontent.com/maoqitian/MaoMdPhoto/master/MVP/buildgenerated.png" height="400" width="350"></p><h1 id="架构实践"><a href="#架构实践" class="headerlink" title="架构实践"></a>架构实践</h1><h2 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h2><ul><li>通过前面对MVP架构分析介绍，接下来我给大家推荐我的一个开源项目，<strong>这是一款有较好用户体验的开源玩Android客户端。提供丰富完整的功能，更好的体验，旨在更好的浏览<a href="https://www.wanandroid.com/网站内容，更好的在手机上进行学习。项目使用Retrofit2" target="_blank" rel="noopener">https://www.wanandroid.com/网站内容，更好的在手机上进行学习。项目使用Retrofit2</a> + RxJava2 + Dagger2 +MVP+RxBus架构，尽量使用Material Design控件进行开发。</strong></li></ul><h2 id="项目架构图"><a href="#项目架构图" class="headerlink" title="项目架构图"></a>项目架构图</h2><p><img src="https://raw.githubusercontent.com/maoqitian/MaoMdPhoto/master/WanAndroid/MVP-WanAndroid-Architecture1.jpg" alt="MVP-WanAndroid-Architecture"></p><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><blockquote><p><a href="https://github.com/maoqitian/MaoWanAndoidClient" target="_blank" rel="noopener">https://github.com/maoqitian/MaoWanAndoidClient</a></p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>以前所说的知识一种MVP架构的写法，我们也可以根据自己理解写出不一样的MVP，其实MVP架构看似不错，但也还是会有缺点，那就是写一个页面会产生很多个类，虽然结构清晰，但是要写的代码变多了，凡事都会有利弊。如果你不想自己写这么多的类，github上也有大神写好了轮子(<a href="https://github.com/JessYanCoding/MVPArms" target="_blank" rel="noopener">MVPArms</a>)专门帮我们生成MVP架构的框架，但是用框架生成代码总归是别人的，只有自己撸一遍，把逻辑流程梳理清楚才会变成自己的东西，才会成长。文章中如果有错误，请大家给我提出来，大家一起学习进步，如果觉得我的文章给予你帮助，也请给我一个喜欢和关注，同时也欢迎访问我的<a href="https://www.maoqitian.com"><strong>个人博客</strong></a>。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;开发一个App，和起房子应该有异曲同工之处，起房子需要画好设计图纸，而我们开发App则需要先设计好App整个架构模式。目前Android一般有MVC、MVP和MVVM，本文则先来说说MVP架构。在了解MVP架构之前，有人可能会说，MVP架构是不是有点落后了，但是我想说，如果你公司有老项目，他就是用MVP架构写的，这时候我们MVP知识是不是就派上用场了；任何架构都有它存在的理由，学习架构的思想才是关键。MVP分别代表Model、View、Presenter三个英文字母，和传统的MVC 相比，C替换成了P。Presenter英文单词有主持人意思，也就是说Presenter是View 和 Model 的主持人，按照惯例我们先来看两张图。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;MVC-MVP-架构对比图&quot;&gt;&lt;a href=&quot;#MVC-MVP-架构对比图&quot; class=&quot;headerlink&quot; title=&quot;MVC MVP 架构对比图&quot;&gt;&lt;/a&gt;MVC MVP 架构对比图&lt;/h1&gt;&lt;h3 id=&quot;mvc&quot;&gt;&lt;a href=&quot;#mvc&quot; class=&quot;headerlink&quot; title=&quot;mvc&quot;&gt;&lt;/a&gt;mvc&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/maoqitian/MaoMdPhoto/master/MVP/mvc.jpg&quot; alt=&quot;mvc&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;mvp&quot;&gt;&lt;a href=&quot;#mvp&quot; class=&quot;headerlink&quot; title=&quot;mvp&quot;&gt;&lt;/a&gt;mvp&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/maoqitian/MaoMdPhoto/master/MVP/MVP1.jpg&quot; alt=&quot;mvp&quot;&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android架构" scheme="https://www.maoqitian.com/categories/Android%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="MVP" scheme="https://www.maoqitian.com/tags/MVP/"/>
    
      <category term="Dagger2" scheme="https://www.maoqitian.com/tags/Dagger2/"/>
    
  </entry>
  
  <entry>
    <title>撸一个既能学习Android知识又能提升技术的App</title>
    <link href="https://www.maoqitian.com/2019/08/27/WanAndroid/"/>
    <id>https://www.maoqitian.com/2019/08/27/WanAndroid/</id>
    <published>2019-08-27T15:00:58.000Z</published>
    <updated>2020-10-15T15:15:23.134Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/license-Apache%202-green.svg" alt="License"></a><img src="https://img.shields.io/badge/Android-1.0.5-blue.svg"></p><blockquote><p>项目地址 <a href="https://github.com/maoqitian/MaoWanAndoidClient" target="_blank" rel="noopener">https://github.com/maoqitian/MaoWanAndoidClient</a></p></blockquote><h1 id="MaoWanAndoidClient"><a href="#MaoWanAndoidClient" class="headerlink" title="MaoWanAndoidClient"></a>MaoWanAndoidClient</h1><h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><ul><li>首先感谢<a href="https://github.com/hongyangAndroid" target="_blank" rel="noopener"><strong>鸿洋</strong></a>大佬提供的<a href="https://www.wanandroid.com/blog/show/2" target="_blank" rel="noopener">玩Android开放API</a>，这是一款有较好用户体验的开源<strong>玩Android客户端。</strong>提供丰富完整的功能，更好的体验，旨在更好的浏览<a href="https://www.wanandroid.com/" target="_blank" rel="noopener">https://www.wanandroid.com/</a>网站内容，更好的在手机上进行学习。项目使用<strong>Retrofit2 + RxJava2 + Dagger2 +MVP+RxBus</strong>架构，尽量使用<strong>Material Design</strong>控件进行开发。如果觉得本项目对你有帮助，希望您给我一个点一个<strong>Star</strong>. </li><li>下载本项目建议clone master分支,clone 本项目之后需编译生成dagger对应文件。<h2 id="项目基本架构"><a href="#项目基本架构" class="headerlink" title="项目基本架构"></a>项目基本架构</h2><img src="https://raw.githubusercontent.com/maoqitian/MaoMdPhoto/master/WanAndroid/MVP-WanAndroid-Architecture1.jpg" alt="MVP-WanAndroid-Architecture"><a id="more"></a><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><a href="https://www.wanandroid.com/blog/show/2" target="_blank" rel="noopener"><strong>玩Android开放API</strong></a><h2 id="项目gif、截图展示"><a href="#项目gif、截图展示" class="headerlink" title="项目gif、截图展示"></a>项目gif、截图展示</h2><img src="https://github.com/maoqitian/MaoWanAndoidClient/raw/master/preview/show.gif" height="300" width="170"><br><img src="https://raw.githubusercontent.com/maoqitian/MaoWanAndoidClient/dev/preview/usercenter.gif" height="300" width="170"><br><img src="https://github.com/maoqitian/MaoWanAndoidClient/raw/master/preview/homePage.jpg" height="300" width="170"><br><img src="https://github.com/maoqitian/MaoWanAndoidClient/raw/master/preview/knowledge.jpg" height="300" width="170"><br><img src="https://github.com/maoqitian/MaoWanAndoidClient/raw/master/preview/search.jpg" height="300" width="170"><br><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/WanAndroid/navigation.jpg" height="300" width="170"></li></ul><p><img src="https://github.com/maoqitian/MaoWanAndoidClient/raw/master/preview/project.jpg" height="300" width="170"><br><img src="https://github.com/maoqitian/MaoWanAndoidClient/raw/master/preview/setting.jpg" height="300" width="170"><br><img src="https://github.com/maoqitian/MaoWanAndoidClient/raw/master/preview/officialA.jpg" height="300" width="170"><br><img src="https://github.com/maoqitian/MaoWanAndoidClient/raw/master/preview/commonWeb.jpg" height="300" width="170"><br><img src="https://github.com/maoqitian/MaoWanAndoidClient/raw/master/preview/collect.jpg" height="300" width="170"></p><p><img src="https://raw.githubusercontent.com/maoqitian/MaoMdPhoto/master/WanAndroid/newdawer.jpg" height="300" width="170"><br><img src="https://github.com/maoqitian/MaoWanAndoidClient/raw/master/preview/login.jpg" height="300" width="170"><br><img src="https://github.com/maoqitian/MaoWanAndoidClient/raw/master/preview/loginout.jpg" height="300" width="170"><br><img src="https://github.com/maoqitian/MaoWanAndoidClient/raw/master/preview/webviewPage.jpg" height="300" width="170"><br><img src="https://github.com/maoqitian/MaoWanAndoidClient/raw/master/preview/homeDark.jpg" height="300" width="170"></p><p><img src="https://github.com/maoqitian/MaoWanAndoidClient/raw/master/preview/projectDark.jpg" height="300" width="170"><br><img src="https://github.com/maoqitian/MaoWanAndoidClient/raw/master/preview/searchDark.jpg" height="300" width="170"><br><img src="https://github.com/maoqitian/MaoWanAndoidClient/raw/master/preview/knowledgeDark.jpg" height="300" width="170"></p><h2 id="项目功能"><a href="#项目功能" class="headerlink" title="项目功能"></a>项目功能</h2><h3 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h3><ul><li>首页文章列表</li><li>首页banner</li><li>常用网站</li><li>搜索热词（包含在搜索界面）</li><li>置顶文章</li><li>最新项目tab (首页的第二个tab)</li></ul><h3 id="知识体系"><a href="#知识体系" class="headerlink" title="知识体系"></a>知识体系</h3><ul><li>体系数据</li><li>知识体系下的文章</li></ul><h3 id="公众号"><a href="#公众号" class="headerlink" title="公众号"></a>公众号</h3><ul><li>获取公众号列表</li><li>查看某个公众号历史数据</li></ul><h3 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h3><ul><li>导航数据</li></ul><h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><ul><li>项目分类</li><li>项目列表数据</li></ul><h3 id="登录与注册"><a href="#登录与注册" class="headerlink" title="登录与注册"></a>登录与注册</h3><ul><li>登录、注册功能</li></ul><h3 id="收藏"><a href="#收藏" class="headerlink" title="收藏"></a>收藏</h3><ul><li>收藏文章列表</li><li>收藏站内文章</li><li>收藏站外文章</li><li>取消收藏</li><li>收藏网站列表</li><li>收藏网址</li><li>编辑收藏网站</li><li>删除收藏网站</li></ul><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><ul><li>首页文章搜索</li><li>在某个公众号中搜索历史文章</li></ul><h3 id="积分"><a href="#积分" class="headerlink" title="积分"></a>积分</h3><ul><li>积分排行榜</li><li>获取个人积分</li><li>获取个人积分获取列表</li></ul><h3 id="广场"><a href="#广场" class="headerlink" title="广场"></a>广场</h3><ul><li>广场列表数据</li><li>分享人对应列表数据</li><li>自己的分享的文章列表（个人中心）</li><li>删除自己分享的文章（个人中心）</li><li>分享文章</li></ul><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><ul><li>夜间模式</li><li>清除缓存</li><li>版本信息</li><li>退出登录</li></ul><h3 id="个人中心"><a href="#个人中心" class="headerlink" title="个人中心"></a>个人中心</h3><ul><li>点击头像进入个人中心，仿B站个人中心效果</li></ul><h1 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h1><h2 id="参考项目"><a href="#参考项目" class="headerlink" title="参考项目"></a>参考项目</h2><ul><li><a href="https://github.com/codeestX/GeekNews" target="_blank" rel="noopener">GeekNews</a></li></ul><h2 id="使用的第三方库"><a href="#使用的第三方库" class="headerlink" title="使用的第三方库"></a>使用的第三方库</h2><table><thead><tr><th>第三方库</th><th>功能</th></tr></thead><tbody><tr><td><a href="https://github.com/google/dagger" target="_blank" rel="noopener">Dagger2</a></td><td>依赖注入</td></tr><tr><td><a href="https://github.com/square/retrofit" target="_blank" rel="noopener">Retrofit2</a></td><td>网络</td></tr><tr><td><a href="https://github.com/square/okhttp" target="_blank" rel="noopener">OKHttp3</a></td><td>网络</td></tr><tr><td><a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="noopener">RxJava2</a></td><td>异步事件处理</td></tr><tr><td><a href="https://github.com/greenrobot/greenDAO" target="_blank" rel="noopener">greenDAO</a></td><td>数据库</td></tr><tr><td><a href="https://github.com/scwang90/SmartRefreshLayout" target="_blank" rel="noopener">SmartRefreshLayout</a></td><td>下拉刷新</td></tr><tr><td><a href="https://github.com/bumptech/glide" target="_blank" rel="noopener">Glide4</a></td><td>图片加载</td></tr><tr><td><a href="https://github.com/saiwu-bigkoo/Android-ConvenientBanner" target="_blank" rel="noopener">Android-ConvenientBanner</a></td><td>Banner</td></tr><tr><td><a href="https://github.com/CymChad/BaseRecyclerViewAdapterHelper" target="_blank" rel="noopener">BaseRecyclerViewAdapterHelper</a></td><td>数据适配器帮助类</td></tr><tr><td><a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="noopener">butterknife</a></td><td>控件绑定</td></tr><tr><td><a href="https://github.com/maoqitian/FlowLayout" target="_blank" rel="noopener">FlowLayout</a></td><td>tag 显示</td></tr><tr><td><a href="https://note.youdao.com/" target="_blank" rel="noopener">verticalTabLayout</a></td><td>纵向导航</td></tr></tbody></table><h2 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h2><ul><li><a href="https://www.iconfont.cn/collections/index" target="_blank" rel="noopener">阿里巴巴矢量图标库</a></li><li><a href="https://fontawesome.com/icons?d=gallery" target="_blank" rel="noopener">fontawesome</a></li></ul><h1 id="版本下载体验"><a href="#版本下载体验" class="headerlink" title="版本下载体验"></a>版本下载体验</h1><ul><li><a href="https://github.com/maoqitian/MaoWanAndoidClient/releases" target="_blank" rel="noopener"><strong>历史版本下载地址</strong></a><h3 id="最新版本下载二维码"><a href="#最新版本下载二维码" class="headerlink" title="最新版本下载二维码"></a><strong>最新版本下载二维码</strong></h3></li><li>可以手机浏览器输入以下地址下载 <a href="https://fir.im/kgy2" target="_blank" rel="noopener">https://fir.im/kgy2</a><br><img src="https://raw.githubusercontent.com/maoqitian/MaoMdPhoto/master/WanAndroid/downloadApk-v1.0.5.png" alt="downloadApk"></li></ul><h1 id="版本更新日志"><a href="#版本更新日志" class="headerlink" title="版本更新日志"></a>版本更新日志</h1><h2 id="v1-0-5-2019-10-12"><a href="#v1-0-5-2019-10-12" class="headerlink" title="v1.0.5 (2019/10/12)"></a>v1.0.5 (2019/10/12)</h2><h3 id="新增广场模块"><a href="#新增广场模块" class="headerlink" title="新增广场模块"></a>新增广场模块</h3><ul><li>广场列表数据</li><li>分享人对应列表数据</li><li>自己的分享的文章列表（个人中心）</li><li>删除自己分享的文章（个人中心）</li><li>分享文章</li><li>个人中心页面支持加载更多</li><li>修复上个版本存在的bug</li></ul><h2 id="v1-0-4-2019-09-18"><a href="#v1-0-4-2019-09-18" class="headerlink" title="v1.0.4 (2019/09/18)"></a>v1.0.4 (2019/09/18)</h2><h3 id="新增积分排行榜模块"><a href="#新增积分排行榜模块" class="headerlink" title="新增积分排行榜模块"></a>新增积分排行榜模块</h3><ul><li>添加积分排行榜入口，并完成数据展示页面，支持下拉刷新，加载更多</li><li>添加关于我们页面</li><li>修复上个版本存在的bug</li></ul><h2 id="v1-0-3-2019-09-09"><a href="#v1-0-3-2019-09-09" class="headerlink" title="v1.0.3 (2019/09/09)"></a>v1.0.3 (2019/09/09)</h2><h3 id="新增个人中心模块"><a href="#新增个人中心模块" class="headerlink" title="新增个人中心模块"></a>新增个人中心模块</h3><ul><li>点击头像进入个人中心，仿B站个人中心效果</li><li>文章浏览页面增加收藏功能</li><li>修复上个版本存在的bug</li></ul><h2 id="v1-0-2-2019-09-03"><a href="#v1-0-2-2019-09-03" class="headerlink" title="v1.0.2 (2019/09/03)"></a>v1.0.2 (2019/09/03)</h2><h3 id="新增我的积分模块"><a href="#新增我的积分模块" class="headerlink" title="新增我的积分模块"></a>新增我的积分模块</h3><ul><li>获取个人积分</li><li>获取个人积分获取列表</li><li>登录之后侧拉Drawer 显示等级和积分</li><li>修复上个版本存在的bug</li></ul><h2 id="v1-0-1-2019-08-29"><a href="#v1-0-1-2019-08-29" class="headerlink" title="v1.0.1 (2019/08/29)"></a>v1.0.1 (2019/08/29)</h2><h3 id="完善收藏模块功能"><a href="#完善收藏模块功能" class="headerlink" title="完善收藏模块功能"></a>完善收藏模块功能</h3><ul><li>收藏站外文章</li><li>收藏网站列表</li><li>收藏网址</li><li>编辑收藏网站</li><li>删除收藏网站</li><li>修复上个版本存在的bug</li></ul><h2 id="v1-0-0-2019-08-15"><a href="#v1-0-0-2019-08-15" class="headerlink" title="v1.0.0 (2019/08/15)"></a>v1.0.0 (2019/08/15)</h2><ul><li>项目第一个版本， 完成WanAndroid基本功能</li></ul><h1 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h1><p>项目中的 API 均来自于 <a href="https://www.wanandroid.com/" target="_blank" rel="noopener">wanandroid.com</a> 网站，纯属学习交流使用，不得用于商业用途。</p><h1 id="License"><a href="#License" class="headerlink" title="License"></a>License</h1><p>Copyright 2019 maoqitian</p><p>Licensed under the Apache License, Version 2.0 (the “License”);<br>you may not use this file except in compliance with the License.<br>You may obtain a copy of the License at</p><p>   <a href="http://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="noopener">http://www.apache.org/licenses/LICENSE-2.0</a></p><p>Unless required by applicable law or agreed to in writing, software<br>distributed under the License is distributed on an “AS IS” BASIS,<br>WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br>See the License for the specific language governing permissions and<br>limitations under the License.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.apache.org/licenses/LICENSE-2.0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/license-Apache%202-green.svg&quot; alt=&quot;License&quot;&gt;&lt;/a&gt;&lt;img src=&quot;https://img.shields.io/badge/Android-1.0.5-blue.svg&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;项目地址 &lt;a href=&quot;https://github.com/maoqitian/MaoWanAndoidClient&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/maoqitian/MaoWanAndoidClient&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;MaoWanAndoidClient&quot;&gt;&lt;a href=&quot;#MaoWanAndoidClient&quot; class=&quot;headerlink&quot; title=&quot;MaoWanAndoidClient&quot;&gt;&lt;/a&gt;MaoWanAndoidClient&lt;/h1&gt;&lt;h2 id=&quot;项目简介&quot;&gt;&lt;a href=&quot;#项目简介&quot; class=&quot;headerlink&quot; title=&quot;项目简介&quot;&gt;&lt;/a&gt;项目简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;首先感谢&lt;a href=&quot;https://github.com/hongyangAndroid&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;鸿洋&lt;/strong&gt;&lt;/a&gt;大佬提供的&lt;a href=&quot;https://www.wanandroid.com/blog/show/2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;玩Android开放API&lt;/a&gt;，这是一款有较好用户体验的开源&lt;strong&gt;玩Android客户端。&lt;/strong&gt;提供丰富完整的功能，更好的体验，旨在更好的浏览&lt;a href=&quot;https://www.wanandroid.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.wanandroid.com/&lt;/a&gt;网站内容，更好的在手机上进行学习。项目使用&lt;strong&gt;Retrofit2 + RxJava2 + Dagger2 +MVP+RxBus&lt;/strong&gt;架构，尽量使用&lt;strong&gt;Material Design&lt;/strong&gt;控件进行开发。如果觉得本项目对你有帮助，希望您给我一个点一个&lt;strong&gt;Star&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;下载本项目建议clone master分支,clone 本项目之后需编译生成dagger对应文件。&lt;h2 id=&quot;项目基本架构&quot;&gt;&lt;a href=&quot;#项目基本架构&quot; class=&quot;headerlink&quot; title=&quot;项目基本架构&quot;&gt;&lt;/a&gt;项目基本架构&lt;/h2&gt;&lt;img src=&quot;https://raw.githubusercontent.com/maoqitian/MaoMdPhoto/master/WanAndroid/MVP-WanAndroid-Architecture1.jpg&quot; alt=&quot;MVP-WanAndroid-Architecture&quot;&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="APP" scheme="https://www.maoqitian.com/categories/APP/"/>
    
    
      <category term="MVP" scheme="https://www.maoqitian.com/tags/MVP/"/>
    
      <category term="Dagger2" scheme="https://www.maoqitian.com/tags/Dagger2/"/>
    
      <category term="App" scheme="https://www.maoqitian.com/tags/App/"/>
    
      <category term="Retrofit2" scheme="https://www.maoqitian.com/tags/Retrofit2/"/>
    
      <category term="RxJava2" scheme="https://www.maoqitian.com/tags/RxJava2/"/>
    
  </entry>
  
  <entry>
    <title>Kubeadm 部署 Kubernetes 1.14.2 集群</title>
    <link href="https://www.maoqitian.com/2019/07/31/Kubernetes/"/>
    <id>https://www.maoqitian.com/2019/07/31/Kubernetes/</id>
    <published>2019-07-31T07:47:05.000Z</published>
    <updated>2020-10-15T14:26:43.687Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Kubernetes/kubernetes-logo.png" alt="kubernetes-logo"></p><blockquote><p>kubernetes来源于希腊语，意为舵手或领航员，从k8s的logo也能看出这个船舵图标与其名称对应。而我们常说的k8s中的8代表的就是ubernete这个八个字符。这里引用k8s中文社区文档对k8s的描述：<strong>Kubernetes是一个开源的，用于管理云平台中多个主机上的容器化的应用，Kubernetes的目标是让部署容器化的应用简单并且高效（powerful）,Kubernetes提供了应用部署，规划，更新，维护的一种机制。</strong><br><a id="more"></a></p></blockquote><h1 id="环境、主从节点规划"><a href="#环境、主从节点规划" class="headerlink" title="环境、主从节点规划"></a>环境、主从节点规划</h1><h2 id="各个节点规划"><a href="#各个节点规划" class="headerlink" title="各个节点规划"></a>各个节点规划</h2><table><thead><tr><th>IP地址</th><th>角色</th><th>服务器系统</th></tr></thead><tbody><tr><td>172.31.76.16</td><td>k8s从节点</td><td>CentOS 7.6</td></tr><tr><td>172.31.76.17</td><td>k8s从节点</td><td>CentOS 7.6</td></tr><tr><td>172.31.76.18</td><td>k8s主节点</td><td>CentOS 7.6</td></tr></tbody></table><h2 id="每个节点软件版本"><a href="#每个节点软件版本" class="headerlink" title="每个节点软件版本"></a>每个节点软件版本</h2><table><thead><tr><th>软件名称</th><th>版本</th><th>作用</th></tr></thead><tbody><tr><td>Docker</td><td>18.09.6</td><td>容器</td></tr><tr><td>Kubernetes</td><td>1.14.2</td><td>管理容器</td></tr></tbody></table><h2 id="Kubernetes安装组件介绍"><a href="#Kubernetes安装组件介绍" class="headerlink" title="Kubernetes安装组件介绍"></a>Kubernetes安装组件介绍</h2><table><thead><tr><th>组件名称</th><th>版本</th><th>作用</th></tr></thead><tbody><tr><td>kubeadm</td><td>1.14.2-0</td><td>初始化k8s集群工具</td></tr><tr><td>kubectl</td><td>1.14.2-0</td><td>k8s命令行工具，命令控制部署管理应用，CRUD各种资源</td></tr><tr><td>kubelet</td><td>1.14.2-0</td><td>运行于所有节点上，负责启动容器和 Pod</td></tr></tbody></table><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="每台节点服务器设置主机名"><a href="#每台节点服务器设置主机名" class="headerlink" title="每台节点服务器设置主机名"></a>每台节点服务器设置主机名</h2><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主节点主机名对应 172.31.76.18</span></span><br><span class="line"><span class="string">hostnamectl </span><span class="built_in">--static</span> <span class="built_in">set-hostname</span>  <span class="string">k8s-master</span></span><br><span class="line"><span class="string">#</span> 从节点主机名对应 <span class="string">172.</span><span class="string">31.</span><span class="string">76.</span><span class="string">16 </span><span class="string">172.</span><span class="string">31.</span><span class="string">76.</span><span class="string">17</span></span><br><span class="line"><span class="string">hostnamectl </span><span class="built_in">--static</span> <span class="built_in">set-hostname</span>  <span class="string">k8s-node-</span>1</span><br><span class="line"><span class="string">hostnamectl </span><span class="built_in">--static</span> <span class="built_in">set-hostname</span>  <span class="string">k8s-node-</span>2</span><br></pre></td></tr></table></figure><ul><li>使用 hostnamectl命令可以查看是否设置成功</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用hostnamectl命令 显示信息</span></span><br><span class="line"><span class="string">Static</span> <span class="attr">hostname:</span> <span class="string">k8s-node-1</span></span><br><span class="line"><span class="string">Transient</span> <span class="attr">hostname:</span> <span class="string">docker_76_16</span></span><br><span class="line">         <span class="string">Icon</span> <span class="attr">name:</span> <span class="string">computer-vm</span></span><br><span class="line"><span class="attr">           Chassis:</span> <span class="string">vm</span></span><br><span class="line">        <span class="string">Machine</span> <span class="attr">ID:</span> <span class="number">8919</span><span class="string">fc90446b48fcbeb2c6cf267caba2</span></span><br><span class="line">           <span class="string">Boot</span> <span class="attr">ID:</span> <span class="string">a684023646094b999b7ace62aed3cd2e</span></span><br><span class="line"><span class="attr">    Virtualization:</span> <span class="string">vmware</span></span><br><span class="line">  <span class="string">Operating</span> <span class="attr">System:</span> <span class="string">CentOS</span> <span class="string">Linux</span> <span class="number">7</span> <span class="string">(Core)</span></span><br><span class="line">       <span class="string">CPE</span> <span class="string">OS</span> <span class="attr">Name:</span> <span class="attr">cpe:/o:centos:centos:7</span></span><br><span class="line"><span class="attr">            Kernel:</span> <span class="string">Linux</span> <span class="number">3.10</span><span class="number">.0</span><span class="bullet">-327.</span><span class="string">el7.x86_64</span></span><br><span class="line"><span class="attr">      Architecture:</span> <span class="string">x86-64</span></span><br></pre></td></tr></table></figure><ul><li>每个节点的主机加入host 解析</li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 编辑每台机器的 /etc/hosts文件，写入下面内容</span><br><span class="line"></span><br><span class="line"><span class="number">172.31</span><span class="number">.76</span><span class="number">.16</span> k8s-node<span class="number">-1</span></span><br><span class="line"><span class="number">172.31</span><span class="number">.76</span><span class="number">.17</span> k8s-node<span class="number">-2</span></span><br><span class="line"><span class="number">172.31</span><span class="number">.76</span><span class="number">.18</span> k8s-master</span><br></pre></td></tr></table></figure><ul><li>关闭每个节点的防火墙</li></ul><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 注意以下命令是下次生效</span></span><br><span class="line">systemctl disable firewalld.service</span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line"></span><br><span class="line"><span class="meta"># 关闭防火墙立即生效</span></span><br><span class="line">iptables -F</span><br><span class="line"></span><br><span class="line"><span class="meta"># 防火墙关闭后可以使用以下命令查看防火墙状态</span></span><br><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure><ul><li>临时禁用SELINUX(它是一个 Linux 内核模块，也是 Linux 的一个安全子系统)，我的机器默认是关闭的</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0                  ##设置SELinux 成为permissive模式 （不用重启机器）</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件 (重启机器生效)</span></span><br><span class="line">vim /etc/selinux/config</span><br><span class="line"><span class="attribute">SELINUX</span>=disabled</span><br></pre></td></tr></table></figure><ul><li>每个节点关闭 swap</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">swapoff -a</span></span><br></pre></td></tr></table></figure><h1 id="各个节点组件安装"><a href="#各个节点组件安装" class="headerlink" title="各个节点组件安装"></a>各个节点组件安装</h1><ul><li>经过前面的准备工作，接下来我们开始安装组件，注意一下组件每个节点都需要安装</li></ul><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><ul><li>请看我写的关于<a href="http://note.youdao.com/noteshare?id=97117ad013718fd1992fd43f1e8ffab9&amp;sub=B56D1D28ACB94541AAD89D154CDB2D1C" target="_blank" rel="noopener">Docker</a>的文章</li></ul><h2 id="安装-kubeadm、kubectl、kubelet"><a href="#安装-kubeadm、kubectl、kubelet" class="headerlink" title="安装 kubeadm、kubectl、kubelet"></a>安装 kubeadm、kubectl、kubelet</h2><ul><li><p>安装这几个组件前先准备repo</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span><br><span class="line">       https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li><li><p>接着直接安装 kubeadm、kubectl、kubelet这个三个组件</p></li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> -y kubelet kubeadm kubectl</span><br></pre></td></tr></table></figure><ul><li>kubeadm、kubectl、kubelet组件下载安装成功</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Kubernetes/Kubernetes%E7%BB%84%E4%BB%B6%E5%AE%89%E8%A3%85.png" alt="Kubernetes组件安装"></p><ul><li>启动刚刚安装的kubelet<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="builtin-name">enable</span> kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure></li></ul><h1 id="k8s-Master-节点配置"><a href="#k8s-Master-节点配置" class="headerlink" title="k8s Master 节点配置"></a>k8s Master 节点配置</h1><h2 id="准备镜像文件"><a href="#准备镜像文件" class="headerlink" title="准备镜像文件"></a>准备镜像文件</h2><ul><li>国内环境由于网络不通畅问题，我们只能手动下载好镜像，再打上对应tag来制作本地镜像</li><li>Master 节点获取镜像文件</li></ul><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker pull mirrorgooglecontainers/kube-apiserver:v1<span class="meta">.14</span><span class="meta">.2</span></span><br><span class="line">docker pull mirrorgooglecontainers/kube-controller-manager:v1<span class="meta">.14</span><span class="meta">.2</span></span><br><span class="line">docker pull mirrorgooglecontainers/kube-scheduler:v1<span class="meta">.14</span><span class="meta">.2</span></span><br><span class="line">docker pull mirrorgooglecontainers/kube-proxy:v1<span class="meta">.14</span><span class="meta">.2</span></span><br><span class="line">docker pull mirrorgooglecontainers/<span class="keyword">pause</span>:<span class="number">3.1</span></span><br><span class="line">docker pull mirrorgooglecontainers/etcd:<span class="number">3.3</span><span class="meta">.10</span></span><br><span class="line">docker pull coredns/coredns:<span class="number">1.3</span><span class="meta">.1</span></span><br><span class="line">docker pull registry.cn-shenzhen.aliyuncs.com/cp_m/flannel:v0<span class="meta">.10</span><span class="meta">.0</span>-amd64</span><br></pre></td></tr></table></figure><ul><li>给拉取的镜像文件打tag</li></ul><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker tag mirrorgooglecontainers/kube-apiserver:v1<span class="meta">.14</span><span class="meta">.2</span> k8s.gcr.io/kube-apiserver:v1<span class="meta">.14</span><span class="meta">.2</span></span><br><span class="line">docker tag mirrorgooglecontainers/kube-controller-manager:v1<span class="meta">.14</span><span class="meta">.2</span> k8s.gcr.io/kube-controller-manager:v1<span class="meta">.14</span><span class="meta">.2</span></span><br><span class="line">docker tag mirrorgooglecontainers/kube-scheduler:v1<span class="meta">.14</span><span class="meta">.2</span> k8s.gcr.io/kube-scheduler:v1<span class="meta">.14</span><span class="meta">.2</span></span><br><span class="line">docker tag mirrorgooglecontainers/kube-proxy:v1<span class="meta">.14</span><span class="meta">.2</span> k8s.gcr.io/kube-proxy:v1<span class="meta">.14</span><span class="meta">.2</span></span><br><span class="line">docker tag mirrorgooglecontainers/<span class="keyword">pause</span>:<span class="number">3.1</span> k8s.gcr.io/<span class="keyword">pause</span>:<span class="number">3.1</span></span><br><span class="line">docker tag mirrorgooglecontainers/etcd:<span class="number">3.3</span><span class="meta">.10</span> k8s.gcr.io/etcd:<span class="number">3.3</span><span class="meta">.10</span></span><br><span class="line">docker tag coredns/coredns:<span class="number">1.3</span><span class="meta">.1</span> k8s.gcr.io/coredns:<span class="number">1.3</span><span class="meta">.1</span></span><br><span class="line">docker tag registry.cn-shenzhen.aliyuncs.com/cp_m/flannel:v0<span class="meta">.10</span><span class="meta">.0</span>-amd64 quay.io/coreos/flannel:v0<span class="meta">.10</span><span class="meta">.0</span>-amd64</span><br></pre></td></tr></table></figure><ul><li>删除拉取的初始镜像，留下我们加了tag的镜像</li></ul><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">docker rmi mirrorgooglecontainers/kube-apiserver:v1<span class="meta">.14</span><span class="meta">.2</span>           </span><br><span class="line">docker rmi mirrorgooglecontainers/kube-controller-manager:v1<span class="meta">.14</span><span class="meta">.2</span>  </span><br><span class="line">docker rmi mirrorgooglecontainers/kube-scheduler:v1<span class="meta">.14</span><span class="meta">.2</span>          </span><br><span class="line">docker rmi mirrorgooglecontainers/kube-proxy:v1<span class="meta">.14</span><span class="meta">.2</span>               </span><br><span class="line">docker rmi mirrorgooglecontainers/<span class="keyword">pause</span>:<span class="number">3.1</span>                        </span><br><span class="line">docker rmi mirrorgooglecontainers/etcd:<span class="number">3.3</span><span class="meta">.10</span>                      </span><br><span class="line">docker rmi coredns/coredns:<span class="number">1.3</span><span class="meta">.1</span></span><br><span class="line">docker rmi registry.cn-shenzhen.aliyuncs.com/cp_m/flannel:v0<span class="meta">.10</span><span class="meta">.0</span>-amd64</span><br><span class="line"></span><br><span class="line">docker rmi k8s.gcr.io/kube-apiserver:v1<span class="meta">.14</span><span class="meta">.2</span>           </span><br><span class="line">docker rmi k8s.gcr.io/kube-controller-manager:v1<span class="meta">.14</span><span class="meta">.2</span>  </span><br><span class="line">docker rmi k8s.gcr.io/kube-scheduler:v1<span class="meta">.14</span><span class="meta">.2</span>          </span><br><span class="line">docker rmi k8s.gcr.io/kube-proxy:v1<span class="meta">.14</span><span class="meta">.2</span>               </span><br><span class="line">docker rmi k8s.gcr.io/<span class="keyword">pause</span>:<span class="number">3.1</span>                        </span><br><span class="line">docker rmi k8s.gcr.io/etcd:<span class="number">3.3</span><span class="meta">.10</span>                      </span><br><span class="line">docker rmi k8s.gcr.io/coredns:<span class="number">1.3</span><span class="meta">.1</span></span><br><span class="line">docker rmi quay.io/coreos/flannel:v0<span class="meta">.10</span><span class="meta">.0</span>-amd64</span><br></pre></td></tr></table></figure><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Kubernetes/%E5%8A%A0%E5%AE%8Ctag%E5%AE%8C%E6%88%90%E4%B9%8B%E5%90%8E%E7%9A%84%E9%95%9C%E5%83%8F%E6%96%87%E4%BB%B6.png" alt="加完tag完成之后的镜像文件"></p><h2 id="开始安装kubernetes"><a href="#开始安装kubernetes" class="headerlink" title="开始安装kubernetes"></a>开始安装kubernetes</h2><ul><li><p>输入以下命令开始安装kubernetes</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># --kubernetes-version=v1<span class="meta">.14</span><span class="meta">.2</span> 指定安装的k8s版本</span><br><span class="line"># --apiserver-advertise-address 用于指定使用k8s-master的哪个network 端口进行通信 </span><br><span class="line"># --pod-network-cidr 用于指定Pod的网络范围，下面采用的是flannel方案（https://github.com/coreos/flannel/blob/master/Documentation/kubernetes.md）</span><br><span class="line">kubeadm init --kubernetes-version=v1<span class="meta">.14</span><span class="meta">.2</span> --apiserver-advertise-address <span class="number">172.31</span><span class="meta">.76</span><span class="meta">.18</span> --pod-network-cidr=<span class="number">10.244</span><span class="meta">.0</span><span class="meta">.0</span>/<span class="number">16</span></span><br></pre></td></tr></table></figure></li><li><p>如下为kubernetes初始化日志打印</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">[init] Using Kubernetes version: v1.14.2</span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">[WARNING Service-Docker]: docker service is not enabled, please run 'systemctl enable docker.service'</span><br><span class="line">[WARNING IsDockerSystemdCheck]: detected "cgroupfs" as the Docker cgroup driver. The recommended driver is "systemd". Please follow the guide at https://kubernetes.io/docs/setup/cri/</span><br><span class="line">[preflight] Pulling images required for setting up a Kubernetes cluster</span><br><span class="line">[preflight] This might take a minute or two, depending on the speed of your internet connection</span><br><span class="line">[preflight] You can also perform this action in beforehand using 'kubeadm config images pull'</span><br><span class="line">[kubelet-<span class="keyword">start</span>] Writing kubelet environment <span class="keyword">file</span> <span class="keyword">with</span> flags <span class="keyword">to</span> <span class="keyword">file</span> <span class="string">"/var/lib/kubelet/kubeadm-flags.env"</span></span><br><span class="line">[kubelet-<span class="keyword">start</span>] Writing kubelet configuration <span class="keyword">to</span> <span class="keyword">file</span> <span class="string">"/var/lib/kubelet/config.yaml"</span></span><br><span class="line">[kubelet-<span class="keyword">start</span>] Activating the kubelet service</span><br><span class="line">[certs] <span class="keyword">Using</span> certificateDir folder <span class="string">"/etc/kubernetes/pki"</span></span><br><span class="line">[certs] Generating <span class="string">"etcd/ca"</span> certificate <span class="keyword">and</span> <span class="keyword">key</span></span><br><span class="line">[certs] Generating <span class="string">"etcd/peer"</span> certificate <span class="keyword">and</span> <span class="keyword">key</span></span><br><span class="line">[certs] etcd/peer serving cert <span class="keyword">is</span> signed <span class="keyword">for</span> DNS <span class="keyword">names</span> [k8s-<span class="keyword">master</span> localhost] <span class="keyword">and</span> IPs [<span class="number">172.31</span><span class="number">.76</span><span class="number">.18</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> ::<span class="number">1</span>]</span><br><span class="line">[certs] Generating <span class="string">"etcd/healthcheck-client"</span> certificate <span class="keyword">and</span> <span class="keyword">key</span></span><br><span class="line">[certs] Generating <span class="string">"apiserver-etcd-client"</span> certificate <span class="keyword">and</span> <span class="keyword">key</span></span><br><span class="line">[certs] Generating <span class="string">"etcd/server"</span> certificate <span class="keyword">and</span> <span class="keyword">key</span></span><br><span class="line">[certs] etcd/<span class="keyword">server</span> serving cert <span class="keyword">is</span> signed <span class="keyword">for</span> DNS <span class="keyword">names</span> [k8s-<span class="keyword">master</span> localhost] <span class="keyword">and</span> IPs [<span class="number">172.31</span><span class="number">.76</span><span class="number">.18</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> ::<span class="number">1</span>]</span><br><span class="line">[certs] Generating <span class="string">"ca"</span> certificate <span class="keyword">and</span> <span class="keyword">key</span></span><br><span class="line">[certs] Generating <span class="string">"apiserver-kubelet-client"</span> certificate <span class="keyword">and</span> <span class="keyword">key</span></span><br><span class="line">[certs] Generating <span class="string">"apiserver"</span> certificate <span class="keyword">and</span> <span class="keyword">key</span></span><br><span class="line">[certs] apiserver serving cert <span class="keyword">is</span> signed <span class="keyword">for</span> DNS <span class="keyword">names</span> [k8s-<span class="keyword">master</span> kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] <span class="keyword">and</span> IPs [<span class="number">10.96</span><span class="number">.0</span><span class="number">.1</span> <span class="number">172.31</span><span class="number">.76</span><span class="number">.18</span>]</span><br><span class="line">[certs] Generating <span class="string">"front-proxy-ca"</span> certificate <span class="keyword">and</span> <span class="keyword">key</span></span><br><span class="line">[certs] Generating <span class="string">"front-proxy-client"</span> certificate <span class="keyword">and</span> <span class="keyword">key</span></span><br><span class="line">[certs] Generating <span class="string">"sa"</span> <span class="keyword">key</span> <span class="keyword">and</span> <span class="keyword">public</span> <span class="keyword">key</span></span><br><span class="line">[kubeconfig] <span class="keyword">Using</span> kubeconfig folder <span class="string">"/etc/kubernetes"</span></span><br><span class="line">[kubeconfig] Writing <span class="string">"admin.conf"</span> kubeconfig <span class="keyword">file</span></span><br><span class="line">[kubeconfig] Writing <span class="string">"kubelet.conf"</span> kubeconfig <span class="keyword">file</span></span><br><span class="line">[kubeconfig] Writing <span class="string">"controller-manager.conf"</span> kubeconfig <span class="keyword">file</span></span><br><span class="line">[kubeconfig] Writing <span class="string">"scheduler.conf"</span> kubeconfig <span class="keyword">file</span></span><br><span class="line">[control-plane] <span class="keyword">Using</span> manifest folder <span class="string">"/etc/kubernetes/manifests"</span></span><br><span class="line">[control-plane] Creating <span class="keyword">static</span> Pod manifest <span class="keyword">for</span> <span class="string">"kube-apiserver"</span></span><br><span class="line">[control-plane] Creating <span class="keyword">static</span> Pod manifest <span class="keyword">for</span> <span class="string">"kube-controller-manager"</span></span><br><span class="line">[control-plane] Creating <span class="keyword">static</span> Pod manifest <span class="keyword">for</span> <span class="string">"kube-scheduler"</span></span><br><span class="line">[etcd] Creating <span class="keyword">static</span> Pod manifest <span class="keyword">for</span> <span class="keyword">local</span> etcd <span class="keyword">in</span> <span class="string">"/etc/kubernetes/manifests"</span></span><br><span class="line">[<span class="keyword">wait</span>-control-plane] Waiting <span class="keyword">for</span> the kubelet <span class="keyword">to</span> boot up the control plane <span class="keyword">as</span> <span class="keyword">static</span> Pods <span class="keyword">from</span> <span class="keyword">directory</span> <span class="string">"/etc/kubernetes/manifests"</span>. This can take up <span class="keyword">to</span> <span class="number">4</span>m0s</span><br><span class="line">[apiclient] All control plane components <span class="keyword">are</span> healthy <span class="keyword">after</span> <span class="number">16.501690</span> seconds</span><br><span class="line">[upload-config] storing the configuration used <span class="keyword">in</span> ConfigMap <span class="string">"kubeadm-config"</span> <span class="keyword">in</span> the <span class="string">"kube-system"</span> Namespace</span><br><span class="line">[kubelet] Creating a ConfigMap <span class="string">"kubelet-config-1.14"</span> <span class="keyword">in</span> namespace kube-<span class="keyword">system</span> <span class="keyword">with</span> the configuration <span class="keyword">for</span> the kubelets <span class="keyword">in</span> the cluster</span><br><span class="line">[upload-certs] Skipping phase. Please see <span class="comment">--experimental-upload-certs</span></span><br><span class="line">[mark-control-plane] Marking the node k8s-<span class="keyword">master</span> <span class="keyword">as</span> control-plane <span class="keyword">by</span> adding the label <span class="string">"node-role.kubernetes.io/master=''"</span></span><br><span class="line">[mark-control-plane] Marking the node k8s-<span class="keyword">master</span> <span class="keyword">as</span> control-plane <span class="keyword">by</span> adding the taints [node-role.kubernetes.io/<span class="keyword">master</span>:NoSchedule]</span><br><span class="line">[bootstrap-token] <span class="keyword">Using</span> token: y6awgp<span class="number">.6</span>bvxt8l3rie2du5s</span><br><span class="line">[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC <span class="keyword">Roles</span></span><br><span class="line">[bootstrap-token] configured RBAC <span class="keyword">rules</span> <span class="keyword">to</span> <span class="keyword">allow</span> Node Bootstrap tokens <span class="keyword">to</span> post CSRs <span class="keyword">in</span> <span class="keyword">order</span> <span class="keyword">for</span> nodes <span class="keyword">to</span> <span class="keyword">get</span> <span class="keyword">long</span> term certificate credentials</span><br><span class="line">[bootstrap-token] configured RBAC <span class="keyword">rules</span> <span class="keyword">to</span> <span class="keyword">allow</span> the csrapprover controller automatically approve CSRs <span class="keyword">from</span> a Node Bootstrap Token</span><br><span class="line">[bootstrap-token] configured RBAC <span class="keyword">rules</span> <span class="keyword">to</span> <span class="keyword">allow</span> certificate rotation <span class="keyword">for</span> all node <span class="keyword">client</span> certificates <span class="keyword">in</span> the cluster</span><br><span class="line">[bootstrap-token] creating the <span class="string">"cluster-info"</span> ConfigMap <span class="keyword">in</span> the <span class="string">"kube-public"</span> namespace</span><br><span class="line">[addons] Applied essential addon: CoreDNS</span><br><span class="line">[addons] Applied essential addon: kube-proxy</span><br><span class="line"></span><br><span class="line">Your Kubernetes control-plane has <span class="keyword">initialized</span> successfully!</span><br><span class="line"></span><br><span class="line"><span class="keyword">To</span> <span class="keyword">start</span> <span class="keyword">using</span> your cluster, you need <span class="keyword">to</span> run the <span class="keyword">following</span> <span class="keyword">as</span> a regular <span class="keyword">user</span>:</span><br><span class="line"></span><br><span class="line">  mkdir -p $HOME/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">  sudo chown $(<span class="keyword">id</span> -u):$(<span class="keyword">id</span> -g) $HOME/.kube/config</span><br><span class="line"></span><br><span class="line">You should <span class="keyword">now</span> deploy a pod network <span class="keyword">to</span> the cluster.</span><br><span class="line">Run <span class="string">"kubectl apply -f [podnetwork].yaml"</span> <span class="keyword">with</span> one <span class="keyword">of</span> the options listed <span class="keyword">at</span>:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line"><span class="keyword">Then</span> you can <span class="keyword">join</span> <span class="keyword">any</span> <span class="built_in">number</span> <span class="keyword">of</span> worker nodes <span class="keyword">by</span> running the <span class="keyword">following</span> <span class="keyword">on</span> <span class="keyword">each</span> <span class="keyword">as</span> root:</span><br><span class="line"></span><br><span class="line">kubeadm <span class="keyword">join</span> <span class="number">172.31</span><span class="number">.76</span><span class="number">.18</span>:<span class="number">6443</span> <span class="comment">--token y6awgp.6bvxt8l3rie2du5s \</span></span><br><span class="line">    <span class="comment">--discovery-token-ca-cert-hash sha256:9989fe3160fe36c428ab2e05866f8d04a91704c5973dcf8025721c9e5e1b230c</span></span><br></pre></td></tr></table></figure></li><li><p><strong>注意：</strong> 看到上面Kubernetes初始化信息，我们需要注意最后一句话，等会我们子节点加入Kubernetes集群就是使用这一句话</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">kubeadm</span> <span class="selector-tag">join</span> 172<span class="selector-class">.31</span><span class="selector-class">.76</span><span class="selector-class">.18</span><span class="selector-pseudo">:6443</span> <span class="selector-tag">--token</span> <span class="selector-tag">y6awgp</span><span class="selector-class">.6bvxt8l3rie2du5s</span> \</span><br><span class="line">    <span class="selector-tag">--discovery-token-ca-cert-hash</span> <span class="selector-tag">sha256</span><span class="selector-pseudo">:9989fe3160fe36c428ab2e05866f8d04a91704c5973dcf8025721c9e5e1b230c</span></span><br></pre></td></tr></table></figure><h2 id="配置kubectl"><a href="#配置kubectl" class="headerlink" title="配置kubectl"></a>配置kubectl</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># root 模式下导入环境变量</span></span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">KUBECONFIG</span>=/etc/kubernetes/admin.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 kubelet</span></span><br><span class="line">systemctl restart kubelet</span><br></pre></td></tr></table></figure><h2 id="安装Pod的网络（flannel方案）"><a href="#安装Pod的网络（flannel方案）" class="headerlink" title="安装Pod的网络（flannel方案）"></a>安装Pod的网络（flannel方案）</h2><ul><li><p><a href="https://github.com/coreos/flannel/blob/master/Documentation/kubernetes.md" target="_blank" rel="noopener">flannel官方文档</a></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl net<span class="selector-class">.bridge</span><span class="selector-class">.bridge-nf-call-iptables</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>然后在k8s-master节点上执行kube-flannel.yaml配置，也可根据官方文档来操作下载kube-flannel.yaml文件，下文也给出kube-flannel.yaml文件内容</p></li></ul><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">apply</span> -f kube-flannel.yaml</span><br></pre></td></tr></table></figure><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Kubernetes/%E5%AE%89%E8%A3%85Pod%E7%BD%91%E7%BB%9C.png" alt="安装Pod网络"></p><ul><li><p>kube-flannel.yaml 文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="attr">  - apiGroups:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">""</span></span><br><span class="line"><span class="attr">    resources:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">pods</span></span><br><span class="line"><span class="attr">    verbs:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">get</span></span><br><span class="line"><span class="attr">  - apiGroups:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">""</span></span><br><span class="line"><span class="attr">    resources:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">nodes</span></span><br><span class="line"><span class="attr">    verbs:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">list</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">watch</span></span><br><span class="line"><span class="attr">  - apiGroups:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">""</span></span><br><span class="line"><span class="attr">    resources:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">nodes/status</span></span><br><span class="line"><span class="attr">    verbs:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">patch</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line"><span class="attr">  apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="attr">  kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="attr">- kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kube-flannel-cfg</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    tier:</span> <span class="string">node</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="string">cni-conf.json:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      "name": "cbr0",</span></span><br><span class="line"><span class="string">      "plugins": [</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">          "type": "flannel",</span></span><br><span class="line"><span class="string">          "delegate": &#123;</span></span><br><span class="line"><span class="string">            "hairpinMode": true,</span></span><br><span class="line"><span class="string">            "isDefaultGateway": true</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">          "type": "portmap",</span></span><br><span class="line"><span class="string">          "capabilities": &#123;</span></span><br><span class="line"><span class="string">            "portMappings": true</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      ]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  net-conf.json: |</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      "Network": "10.244.0.0/16",</span></span><br><span class="line"><span class="string">      "Backend": &#123;</span></span><br><span class="line"><span class="string">        "Type": "vxlan"</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string"></span><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kube-flannel-ds-amd64</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    tier:</span> <span class="string">node</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        tier:</span> <span class="string">node</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      hostNetwork:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      nodeSelector:</span></span><br><span class="line">        <span class="string">beta.kubernetes.io/arch:</span> <span class="string">amd64</span></span><br><span class="line"><span class="attr">      tolerations:</span></span><br><span class="line"><span class="attr">      - operator:</span> <span class="string">Exists</span></span><br><span class="line"><span class="attr">        effect:</span> <span class="string">NoSchedule</span></span><br><span class="line"><span class="attr">      serviceAccountName:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">      initContainers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">install-cni</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">quay.io/coreos/flannel:v0.10.0-amd64</span></span><br><span class="line"><span class="attr">        command:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">cp</span></span><br><span class="line"><span class="attr">        args:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="bullet">-f</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">/etc/kube-flannel/cni-conf.json</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">/etc/cni/net.d/10-flannel.conflist</span></span><br><span class="line"><span class="attr">        volumeMounts:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">cni</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/etc/cni/net.d</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">flannel-cfg</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/etc/kube-flannel/</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">kube-flannel</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">quay.io/coreos/flannel:v0.10.0-amd64</span></span><br><span class="line"><span class="attr">        command:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">/opt/bin/flanneld</span></span><br><span class="line"><span class="attr">        args:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="bullet">--ip-masq</span></span><br><span class="line"><span class="bullet">        -</span> <span class="bullet">--kube-subnet-mgr</span></span><br><span class="line"><span class="attr">        resources:</span></span><br><span class="line"><span class="attr">          requests:</span></span><br><span class="line"><span class="attr">            cpu:</span> <span class="string">"100m"</span></span><br><span class="line"><span class="attr">            memory:</span> <span class="string">"50Mi"</span></span><br><span class="line"><span class="attr">          limits:</span></span><br><span class="line"><span class="attr">            cpu:</span> <span class="string">"100m"</span></span><br><span class="line"><span class="attr">            memory:</span> <span class="string">"50Mi"</span></span><br><span class="line"><span class="attr">        securityContext:</span></span><br><span class="line"><span class="attr">          privileged:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">POD_NAME</span></span><br><span class="line"><span class="attr">          valueFrom:</span></span><br><span class="line"><span class="attr">            fieldRef:</span></span><br><span class="line"><span class="attr">              fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">POD_NAMESPACE</span></span><br><span class="line"><span class="attr">          valueFrom:</span></span><br><span class="line"><span class="attr">            fieldRef:</span></span><br><span class="line"><span class="attr">              fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line"><span class="attr">        volumeMounts:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">run</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/run</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">flannel-cfg</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/etc/kube-flannel/</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">run</span></span><br><span class="line"><span class="attr">          hostPath:</span></span><br><span class="line"><span class="attr">            path:</span> <span class="string">/run</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">cni</span></span><br><span class="line"><span class="attr">          hostPath:</span></span><br><span class="line"><span class="attr">            path:</span> <span class="string">/etc/cni/net.d</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">flannel-cfg</span></span><br><span class="line"><span class="attr">          configMap:</span></span><br><span class="line"><span class="attr">            name:</span> <span class="string">kube-flannel-cfg</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kube-flannel-ds-arm64</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    tier:</span> <span class="string">node</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        tier:</span> <span class="string">node</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      hostNetwork:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      nodeSelector:</span></span><br><span class="line">        <span class="string">beta.kubernetes.io/arch:</span> <span class="string">arm64</span></span><br><span class="line"><span class="attr">      tolerations:</span></span><br><span class="line"><span class="attr">      - operator:</span> <span class="string">Exists</span></span><br><span class="line"><span class="attr">        effect:</span> <span class="string">NoSchedule</span></span><br><span class="line"><span class="attr">      serviceAccountName:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">      initContainers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">install-cni</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">quay.io/coreos/flannel:v0.10.0-arm64</span></span><br><span class="line"><span class="attr">        command:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">cp</span></span><br><span class="line"><span class="attr">        args:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="bullet">-f</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">/etc/kube-flannel/cni-conf.json</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">/etc/cni/net.d/10-flannel.conflist</span></span><br><span class="line"><span class="attr">        volumeMounts:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">cni</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/etc/cni/net.d</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">flannel-cfg</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/etc/kube-flannel/</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">kube-flannel</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">quay.io/coreos/flannel:v0.10.0-arm64</span></span><br><span class="line"><span class="attr">        command:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">/opt/bin/flanneld</span></span><br><span class="line"><span class="attr">        args:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="bullet">--ip-masq</span></span><br><span class="line"><span class="bullet">        -</span> <span class="bullet">--kube-subnet-mgr</span></span><br><span class="line"><span class="attr">        resources:</span></span><br><span class="line"><span class="attr">          requests:</span></span><br><span class="line"><span class="attr">            cpu:</span> <span class="string">"100m"</span></span><br><span class="line"><span class="attr">            memory:</span> <span class="string">"50Mi"</span></span><br><span class="line"><span class="attr">          limits:</span></span><br><span class="line"><span class="attr">            cpu:</span> <span class="string">"100m"</span></span><br><span class="line"><span class="attr">            memory:</span> <span class="string">"50Mi"</span></span><br><span class="line"><span class="attr">        securityContext:</span></span><br><span class="line"><span class="attr">          privileged:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">POD_NAME</span></span><br><span class="line"><span class="attr">          valueFrom:</span></span><br><span class="line"><span class="attr">            fieldRef:</span></span><br><span class="line"><span class="attr">              fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">POD_NAMESPACE</span></span><br><span class="line"><span class="attr">          valueFrom:</span></span><br><span class="line"><span class="attr">            fieldRef:</span></span><br><span class="line"><span class="attr">              fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line"><span class="attr">        volumeMounts:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">run</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/run</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">flannel-cfg</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/etc/kube-flannel/</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">run</span></span><br><span class="line"><span class="attr">          hostPath:</span></span><br><span class="line"><span class="attr">            path:</span> <span class="string">/run</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">cni</span></span><br><span class="line"><span class="attr">          hostPath:</span></span><br><span class="line"><span class="attr">            path:</span> <span class="string">/etc/cni/net.d</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">flannel-cfg</span></span><br><span class="line"><span class="attr">          configMap:</span></span><br><span class="line"><span class="attr">            name:</span> <span class="string">kube-flannel-cfg</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kube-flannel-ds-arm</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    tier:</span> <span class="string">node</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        tier:</span> <span class="string">node</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      hostNetwork:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      nodeSelector:</span></span><br><span class="line">        <span class="string">beta.kubernetes.io/arch:</span> <span class="string">arm</span></span><br><span class="line"><span class="attr">      tolerations:</span></span><br><span class="line"><span class="attr">      - operator:</span> <span class="string">Exists</span></span><br><span class="line"><span class="attr">        effect:</span> <span class="string">NoSchedule</span></span><br><span class="line"><span class="attr">      serviceAccountName:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">      initContainers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">install-cni</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">quay.io/coreos/flannel:v0.10.0-arm</span></span><br><span class="line"><span class="attr">        command:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">cp</span></span><br><span class="line"><span class="attr">        args:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="bullet">-f</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">/etc/kube-flannel/cni-conf.json</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">/etc/cni/net.d/10-flannel.conflist</span></span><br><span class="line"><span class="attr">        volumeMounts:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">cni</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/etc/cni/net.d</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">flannel-cfg</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/etc/kube-flannel/</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">kube-flannel</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">quay.io/coreos/flannel:v0.10.0-arm</span></span><br><span class="line"><span class="attr">        command:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">/opt/bin/flanneld</span></span><br><span class="line"><span class="attr">        args:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="bullet">--ip-masq</span></span><br><span class="line"><span class="bullet">        -</span> <span class="bullet">--kube-subnet-mgr</span></span><br><span class="line"><span class="attr">        resources:</span></span><br><span class="line"><span class="attr">          requests:</span></span><br><span class="line"><span class="attr">            cpu:</span> <span class="string">"100m"</span></span><br><span class="line"><span class="attr">            memory:</span> <span class="string">"50Mi"</span></span><br><span class="line"><span class="attr">          limits:</span></span><br><span class="line"><span class="attr">            cpu:</span> <span class="string">"100m"</span></span><br><span class="line"><span class="attr">            memory:</span> <span class="string">"50Mi"</span></span><br><span class="line"><span class="attr">        securityContext:</span></span><br><span class="line"><span class="attr">          privileged:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">POD_NAME</span></span><br><span class="line"><span class="attr">          valueFrom:</span></span><br><span class="line"><span class="attr">            fieldRef:</span></span><br><span class="line"><span class="attr">              fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">POD_NAMESPACE</span></span><br><span class="line"><span class="attr">          valueFrom:</span></span><br><span class="line"><span class="attr">            fieldRef:</span></span><br><span class="line"><span class="attr">              fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line"><span class="attr">        volumeMounts:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">run</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/run</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">flannel-cfg</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/etc/kube-flannel/</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">run</span></span><br><span class="line"><span class="attr">          hostPath:</span></span><br><span class="line"><span class="attr">            path:</span> <span class="string">/run</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">cni</span></span><br><span class="line"><span class="attr">          hostPath:</span></span><br><span class="line"><span class="attr">            path:</span> <span class="string">/etc/cni/net.d</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">flannel-cfg</span></span><br><span class="line"><span class="attr">          configMap:</span></span><br><span class="line"><span class="attr">            name:</span> <span class="string">kube-flannel-cfg</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kube-flannel-ds-ppc64le</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    tier:</span> <span class="string">node</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        tier:</span> <span class="string">node</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      hostNetwork:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      nodeSelector:</span></span><br><span class="line">        <span class="string">beta.kubernetes.io/arch:</span> <span class="string">ppc64le</span></span><br><span class="line"><span class="attr">      tolerations:</span></span><br><span class="line"><span class="attr">      - operator:</span> <span class="string">Exists</span></span><br><span class="line"><span class="attr">        effect:</span> <span class="string">NoSchedule</span></span><br><span class="line"><span class="attr">      serviceAccountName:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">      initContainers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">install-cni</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">quay.io/coreos/flannel:v0.10.0-ppc64le</span></span><br><span class="line"><span class="attr">        command:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">cp</span></span><br><span class="line"><span class="attr">        args:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="bullet">-f</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">/etc/kube-flannel/cni-conf.json</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">/etc/cni/net.d/10-flannel.conflist</span></span><br><span class="line"><span class="attr">        volumeMounts:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">cni</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/etc/cni/net.d</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">flannel-cfg</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/etc/kube-flannel/</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">kube-flannel</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">quay.io/coreos/flannel:v0.10.0-ppc64le</span></span><br><span class="line"><span class="attr">        command:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">/opt/bin/flanneld</span></span><br><span class="line"><span class="attr">        args:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="bullet">--ip-masq</span></span><br><span class="line"><span class="bullet">        -</span> <span class="bullet">--kube-subnet-mgr</span></span><br><span class="line"><span class="attr">        resources:</span></span><br><span class="line"><span class="attr">          requests:</span></span><br><span class="line"><span class="attr">            cpu:</span> <span class="string">"100m"</span></span><br><span class="line"><span class="attr">            memory:</span> <span class="string">"50Mi"</span></span><br><span class="line"><span class="attr">          limits:</span></span><br><span class="line"><span class="attr">            cpu:</span> <span class="string">"100m"</span></span><br><span class="line"><span class="attr">            memory:</span> <span class="string">"50Mi"</span></span><br><span class="line"><span class="attr">        securityContext:</span></span><br><span class="line"><span class="attr">          privileged:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">POD_NAME</span></span><br><span class="line"><span class="attr">          valueFrom:</span></span><br><span class="line"><span class="attr">            fieldRef:</span></span><br><span class="line"><span class="attr">              fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">POD_NAMESPACE</span></span><br><span class="line"><span class="attr">          valueFrom:</span></span><br><span class="line"><span class="attr">            fieldRef:</span></span><br><span class="line"><span class="attr">              fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line"><span class="attr">        volumeMounts:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">run</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/run</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">flannel-cfg</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/etc/kube-flannel/</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">run</span></span><br><span class="line"><span class="attr">          hostPath:</span></span><br><span class="line"><span class="attr">            path:</span> <span class="string">/run</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">cni</span></span><br><span class="line"><span class="attr">          hostPath:</span></span><br><span class="line"><span class="attr">            path:</span> <span class="string">/etc/cni/net.d</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">flannel-cfg</span></span><br><span class="line"><span class="attr">          configMap:</span></span><br><span class="line"><span class="attr">            name:</span> <span class="string">kube-flannel-cfg</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">kube-flannel-ds-s390x</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">  labels:</span></span><br><span class="line"><span class="attr">    tier:</span> <span class="string">node</span></span><br><span class="line"><span class="attr">    app:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  template:</span></span><br><span class="line"><span class="attr">    metadata:</span></span><br><span class="line"><span class="attr">      labels:</span></span><br><span class="line"><span class="attr">        tier:</span> <span class="string">node</span></span><br><span class="line"><span class="attr">        app:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">    spec:</span></span><br><span class="line"><span class="attr">      hostNetwork:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      nodeSelector:</span></span><br><span class="line">        <span class="string">beta.kubernetes.io/arch:</span> <span class="string">s390x</span></span><br><span class="line"><span class="attr">      tolerations:</span></span><br><span class="line"><span class="attr">      - operator:</span> <span class="string">Exists</span></span><br><span class="line"><span class="attr">        effect:</span> <span class="string">NoSchedule</span></span><br><span class="line"><span class="attr">      serviceAccountName:</span> <span class="string">flannel</span></span><br><span class="line"><span class="attr">      initContainers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">install-cni</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">quay.io/coreos/flannel:v0.10.0-s390x</span></span><br><span class="line"><span class="attr">        command:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">cp</span></span><br><span class="line"><span class="attr">        args:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="bullet">-f</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">/etc/kube-flannel/cni-conf.json</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">/etc/cni/net.d/10-flannel.conflist</span></span><br><span class="line"><span class="attr">        volumeMounts:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">cni</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/etc/cni/net.d</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">flannel-cfg</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/etc/kube-flannel/</span></span><br><span class="line"><span class="attr">      containers:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">kube-flannel</span></span><br><span class="line"><span class="attr">        image:</span> <span class="string">quay.io/coreos/flannel:v0.10.0-s390x</span></span><br><span class="line"><span class="attr">        command:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">/opt/bin/flanneld</span></span><br><span class="line"><span class="attr">        args:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="bullet">--ip-masq</span></span><br><span class="line"><span class="bullet">        -</span> <span class="bullet">--kube-subnet-mgr</span></span><br><span class="line"><span class="attr">        resources:</span></span><br><span class="line"><span class="attr">          requests:</span></span><br><span class="line"><span class="attr">            cpu:</span> <span class="string">"100m"</span></span><br><span class="line"><span class="attr">            memory:</span> <span class="string">"50Mi"</span></span><br><span class="line"><span class="attr">          limits:</span></span><br><span class="line"><span class="attr">            cpu:</span> <span class="string">"100m"</span></span><br><span class="line"><span class="attr">            memory:</span> <span class="string">"50Mi"</span></span><br><span class="line"><span class="attr">        securityContext:</span></span><br><span class="line"><span class="attr">          privileged:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">POD_NAME</span></span><br><span class="line"><span class="attr">          valueFrom:</span></span><br><span class="line"><span class="attr">            fieldRef:</span></span><br><span class="line"><span class="attr">              fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">POD_NAMESPACE</span></span><br><span class="line"><span class="attr">          valueFrom:</span></span><br><span class="line"><span class="attr">            fieldRef:</span></span><br><span class="line"><span class="attr">              fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line"><span class="attr">        volumeMounts:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">run</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/run</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">flannel-cfg</span></span><br><span class="line"><span class="attr">          mountPath:</span> <span class="string">/etc/kube-flannel/</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">run</span></span><br><span class="line"><span class="attr">          hostPath:</span></span><br><span class="line"><span class="attr">            path:</span> <span class="string">/run</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">cni</span></span><br><span class="line"><span class="attr">          hostPath:</span></span><br><span class="line"><span class="attr">            path:</span> <span class="string">/etc/cni/net.d</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">flannel-cfg</span></span><br><span class="line"><span class="attr">          configMap:</span></span><br><span class="line"><span class="attr">            name:</span> <span class="string">kube-flannel-cfg</span></span><br></pre></td></tr></table></figure></li><li><p>查看Kubernetes的Pod 是否正常运行</p></li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="keyword">get</span> pods <span class="comment">--all-namespaces -o wide</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Kubernetes/Pod%E6%AD%A3%E5%B8%B8%E8%BF%90%E8%A1%8C.png" alt="Pod正常运行"></p><ul><li>查看Kubernetes主节点是否已经就绪<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="builtin-name">get</span> nodes</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Kubernetes/Kubernetes%E4%B8%BB%E8%8A%82%E7%82%B9%E5%B7%B2%E7%BB%8F%E5%B0%B1%E7%BB%AA.png" alt="Kubernetes主节点已经就绪"></p><ul><li>最后别忘了执行（不执行使用kubectl命令会出现错误1）</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line"></span><br><span class="line">cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line">chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><h1 id="k8s从节点（node）加入集群"><a href="#k8s从节点（node）加入集群" class="headerlink" title="k8s从节点（node）加入集群"></a>k8s从节点（node）加入集群</h1><ul><li>前面准备工作中我们已经在各个节点中安装了kubelet kubeadm kubectl这三个组件，在搭建k8s master 主节点这一小节也提到过加入集群的操作（忘记了可以往上翻翻）</li><li>按照配置主节点的内容在docker 中加入镜像<h2 id="加入集群"><a href="#加入集群" class="headerlink" title="加入集群"></a>加入集群</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 基础命令示例 kubeadm <span class="keyword">join</span> --token <span class="symbol">&lt;token&gt;</span> <span class="symbol">&lt;master-ip&gt;</span>:<span class="symbol">&lt;master-port&gt;</span> --discovery-token-<span class="keyword">ca</span>-cert-hash <span class="built_in">sha256</span>:<span class="symbol">&lt;hash&gt;</span></span><br><span class="line"></span><br><span class="line">kubeadm <span class="keyword">join</span> <span class="number">172.31</span>.<span class="number">76.18</span>:<span class="number">6443</span> --token pamsj1.<span class="number">4</span>d5funpottlqofs1 --discovery-token-<span class="keyword">ca</span>-cert-hash <span class="built_in">sha256</span>:<span class="number">1152</span>aa95b6a45e88211686b44a3080d643fa95b94ebf98c5041a7f88063f2f4e</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Kubernetes/node%E8%8A%82%E7%82%B9%E5%8A%A0%E5%85%A5%E9%9B%86%E7%BE%A4.png" alt="node节点加入集群"></p><ul><li><p>我们可以在另一台node节点机器再次重复该操作</p></li><li><p>查看刚刚加入集群的子节点</p></li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Kubernetes/node%E8%8A%82%E7%82%B9%E5%8A%A0%E5%85%A5%E9%9B%86%E7%BE%A4%E6%88%90%E5%8A%9F.png" alt="node节点加入集群成功"></p><ul><li>至此集群的搭建完成。</li></ul><h2 id="子节点加入集群注意事项"><a href="#子节点加入集群注意事项" class="headerlink" title="子节点加入集群注意事项"></a>子节点加入集群注意事项</h2><ul><li>加入集群前保证子节点服务器已经打开了docker服务</li><li>注意 token是否过期（默认24小时过期）</li><li>子节点注意保持镜像文件版本和主节点一致</li><li>子节点准备工作安装flannel网络</li><li>子节点如果加入集群不成功出现错误，下次再加入集群钱则使用 kubeadm reset 命令清除子节点加入集群自动生成的配置文件</li></ul><h1 id="k8s集群清理解散"><a href="#k8s集群清理解散" class="headerlink" title="k8s集群清理解散"></a>k8s集群清理解散</h1><ul><li>删除子节点</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询k8s集群所以节点</span></span><br><span class="line">kubectl <span class="keyword">get</span> nodes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除子节点 ，&lt;node name&gt; 代表子节点名称</span></span><br><span class="line">kubectl drain &lt;node <span class="built_in">name</span>&gt; <span class="comment">--delete-local-data --force --ignore-daemonsets</span></span><br><span class="line">kubectl delete node &lt;node <span class="built_in">name</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>重置节点</li></ul><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不论主节点 还是 子节点该命令都能重置节点</span></span><br><span class="line">kubeadm <span class="keyword">reset</span></span><br></pre></td></tr></table></figure><h1 id="k8s集群可视化管理工具Dashboard安装"><a href="#k8s集群可视化管理工具Dashboard安装" class="headerlink" title="k8s集群可视化管理工具Dashboard安装"></a>k8s集群可视化管理工具Dashboard安装</h1><h2 id="获取Dashboard镜像"><a href="#获取Dashboard镜像" class="headerlink" title="获取Dashboard镜像"></a>获取Dashboard镜像</h2><ul><li><a href="https://github.com/kubernetes/dashboard" target="_blank" rel="noopener">官方地址</a></li><li>目前官方最新版本为v1.10.1，和前面获取国内镜像文件一样，我们先获取镜像，在把镜像打成对应tag的镜像（注意是每个节点都需要拉取镜像）</li></ul><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 拉取国内镜像</span><br><span class="line">docker pull mirrorgooglecontainers/kubernetes-dashboard-amd64:v1<span class="meta">.10</span><span class="meta">.1</span></span><br><span class="line"></span><br><span class="line"># 重新标 tag</span><br><span class="line">docker tag mirrorgooglecontainers/kubernetes-dashboard-amd64:v1<span class="meta">.10</span><span class="meta">.1</span> k8s.gcr.io/kubernetes-dashboard-amd64:v1<span class="meta">.10</span><span class="meta">.1</span></span><br><span class="line"></span><br><span class="line"># 删除国内拉取的镜像</span><br><span class="line">docker rmi mirrorgooglecontainers/kubernetes-dashboard-amd64:v1<span class="meta">.10</span><span class="meta">.1</span></span><br></pre></td></tr></table></figure><h2 id="安装Dashboard"><a href="#安装Dashboard" class="headerlink" title="安装Dashboard"></a>安装Dashboard</h2><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 官方文档的安装操作</span></span><br><span class="line">kubectl apply -f https:<span class="comment">//raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 下载kubernetes-dashboard.yaml安装</span></span><br><span class="line">kubectl create -f kubernetes-dashboard.yaml</span><br></pre></td></tr></table></figure><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Kubernetes/%E5%8F%AF%E8%A7%86%E5%8C%96%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7dashboard%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.png" alt="可视化管理工具dashboard安装成功"></p><h2 id="Dashboard访问"><a href="#Dashboard访问" class="headerlink" title="Dashboard访问"></a>Dashboard访问</h2><ul><li>Dashboard访问有四种方式（kubectl proxy、NodePort、API Server、Ingress），官方项目中提示我们用kubectl proxy 命令开启代理，然后直接访问地址<a href="http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/，如果是桌面电脑有浏览器当然可以，但是我们k8s部署在服务器上，这个方法显然不适合。此外，还有NodePort和Ingress等方式，由于由于API服务器是公开的，可以从外部访问，所以这里使用API" target="_blank" rel="noopener">http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/，如果是桌面电脑有浏览器当然可以，但是我们k8s部署在服务器上，这个方法显然不适合。此外，还有NodePort和Ingress等方式，由于由于API服务器是公开的，可以从外部访问，所以这里使用API</a> Server的方式来访问dashboard，其他方式访问可以参考以下地址<a href="http://www.ebanban.com/?p=603" target="_blank" rel="noopener">Kubernetes Dashboard v1.10.0安装</a>、<a href="https://blog.csdn.net/judyjie/article/details/85217617" target="_blank" rel="noopener">dashboard v1.10.1安装</a></li></ul><h3 id="API-Server的方式访问-Dashboard"><a href="#API-Server的方式访问-Dashboard" class="headerlink" title="API Server的方式访问 Dashboard"></a>API Server的方式访问 Dashboard</h3><ul><li>首先我们查看k8s运行的地址和端口号</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用如下命令</span></span><br><span class="line">kubectl cluster-info</span><br><span class="line"></span><br><span class="line"><span class="comment"># 集群正常会得到以下信息</span></span><br><span class="line">Kubernetes master is running at https:<span class="regexp">//</span><span class="number">172.31</span>.<span class="number">76.18</span>:<span class="number">6443</span></span><br><span class="line">KubeDNS is running at https:<span class="regexp">//</span><span class="number">172.31</span>.<span class="number">76.18</span>:<span class="number">6443</span><span class="regexp">/api/</span>v1<span class="regexp">/namespaces/</span>kube-system<span class="regexp">/services/</span>kube-dns:dns<span class="regexp">/proxy</span></span><br></pre></td></tr></table></figure><ul><li>接着我们就可以开始访问Dashboard了</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用如下地址格式访问</span></span><br><span class="line">https:<span class="regexp">//</span>&lt;master-ip&gt;:&lt;apiserver-port&gt;<span class="regexp">/api/</span>v1<span class="regexp">/namespaces/</span>kube-system<span class="regexp">/services/</span>https:kubernetes-dashboard:<span class="regexp">/proxy/</span></span><br><span class="line"></span><br><span class="line">https:<span class="regexp">//</span><span class="number">172.31</span>.<span class="number">76.18</span>:<span class="number">6443</span><span class="regexp">/api/</span>v1<span class="regexp">/namespaces/</span>kube-system<span class="regexp">/services/</span>https:kubernetes-dashboard:<span class="regexp">/proxy/</span></span><br></pre></td></tr></table></figure><ul><li>根据如上格式访问Dashboard会得到拒绝访问的信息，错误的原因是k8s基于安全性的考虑，浏览器必须要安装一个根证书，防止中间人攻击（<a href="https://kubernetes.io/docs/tasks/administer-cluster/access-cluster-api/" target="_blank" rel="noopener">官方描述</a>），接下来我们来生成证书再操作。</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"kind"</span>: <span class="string">"Status"</span>,</span><br><span class="line">    <span class="attr">"apiVersion"</span>: <span class="string">"v1"</span>,</span><br><span class="line">    <span class="attr">"metadata"</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">"status"</span>: <span class="string">"Failure"</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"services \"https:kubernetes-dashboard:\" is forbidden: User \"system:anonymous\" cannot get resource \"services/proxy\" in API group \"\" in the namespace \"kube-system\""</span>,</span><br><span class="line">    <span class="attr">"reason"</span>: <span class="string">"Forbidden"</span>,</span><br><span class="line">    <span class="attr">"details"</span>: &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"https:kubernetes-dashboard:"</span>,</span><br><span class="line">        <span class="attr">"kind"</span>: <span class="string">"services"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"code"</span>: <span class="number">403</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生成证书（master-节点操作）"><a href="#生成证书（master-节点操作）" class="headerlink" title="生成证书（master 节点操作）"></a>生成证书（master 节点操作）</h3><ul><li>生成 crt 文件</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">grep</span> <span class="string">'client-certificate-data'</span> /etc/kubernetes/admin.conf | head -n <span class="number">1</span> | awk <span class="string">'&#123;print <span class="variable">$2</span>&#125;'</span> | base64 -d &gt;&gt; kubecfg.crt</span><br></pre></td></tr></table></figure><ul><li>生成 key 文件</li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep 'client-<span class="type">key</span>-data' /etc/kubernetes/admin.conf | head -n <span class="number">1</span> | awk '&#123;print $<span class="number">2</span>&#125;' | base64 -d &gt;&gt; kubecfg.<span class="type">key</span></span><br></pre></td></tr></table></figure><ul><li>生成 p12 证书文件，需要设置生成证书密码 </li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs12 -export -clcerts -inkey kubecfg<span class="selector-class">.key</span> -<span class="keyword">in</span> kubecfg<span class="selector-class">.crt</span> -out kubecfg<span class="selector-class">.p12</span> -name <span class="string">"kubernetes-client"</span></span><br></pre></td></tr></table></figure><ul><li>将生产的p12证书导入到谷歌浏览器中，证书导入也需要密码，也就是上面步骤生成p12证书文件设置的密码，证书导入成功之后重启谷歌浏览器（如何导入证书这里就不细说了）</li><li>再次访问如下地址就会提示我们选择刚刚导入的证书，接下来就会显示如下图所示的认证界面<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//</span><span class="number">172.31</span>.<span class="number">76.18</span>:<span class="number">6443</span><span class="regexp">/api/</span>v1<span class="regexp">/namespaces/</span>kube-system<span class="regexp">/services/</span>https:kubernetes-dashboard:<span class="regexp">/proxy/</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Kubernetes/k8s%E6%8F%90%E7%A4%BA%E9%9C%80%E8%A6%81%E8%AE%A4%E8%AF%81.png" alt="k8s提示需要认证"></p><ul><li><p>这里我们使用token认证，使用token认证前先创建dashboard用户，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">&lt;&lt;EOF</span> <span class="string">| kubectl create -f -</span></span><br><span class="line"><span class="string"></span><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">admin-user</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure></li><li><p>创建ClusterRoleBinding</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cat</span> <span class="string">&lt;&lt;EOF</span> <span class="string">| kubectl create -f -</span></span><br><span class="line"><span class="string"></span><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">admin-user</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line"><span class="attr">  apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="attr">  kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">cluster-admin</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="attr">- kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">admin-user</span></span><br><span class="line"><span class="attr">  namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><ul><li>然后我们在获取用户的token</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kube-system <span class="keyword">describe</span> secret $(kubectl -n kube-<span class="keyword">system</span> <span class="keyword">get</span> secret | grep <span class="keyword">admin</span>-<span class="keyword">user</span> | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Kubernetes/%E8%8E%B7%E5%8F%96%E5%88%9B%E5%BB%BA%E7%9A%84dashboard%E7%94%A8%E6%88%B7token.png" alt="获取创建的dashboard用户token"></p><ul><li>然后将token输入即可，至此Dashboard安装完成</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Kubernetes/Dashboard%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90.png" alt="Dashboard安装完成"></p><h2 id="删除部署的dashboard"><a href="#删除部署的dashboard" class="headerlink" title="删除部署的dashboard"></a>删除部署的dashboard</h2><ul><li>如果dashboard部署不对，可以使用如下命令删除dashboard再重新部署<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="keyword">delete</span> -f kubernetes-dashboard.yaml</span><br></pre></td></tr></table></figure></li></ul><h1 id="搭建过程中出现的错误"><a href="#搭建过程中出现的错误" class="headerlink" title="搭建过程中出现的错误"></a>搭建过程中出现的错误</h1><h2 id="错误1：-kubectl-get-nodes-命令出错"><a href="#错误1：-kubectl-get-nodes-命令出错" class="headerlink" title="错误1： kubectl get nodes 命令出错"></a>错误1： kubectl get nodes 命令出错</h2><h3 id="错误描述"><a href="#错误描述" class="headerlink" title="错误描述"></a>错误描述</h3><ul><li>The connection to the server localhost:8080 was refused - did you specify the right host or port?</li><li>node 节点使用kubectl get nodes命令不出意外也会出现上述错误描述，则我们应该把master 节点的/etc/kubernetes/admin.conf文件复制到node节点/etc/kubernetes/目录下再执行下面命令即可。</li><li><strong>解决：</strong>（<a href="https://github.com/kubernetes/kubernetes/issues/50295" target="_blank" rel="noopener">参考地址</a>）</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line"></span><br><span class="line">cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line">chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure><ul><li>其实以上解决答案在我们初始化master 节点的成功的打印信息中就已经提示我们配置了，不信可以翻看前文master 节点打印信息。</li></ul><h2 id="错误2：-子节点加入Kubernetes集群出现错误"><a href="#错误2：-子节点加入Kubernetes集群出现错误" class="headerlink" title="错误2： 子节点加入Kubernetes集群出现错误"></a>错误2： 子节点加入Kubernetes集群出现错误</h2><h3 id="错误描述-1"><a href="#错误描述-1" class="headerlink" title="错误描述"></a>错误描述</h3><ul><li>FYI: You can look at this config file with ‘kubectl -n kube-system get cm kubeadm-config -oyaml’<br>error execution phase preflight: unable to fetch the kubeadm-config ConfigMap: failed to get config map: Unauthorized</li><li><strong>解决：</strong>（<a href="https://github.com/kubernetes/kubeadm/issues/1310" target="_blank" rel="noopener">参考地址</a>）</li><li>该错误的原因主要是因为token过期了（token默认有效期为24h）,所以我们只要在k8s master节点使用kubeadm命令重新创建新的token就好了<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建新token</span></span><br><span class="line">kubeadm token create</span><br><span class="line"><span class="comment"># 获取sha256</span></span><br><span class="line">openssl x509 -pubkey -<span class="keyword">in</span> <span class="regexp">/etc/</span>kubernetes<span class="regexp">/pki/</span>ca.crt | openssl rsa -pubin -outform der <span class="number">2</span>&gt;<span class="regexp">/dev/</span>null | </span><br><span class="line">openssl dgst -sha256 -hex | sed <span class="string">'s/^.* //'</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Kubernetes/k8s%20master%E8%8A%82%E7%82%B9%E5%88%9B%E5%BB%BA%E6%96%B0%E7%9A%84token.png" alt="k8s master节点创建新的token"></p><h2 id="错误3：Kubeadm-init-或者-join-出现错误"><a href="#错误3：Kubeadm-init-或者-join-出现错误" class="headerlink" title="错误3：Kubeadm init 或者 join 出现错误"></a>错误3：Kubeadm init 或者 join 出现错误</h2><h3 id="错误描述-2"><a href="#错误描述-2" class="headerlink" title="错误描述"></a>错误描述</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[kubelet-<span class="keyword">check</span>] It seems <span class="keyword">like</span> the kubelet isn<span class="string">'t running or healthy.</span></span><br><span class="line"><span class="string">[kubelet-check] The HTTP call equal to '</span>curl -sSL <span class="keyword">http</span>://localhost:<span class="number">10248</span>/healthz<span class="string">' failed with error: Get http://localhost:10248/healthz: dial tcp 127.0.0.1:10248: connect: connection refused.</span></span><br><span class="line"><span class="string">[kubelet-check] It seems like the kubelet isn'</span>t running <span class="keyword">or</span> healthy.</span><br><span class="line">[kubelet-<span class="keyword">check</span>] The <span class="keyword">HTTP</span> <span class="keyword">call</span> equal <span class="keyword">to</span> <span class="string">'curl -sSL http://localhost:10248/healthz'</span> <span class="keyword">failed</span> <span class="keyword">with</span> <span class="keyword">error</span>: <span class="keyword">Get</span> <span class="keyword">http</span>://localhost:<span class="number">10248</span>/healthz: dial tcp <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">10248</span>: <span class="keyword">connect</span>: <span class="keyword">connection</span> refused.</span><br></pre></td></tr></table></figure><ul><li><strong>解决：</strong>（<a href="https://stackoverflow.com/questions/52119985/kubeadm-init-shows-kubelet-isnt-running-or-healthy" target="_blank" rel="noopener">参考地址</a>）</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo swapoff -a</span><br><span class="line">sudo sed -<span class="selector-tag">i</span> <span class="string">'/ swap / s/^/#/'</span> /etc/fstab</span><br></pre></td></tr></table></figure><ul><li>重启机器 reboot the machine，机器重启之后如果docker 不是开机启动的记得启动docker服务</li></ul><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">## 启动 docker 服务</span><br><span class="line">systemctl enable docker.service</span><br><span class="line">## 启动docker</span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><ul><li>重启服务器<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 重启命令</span></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure></li></ul><h2 id="错误4：子节点加入集群node节点DNS-服务-CrashLoopBackOff"><a href="#错误4：子节点加入集群node节点DNS-服务-CrashLoopBackOff" class="headerlink" title="错误4：子节点加入集群node节点DNS 服务 CrashLoopBackOff"></a>错误4：子节点加入集群node节点DNS 服务 CrashLoopBackOff</h2><h3 id="错误描述-3"><a href="#错误描述-3" class="headerlink" title="错误描述"></a>错误描述</h3><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Kubernetes/node%E8%8A%82%E7%82%B9DNS%20CrashLoopBackOff.png" alt="node节点DNS CrashLoopBackOff"></p><ul><li><strong>解决：</strong></li></ul><p>查看有问题服务的日志<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl --namespace kube-<span class="built_in">system</span> logs kube-flannel-<span class="keyword">ds</span>-amd64-g997s</span><br><span class="line"></span><br><span class="line">错误日志：Error from server: Get http<span class="variable">s:</span>//<span class="number">172.31</span>.<span class="number">76.17</span>:<span class="number">10250</span>/containerLogs/kube-<span class="built_in">system</span>/kube-flannel-<span class="keyword">ds</span>-amd64-g997s/kube-flanne<span class="variable">l:</span> dial tcp <span class="number">172.31</span>.<span class="number">76.17</span>:<span class="number">10250</span>: connec<span class="variable">t:</span> <span class="keyword">no</span> route <span class="keyword">to</span> host</span><br></pre></td></tr></table></figure></p><ul><li>从错误日志中可以看出是默认网关的问题，加入网卡默认网关即可，默认网关添加具体需要看自己服务器而定。</li></ul><h2 id="错误5：子节点加入集群node节点出现错误"><a href="#错误5：子节点加入集群node节点出现错误" class="headerlink" title="错误5：子节点加入集群node节点出现错误"></a>错误5：子节点加入集群node节点出现错误</h2><h3 id="错误描述（路由异常问题）"><a href="#错误描述（路由异常问题）" class="headerlink" title="错误描述（路由异常问题）"></a>错误描述（路由异常问题）</h3><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">error </span>execution phase preflight: [preflight] Some fatal errors occurred:</span><br><span class="line">[ERROR FileContent--proc-sys-net-bridge-bridge-nf-call-iptables]: /proc/sys/net/bridge/bridge-nf-call-iptables contents are not set to 1</span><br></pre></td></tr></table></figure><ul><li><strong>解决：</strong> （<a href="https://blog.csdn.net/zhydream77/article/details/81909939" target="_blank" rel="noopener">参考地址</a>）</li></ul><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 执行以下命令</span><br><span class="line">echo <span class="string">"1"</span> &gt;/proc/sys/net/bridge/bridge-nf-call-iptables</span><br><span class="line"></span><br><span class="line">#再次执行 kubeadm join .......命令</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://kubernetes.io/" target="_blank" rel="noopener">kubernetes官方文档</a></li><li><a href="https://www.kubernetes.org.cn/k8s" target="_blank" rel="noopener">kubernetes中文社区</a></li><li><a href="https://blog.csdn.net/qq_34857250/article/details/82562514" target="_blank" rel="noopener">k8s 集群部署问题整理</a></li><li><a href="https://www.jianshu.com/p/3fdcfbeb65d1" target="_blank" rel="noopener">Kubernetes安装Dashboard的方法和思路</a></li><li><a href="https://www.codesheep.cn/2018/12/27/kubeadm-k8s1-13-1/" target="_blank" rel="noopener">利用Kubeadm部署 Kubernetes 1.13.1集群实践录</a>、</li><li><a href="https://soulteary.com/2018/10/03/how-to-get-your-k8s-cluster.html#%E5%AE%89%E8%A3%85-kubeadm-kubectl-kubelet" target="_blank" rel="noopener">简单的 Kubernetes 集群搭建</a></li><li><a href="http://www.ebanban.com/?p=603" target="_blank" rel="noopener">Kubernetes Dashboard v1.10.0安装</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/maoqitian/MaoMdPhoto/raw/master/Kubernetes/kubernetes-logo.png&quot; alt=&quot;kubernetes-logo&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;kubernetes来源于希腊语，意为舵手或领航员，从k8s的logo也能看出这个船舵图标与其名称对应。而我们常说的k8s中的8代表的就是ubernete这个八个字符。这里引用k8s中文社区文档对k8s的描述：&lt;strong&gt;Kubernetes是一个开源的，用于管理云平台中多个主机上的容器化的应用，Kubernetes的目标是让部署容器化的应用简单并且高效（powerful）,Kubernetes提供了应用部署，规划，更新，维护的一种机制。&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="后端" scheme="https://www.maoqitian.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="docker" scheme="https://www.maoqitian.com/tags/docker/"/>
    
      <category term="k8s" scheme="https://www.maoqitian.com/tags/k8s/"/>
    
      <category term="kubeadm" scheme="https://www.maoqitian.com/tags/kubeadm/"/>
    
      <category term="kubectl" scheme="https://www.maoqitian.com/tags/kubectl/"/>
    
      <category term="kubelet" scheme="https://www.maoqitian.com/tags/kubelet/"/>
    
      <category term="k8s Dashboard" scheme="https://www.maoqitian.com/tags/k8s-Dashboard/"/>
    
      <category term="etcd" scheme="https://www.maoqitian.com/tags/etcd/"/>
    
      <category term="flannel" scheme="https://www.maoqitian.com/tags/flannel/"/>
    
  </entry>
  
  <entry>
    <title>Centos下 Nexus 3.x 搭建Maven 私服</title>
    <link href="https://www.maoqitian.com/2019/07/03/Nexus/"/>
    <id>https://www.maoqitian.com/2019/07/03/Nexus/</id>
    <published>2019-07-03T15:39:36.000Z</published>
    <updated>2020-10-15T14:26:43.687Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Maven的原理就是将jar从远程中央仓库下载到PC磁盘的本地仓库,当本地仓库没有发现需要的jar就会去Maven默认的远程中央仓库Maven Central（由Apache维护）中寻找,每次需要新的jar后都要从远程中央仓库上下载。那么问题来了？这个远程的中央仓库一定有很多人使用那下载速度一定很慢，这个暂且不用考虑。 重要的是万一哪天公司外网连不上了咋办？而Nexus私服恰好可以解决这个问题。搭建私服的好处是Nexus有效解决了Maven对Apache的远程中央仓库的依赖，当项目需要新的jar时会先在nexus私服下载好以后才会下载到本地。如果发现私服已经存在这个jar包，则会直接从私服下载到本地Maven库，如果没有再去网络上下载。同时，我们也可打包自己的代码变成jar包上传到私服中供公司其他同事下载使用。<br><a id="more"></a></p></blockquote><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul><li>安装Nexus 之前先确定是否已经安装JDK,这里安装的是jdk8版本（如何安装JDK步骤叙述，）</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Nexus%20maven%E7%A7%81%E6%9C%8D%E9%85%8D%E7%BD%AE/JDK%E5%AE%89%E8%A3%85%E7%89%88%E6%9C%AC.png" alt="安装的JDK 版本"></p><h1 id="安装Nexus"><a href="#安装Nexus" class="headerlink" title="安装Nexus"></a>安装Nexus</h1><ul><li><a href="https://www.sonatype.com/nexus-repository-oss" target="_blank" rel="noopener">nexus下载地址</a></li></ul><h2 id="下载完成后解压安装"><a href="#下载完成后解压安装" class="headerlink" title="下载完成后解压安装"></a>下载完成后解压安装</h2><ul><li><p>解压</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zvxf nexus<span class="number">-3.13</span><span class="number">.0</span><span class="number">-01</span>-unix.tar.gz -C /opt/</span><br></pre></td></tr></table></figure></li><li><p>环境变量配置</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/nexus<span class="number">-3.13</span><span class="number">.0</span><span class="number">-01</span>/bin/nexus</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置JDK 路径</span></span><br><span class="line">INSTALL4J_JAVA_HOME_OVERRIDE=/opt/jdk1<span class="number">.8</span><span class="number">.0</span>_181</span><br></pre></td></tr></table></figure></li><li><p>启动Nexus </p></li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/nexus<span class="number">-3.13</span><span class="number">.0</span><span class="number">-01</span>/bin/nexus start</span><br></pre></td></tr></table></figure><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Nexus%20maven%E7%A7%81%E6%9C%8D%E9%85%8D%E7%BD%AE/%E5%90%AF%E5%8A%A8Nexus.png" alt="启动Nexus"></p><ul><li>浏览器打开Nexus界面，默认端口号是8081（注意需要判断服务器是否开通了该端口号的监听，这里我将默认端口号改成9190）</li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加入9190端口的监听</span></span><br><span class="line">vim /etc/sysconfig/iptables</span><br><span class="line"></span><br><span class="line">查看是否监听端口(如果配置了自己定义的端口，需要先访问该端口一次才能看到监听)</span><br><span class="line"></span><br><span class="line">netstat -ntlp</span><br><span class="line"></span><br><span class="line"><span class="comment">//重启防火墙配置（不重启端口还是无法生效）</span></span><br><span class="line">service iptables restart</span><br><span class="line"></span><br><span class="line"> <span class="comment">//修改端口号</span></span><br><span class="line"> vim /opt/nexus<span class="number">-3.13</span><span class="number">.0</span><span class="number">-01</span>/etc/nexus-<span class="section">default</span>.properties</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//重启Nexus</span></span><br><span class="line"> /opt/nexus<span class="number">-3.13</span><span class="number">.0</span><span class="number">-01</span>/bin/nexus restart</span><br><span class="line"> </span><br><span class="line"> Nexus其他命令</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//停止</span></span><br><span class="line"> nexus stop</span><br><span class="line"></span><br><span class="line"> <span class="comment">//查看状态</span></span><br><span class="line"> nexus status</span><br><span class="line"> </span><br><span class="line"> 默认登录用户名密码</span><br><span class="line"> admin </span><br><span class="line"> admin123</span><br><span class="line"> </span><br><span class="line"> 卸载</span><br><span class="line"> rm -rf nexus<span class="number">-3.13</span>删除掉安装目录即可</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//可以看到Nexus在浏览器中可以打开界面，部署成功，如下图</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Nexus%20maven%E7%A7%81%E6%9C%8D%E9%85%8D%E7%BD%AE/9190%E7%AB%AF%E5%8F%A3%E5%8A%A0%E5%85%A5%E7%9B%91%E5%90%AC.png" alt="9190端口加入监听"></p><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Nexus%20maven%E7%A7%81%E6%9C%8D%E9%85%8D%E7%BD%AE/%E7%BC%96%E8%BE%91Nexus%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%BF%AE%E6%94%B9%E7%AB%AF%E5%8F%A3%E5%8F%B7%E4%B8%BA9190.png" alt="编辑Nexus配置文件修改端口号为9190"></p><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Nexus%20maven%E7%A7%81%E6%9C%8D%E9%85%8D%E7%BD%AE/Nexus%E5%90%AF%E5%8A%A8%E6%88%90%E5%8A%9F.png" alt="Nexus启动成功"></p><h1 id="配置jenkins-maven更新到Nexus私服"><a href="#配置jenkins-maven更新到Nexus私服" class="headerlink" title="配置jenkins,maven更新到Nexus私服"></a>配置jenkins,maven更新到Nexus私服</h1><ul><li>修改Jenkins服务器上的Maven的settings.xml文件(路径是Maven安装路径 /opt/apache-maven-3.5.4/conf/)，加入maven访问nexus认证，访问Nexus的帐号密码为上面登录nexus的默认登录用户名密码</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Nexus%20maven%E7%A7%81%E6%9C%8D%E9%85%8D%E7%BD%AE/maven%E8%AE%BF%E9%97%AEnexus%E8%AE%A4%E8%AF%81.png" alt="maven访问nexus认证"></p><ul><li>maven 项目pom文件配置私服仓库<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span> <span class="comment">&lt;!--id要和上一步配置的id一致--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>local nexus<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://xxxxx:9190/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>local nexus<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://xxxxx:9190/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Nexus-默认的三种类型仓库，创建仓库的时候可以选择这三种"><a href="#Nexus-默认的三种类型仓库，创建仓库的时候可以选择这三种" class="headerlink" title="Nexus 默认的三种类型仓库，创建仓库的时候可以选择这三种"></a>Nexus 默认的三种类型仓库，创建仓库的时候可以选择这三种</h2><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>group(仓库组类型)：又叫组仓库，用于方便开发人员自己设定的仓库；</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>hosted(宿主类型)：内部项目的发布仓库（内部开发人员，发布上去存放的仓库）</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>proxy(代理类型)：从远程中央仓库中寻找数据的仓库（可以点击对应的仓库的 Configuration 页签下 <span class="comment">Remote Storage Location 属性的值即被代理的远程仓库的路径）</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Nexus%20maven%E7%A7%81%E6%9C%8D%E9%85%8D%E7%BD%AE/Nexus%20%E4%B8%89%E7%A7%8D%E4%BB%93%E5%BA%93%E7%B1%BB%E5%9E%8B.png" alt="Nexus 三种仓库类型"></p><h3 id="proxy-代理类型"><a href="#proxy-代理类型" class="headerlink" title="proxy(代理类型)"></a>proxy(代理类型)</h3><ul><li>这里就是代理的意思，代理远程中央 Maven 仓库，当 项目构建访问中央库的时候，先通过代理去远程中央仓库下载依赖包到Nexus 仓库，然后再从Nexus仓库下载到本地。私服我们部署在内网服务器，只要其中一个人从远程中央库下来了，以后相同的依赖包就都是从Nexus私服上进行下载，这样大大加快下载速度，不怕远程中央仓库出现问题。</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Nexus%20maven%E7%A7%81%E6%9C%8D%E9%85%8D%E7%BD%AE/%E4%BB%A3%E7%90%86%E4%BB%93%E5%BA%93%E9%85%8D%E7%BD%AE.png" alt="代理仓库配置"> </p><h3 id="hosted-宿主类型"><a href="#hosted-宿主类型" class="headerlink" title="hosted(宿主类型)"></a>hosted(宿主类型)</h3><ul><li>创建布和代理方式创建差不多</li><li>Hosted 是宿主机的意思，就是怎么把第三方的 Jar 放到私服上。 <pre><code>Hosted 有三种方式，Releases、SNAPSHOT、Mixed</code></pre></li></ul><h3 id="group-仓库组类型"><a href="#group-仓库组类型" class="headerlink" title="group(仓库组类型)"></a>group(仓库组类型)</h3><ul><li>将其他仓库类型合并一起（maven public就是group类型），如图所示将其他仓库合在一下提供对外使用</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Nexus%20maven%E7%A7%81%E6%9C%8D%E9%85%8D%E7%BD%AE/maven%20public%E4%BB%93%E5%BA%93%E5%90%88%E5%B9%B6%E5%85%B6%E4%BB%96%E4%BB%93%E5%BA%93%E5%8F%98%E6%88%90%E7%BB%84.png" alt="maven public仓库合并其他仓库变成组"> </p><h3 id="仓库属性说明"><a href="#仓库属性说明" class="headerlink" title="仓库属性说明"></a>仓库属性说明</h3><ul><li>maven-central：maven中央库，默认从<a href="https://repo1.maven.org/maven2/拉取jar" target="_blank" rel="noopener">https://repo1.maven.org/maven2/拉取jar</a></li><li>maven-releases：私库发行版jar</li><li>maven-snapshots：私库快照（调试版本）jar</li><li>maven-public：仓库分组，把上面三个仓库组合在一起对外提供服务，在本地maven基础配置settings.xml中使用。</li></ul><h1 id="Nexus-jar-包上传与删除"><a href="#Nexus-jar-包上传与删除" class="headerlink" title="Nexus jar 包上传与删除"></a>Nexus jar 包上传与删除</h1><h2 id="上传jar包"><a href="#上传jar包" class="headerlink" title="上传jar包"></a>上传jar包</h2><ul><li>如果我们使用的远程maven中心库有jar包无法下载，或者是我们自己编译好的jar包提供给公司其他人，则可以将本地jar包上传到私服仓库</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Nexus%20maven%E7%A7%81%E6%9C%8D%E9%85%8D%E7%BD%AE/nexus%20%E4%B8%8A%E4%BC%A0jar%E5%8C%85.png" alt="nexus 上传jar包"></p><h2 id="私服jar删除"><a href="#私服jar删除" class="headerlink" title="私服jar删除"></a>私服jar删除</h2><ul><li>私服jar出现问题，我们也可以删除私服的jar包重新下载或自行上传</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Nexus%20maven%E7%A7%81%E6%9C%8D%E9%85%8D%E7%BD%AE/%E7%A7%81%E6%9C%8Djar%E5%88%A0%E9%99%A4.png" alt="私服jar删除"></p><blockquote><p>到此，Nexus搭建Maven私服服务已经完成.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Maven的原理就是将jar从远程中央仓库下载到PC磁盘的本地仓库,当本地仓库没有发现需要的jar就会去Maven默认的远程中央仓库Maven Central（由Apache维护）中寻找,每次需要新的jar后都要从远程中央仓库上下载。那么问题来了？这个远程的中央仓库一定有很多人使用那下载速度一定很慢，这个暂且不用考虑。 重要的是万一哪天公司外网连不上了咋办？而Nexus私服恰好可以解决这个问题。搭建私服的好处是Nexus有效解决了Maven对Apache的远程中央仓库的依赖，当项目需要新的jar时会先在nexus私服下载好以后才会下载到本地。如果发现私服已经存在这个jar包，则会直接从私服下载到本地Maven库，如果没有再去网络上下载。同时，我们也可打包自己的代码变成jar包上传到私服中供公司其他同事下载使用。&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Nexus Maven 私服" scheme="https://www.maoqitian.com/categories/Nexus-Maven-%E7%A7%81%E6%9C%8D/"/>
    
    
      <category term="Maven" scheme="https://www.maoqitian.com/tags/Maven/"/>
    
      <category term="Nexus" scheme="https://www.maoqitian.com/tags/Nexus/"/>
    
      <category term="CentOS" scheme="https://www.maoqitian.com/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>git 使用</title>
    <link href="https://www.maoqitian.com/2019/05/07/git-%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.maoqitian.com/2019/05/07/git-使用/</id>
    <published>2019-05-07T15:41:54.000Z</published>
    <updated>2020-10-15T14:26:43.687Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Git/Git%20logo.png" alt="Git logo"></p><blockquote><p>在日常开发的过程中，对于代码版本的控制已经是是一个习以为常的功能了，接下就记录一下使用Git来作为版本控制的一些常用操作命名，方便自己查看回顾。<br><a id="more"></a></p></blockquote><h2 id="git-基本操作"><a href="#git-基本操作" class="headerlink" title="git 基本操作"></a>git 基本操作</h2><ul><li><p>git 提交流程</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git init (初始化本地仓库)</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line">git commit -m <span class="string">"提交描述"</span></span><br><span class="line"></span><br><span class="line">git remote add origin git@github.com:maoqitian/MyPracticeView.git （首先确定ssh key 是否存在，否则会拉取失败）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git pull --rebase origin <span class="keyword">master</span> <span class="title">（合并操作）</span></span><br><span class="line"><span class="title"></span></span><br><span class="line"><span class="title"></span></span><br><span class="line"><span class="title">git</span> push -u origin <span class="keyword">master</span> <span class="title">(提交到远程仓库)</span></span><br></pre></td></tr></table></figure></li><li><p>master 分支链接成功之后，拉取分支代码</p></li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fetch <span class="keyword">origin </span>wiki 把远程分支拉到本地</span><br><span class="line">git checkout -<span class="keyword">b </span>wiki <span class="keyword">origin/wiki </span>在本地创建分支wiki并切换到该分支</span><br><span class="line">git pull <span class="keyword">origin </span>wiki 拉分支</span><br></pre></td></tr></table></figure><ul><li>查看用户名</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>user.name</span><br><span class="line">git<span class="built_in"> config </span>user.email</span><br></pre></td></tr></table></figure><ul><li>修改配置用户名 </li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.name <span class="string">"your name"</span></span><br><span class="line">git<span class="built_in"> config </span>--global user.email <span class="string">"your email"</span></span><br></pre></td></tr></table></figure><h3 id="分支切换与合并"><a href="#分支切换与合并" class="headerlink" title="分支切换与合并"></a>分支切换与合并</h3><ul><li><p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001375840038939c291467cc7c747b1810aab2fb8863508000://note.youdao.com/" target="_blank" rel="noopener">参考链接</a></p></li><li><p>创建新分支</p></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -<span class="selector-tag">b</span> dev</span><br></pre></td></tr></table></figure><ul><li>切换主分支 （切换分支出现Your local changes to the following files would be overwritten by checkout <a href="https://blog.csdn.net/qq_32452623/article/details/75645578" target="_blank" rel="noopener">解决办法</a>，说白了就是有文件没跟踪到，重新提交一下就可以解决，也可强制切换(不推荐)）</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout <span class="literal">master</span></span><br></pre></td></tr></table></figure><ul><li>合并分支</li></ul><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">merge</span> dev</span><br></pre></td></tr></table></figure><ul><li>拉取、提交到远程代码</li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#拉取</span></span><br><span class="line"> git pull origin <span class="literal">master</span></span><br><span class="line"><span class="comment"># 提交</span></span><br><span class="line">git push origin <span class="literal">master</span></span><br></pre></td></tr></table></figure><h2 id="gitignore-文件不起作用"><a href="#gitignore-文件不起作用" class="headerlink" title=".gitignore 文件不起作用"></a>.gitignore 文件不起作用</h2><ul><li><p>清除对应文件夹的提交记录缓存 </p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">git</span> <span class="comment">rm</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">cached</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">force</span> <span class="literal">-</span><span class="comment">r</span> <span class="comment">gxxmt</span><span class="literal">-</span><span class="comment">admin/target/</span></span><br></pre></td></tr></table></figure></li><li><p>清除所有文件夹的缓存记录 </p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm -r <span class="comment">--cached .</span></span><br></pre></td></tr></table></figure></li><li><p>清除完成之后重复 add 和 commit操作则能使用新的忽略规则  </p></li><li><p>删除GitLab 上的文件，首先克隆代码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm -r <span class="comment">--cached target</span></span><br><span class="line">git <span class="keyword">commit</span> -m <span class="string">'delete'</span></span><br><span class="line">git push -u origin <span class="keyword">master</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="fork-同步远程代码到本账户仓库"><a href="#fork-同步远程代码到本账户仓库" class="headerlink" title="fork 同步远程代码到本账户仓库"></a>fork 同步远程代码到本账户仓库</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">git remote -v(查看链接库情况)</span><br><span class="line"></span><br><span class="line">git remote add upstream git@<span class="number">172.17</span>.<span class="number">118.127</span>:activity/gxxmt.git（添加远程连接）</span><br><span class="line"></span><br><span class="line">git fetch upstream （拉取远程更新）</span><br><span class="line"></span><br><span class="line">git merge upstream/<span class="keyword">master</span> <span class="title">（合并远程更新到本地，此时只是本地仓库和远程主分支同步，要保持gitlab</span> 仓库和远程同步，还需提交）</span><br><span class="line"></span><br><span class="line">前两步合并操作 git pull upstream <span class="literal">master</span></span><br><span class="line"></span><br><span class="line">git push origin <span class="literal">master</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//分支获取</span><br><span class="line">git checkout wiki（切换分支）</span><br><span class="line"></span><br><span class="line">git pull upstream wiki （获取wiki分支更新 相当于git fetch 和merge 一起操作）</span><br><span class="line"></span><br><span class="line">git push origin wiki(提交更新到远程库（自己fork的库）)</span><br></pre></td></tr></table></figure><ul><li>获取代码并切换分支</li></ul><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone git<span class="variable">@172</span>.<span class="number">31.116</span>.<span class="number">11</span><span class="symbol">:maoqitian/gxxmt</span>.git</span><br><span class="line"></span><br><span class="line">git checkout -b wiki origin/wiki</span><br></pre></td></tr></table></figure><ul><li>提交代码到github不显示正确的提交记录（github不显示小绿点），查询git 设置的邮箱和github对应的邮箱是否一致<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查看设置的邮箱</span></span><br><span class="line">git config  user<span class="selector-class">.email</span> “username@mail.com”</span><br><span class="line"><span class="comment">//设置邮箱</span></span><br><span class="line">git config --global user<span class="selector-class">.email</span> “username@mail.com”</span><br></pre></td></tr></table></figure></li></ul><h2 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h2><ul><li><p>git tag 打标签(漫长版本迭代中比较重要)</p></li><li><p>正常提交一个版本流程 </p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git checkout <span class="keyword">master</span> <span class="title">(切换主分支)</span></span><br><span class="line"><span class="title">git</span> merge dev(开发分支)</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"提交说明"</span></span><br><span class="line">git <span class="keyword">tag</span> <span class="title">-a</span> v1.<span class="number">8.1</span> -m '版本说明'</span><br><span class="line">git push origin <span class="keyword">master</span> <span class="title">(远程同步分支)</span></span><br><span class="line"><span class="title">git</span> push --<span class="keyword">tag</span></span><br></pre></td></tr></table></figure></li><li><p>对以前提交记录加入 tag </p></li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git log --<span class="attr">pretty=</span>oneline (显示提交历史)</span><br><span class="line"></span><br><span class="line">git <span class="keyword">tag</span> <span class="title">-a</span> v1.<span class="number">2</span> <span class="number">9</span>fceb02 -m <span class="string">"版本说明"</span> (提交对象的校验和（或前几位字符）) </span><br><span class="line">git push origin v1.<span class="number">2</span> (远程同步 <span class="keyword">tag</span> <span class="title">)</span></span><br><span class="line"><span class="title">(或者 远程同步所有tags</span>) git push origin --tags</span><br></pre></td></tr></table></figure><ul><li>删除 tag </li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">tag</span> <span class="title">(查看tag</span> )</span><br><span class="line">git <span class="keyword">tag</span> <span class="title">-d</span> 标签名 (本地删除)</span><br><span class="line">git push origin :refs/tags/标签名 (远程标签删除)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/maoqitian/MaoMdPhoto/raw/master/Git/Git%20logo.png&quot; alt=&quot;Git logo&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在日常开发的过程中，对于代码版本的控制已经是是一个习以为常的功能了，接下就记录一下使用Git来作为版本控制的一些常用操作命名，方便自己查看回顾。&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="development tool" scheme="https://www.maoqitian.com/categories/development-tool/"/>
    
    
      <category term="Git" scheme="https://www.maoqitian.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Java注解完全解析回顾</title>
    <link href="https://www.maoqitian.com/2019/03/25/Java-annotation/"/>
    <id>https://www.maoqitian.com/2019/03/25/Java-annotation/</id>
    <published>2019-03-25T15:30:54.000Z</published>
    <updated>2020-10-15T14:26:43.686Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>关于注解首先引入官方文档的一句话：Java 注解用于为 Java 代码提供元数据。作为元数据，注解不直接影响你的代码执行，但也有一些类型的注解实际上可以用于这一目的。Java 注解是从 Java5 开始添加到 Java 的。看完这句话也许你还是一脸懵逼，接下我将从注解的定义、元注解、注解属性、自定义注解、注解解析JDK 提供的注解这几个方面再次了解注解（Annotation）<br><a id="more"></a></p></blockquote><h2 id="注解的定义"><a href="#注解的定义" class="headerlink" title="注解的定义"></a>注解的定义</h2><ul><li>日常开发中新建Java类，我们使用class、interface比较多，而注解和它们一样，也是一种类的类型，他是用的修饰符为 @interface</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Java%E6%B3%A8%E8%A7%A3%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%90/Java%E4%B8%AD%E6%96%B0%E5%BB%BA%E7%B1%BB.png" alt="Java中新建类"></p><h3 id="注解类的写法"><a href="#注解类的写法" class="headerlink" title="注解类的写法"></a>注解类的写法</h3><ul><li><p>我们新建一个注解MyTestAnnotation</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> @<span class="class"><span class="keyword">interface</span> <span class="title">MyTestAnnotation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接着我们就可以在类或者方法上作用我们刚刚新建的注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MyTestAnnotation</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">   <span class="meta">@MyTestAnnotation</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>以上我们只是了解了注解的写法，但是我们定义的注解中还没写任何代码，现在这个注解毫无意义，要如何使注解工作呢？接下来我们接着了解元注解。</p><h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2></li><li>元注解顾名思义我们可以理解为注解的注解，它是作用在注解中，方便我们使用注解实现想要的功能。元注解分别有@Retention、 @Target、 @Document、 @Inherited和@Repeatable（JDK1.8加入）五种。<h3 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h3></li><li>Retention英文意思有保留、保持的意思，它表示注解存在阶段是保留在源码（编译期），字节码（类加载）或者运行期（JVM中运行）。在@Retention注解中使用枚举RetentionPolicy来表示注解保留时期</li><li>@Retention(RetentionPolicy.SOURCE)，注解仅存在于源码中，在class字节码文件中不包含</li><li>@Retention(RetentionPolicy.CLASS)， 默认的保留策略，注解会在class字节码文件中存在，但运行时无法获得</li><li>@Retention(RetentionPolicy.RUNTIME)， 注解会在class字节码文件中存在，在运行时可以通过反射获取到</li><li>如果我们是自定义注解，则通过前面分析，我们自定义注解如果只存着源码中或者字节码文件中就无法发挥作用，而在运行期间能获取到注解才能实现我们目的，所以自定义注解中肯定是使用 <strong>@Retention(RetentionPolicy.RUNTIME)</strong><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line">public <span class="variable">@interface</span> MyTestAnnotation &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h3><ul><li>Target的英文意思是目标，这也很容易理解，使用@Target元注解表示我们的注解作用的范围就比较具体了，可以是类，方法，方法参数变量等，同样也是通过枚举类ElementType表达作用类型</li><li>@Target(ElementType.TYPE) 作用接口、类、枚举、注解</li><li>@Target(ElementType.FIELD) 作用属性字段、枚举的常量</li><li>@Target(ElementType.METHOD) 作用方法</li><li>@Target(ElementType.PARAMETER) 作用方法参数</li><li>@Target(ElementType.CONSTRUCTOR)  作用构造函数</li><li>@Target(ElementType.LOCAL_VARIABLE)作用局部变量</li><li>@Target(ElementType.ANNOTATION_TYPE)作用于注解（@Retention注解中就使用该属性）</li><li>@Target(ElementType.PACKAGE) 作用于包 </li><li>@Target(ElementType.TYPE_PARAMETER) 作用于类型泛型，即泛型方法、泛型类、泛型接口 （jdk1.8加入）</li><li>@Target(ElementType.TYPE_USE) 类型使用.可以用于标注任意类型除了 class （jdk1.8加入）</li><li>一般比较常用的是ElementType.TYPE类型<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="variable">@Target</span>(ElementType.TYPE)</span><br><span class="line">public <span class="variable">@interface</span> MyTestAnnotation &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Documented"><a href="#Documented" class="headerlink" title="@Documented"></a>@Documented</h3><ul><li>Document的英文意思是文档。它的作用是能够将注解中的元素包含到 Javadoc 中去。<h3 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h3></li><li>Inherited的英文意思是继承，但是这个继承和我们平时理解的继承大同小异，一个被@Inherited注解了的注解修饰了一个父类，如果他的子类没有被其他注解修饰，则它的子类也继承了父类的注解。</li><li>下面我们来看个@Inherited注解例子</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**自定义注解*/</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Retention</span>(<span class="type">RetentionPolicy</span>.<span class="type">RUNTIME</span>)</span><br><span class="line"><span class="meta">@Target</span>(<span class="type">ElementType</span>.<span class="type">TYPE</span>)</span><br><span class="line">public <span class="meta">@interface</span> <span class="type">MyTestAnnotation</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**父类标注自定义注解*/</span></span><br><span class="line"><span class="meta">@MyTestAnnotation</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**子类*/</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**测试子类获取父类自定义注解*/</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">   public static void main(<span class="type">String</span>[] args)&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//获取Son的class对象</span></span><br><span class="line">       <span class="type">Class</span>&lt;<span class="type">Son</span>&gt; sonClass = <span class="type">Son</span>.<span class="keyword">class</span>;</span><br><span class="line">      <span class="comment">// 获取Son类上的注解MyTestAnnotation可以执行成功</span></span><br><span class="line">      <span class="type">MyTestAnnotation</span> annotation = sonClass.getAnnotation(<span class="type">MyTestAnnotation</span>.<span class="keyword">class</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Repeatable"><a href="#Repeatable" class="headerlink" title="@Repeatable"></a>@Repeatable</h3><ul><li>Repeatable的英文意思是可重复的。顾名思义说明被这个元注解修饰的注解可以同时作用一个对象多次，但是每次作用注解又可以代表不同的含义。</li><li>下面我们看一个人玩游戏的例子</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**一个人喜欢玩游戏，他喜欢玩英雄联盟，绝地求生，极品飞车，尘埃4等，则我们需要定义一个人的注解，他属性代表喜欢玩游戏集合，一个游戏注解，游戏属性代表游戏名称*/</span></span><br><span class="line"><span class="comment">/**玩家注解*/</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> People &#123;</span><br><span class="line">    Game[] value() ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**游戏注解*/</span></span><br><span class="line"><span class="meta">@Repeatable(People.class)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Game &#123;</span><br><span class="line">    String value() <span class="keyword">default</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**玩游戏类*/</span></span><br><span class="line"><span class="meta">@Game(value = <span class="meta-string">"LOL"</span>)</span></span><br><span class="line"><span class="meta">@Game(value = <span class="meta-string">"PUBG"</span>)</span></span><br><span class="line"><span class="meta">@Game(value = <span class="meta-string">"NFS"</span>)</span></span><br><span class="line"><span class="meta">@Game(value = <span class="meta-string">"Dirt4"</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlayGame</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过上面的例子，你可能会有一个疑问，游戏注解中括号的变量是啥，其实这和游戏注解中定义的属性对应。接下来我们继续学习注解的属性。<h2 id="注解的属性"><a href="#注解的属性" class="headerlink" title="注解的属性"></a>注解的属性</h2></li><li>通过上一小节@Repeatable注解的例子，我们说到注解的属性。注解的属性其实和类中定义的变量有异曲同工之处，只是注解中的变量都是成员变量（属性），并且注解中是没有方法的，只有成员变量，变量名就是使用注解括号中对应的参数名，变量返回值注解括号中对应参数类型。相信这会你应该会对上面的例子有一个更深的认识。而@Repeatable注解中的变量则类型则是对应Annotation（接口）的泛型Class。<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**注解Repeatable源码*/</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.ANNOTATION_TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Repeatable &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Indicates the &lt;em&gt;containing annotation type&lt;/em&gt; for the</span></span><br><span class="line"><span class="comment">     * repeatable annotation type.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the containing annotation type</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class&lt;? extends Annotation&gt; value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="注解的本质"><a href="#注解的本质" class="headerlink" title="注解的本质"></a>注解的本质</h3><ul><li>注解的本质就是一个Annotation接口</li></ul><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**Annotation接口源码*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Annotation</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> Annotation&gt; annotationType();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过以上源码，我们知道注解本身就是Annotation接口的子接口，<strong>也就是说注解中其实是可以有属性和方法，但是接口中的属性都是static final的，对于注解来说没什么意义，而我们定义接口的方法就相当于注解的属性，也就对应了前面说的为什么注解只有属性成员变量，其实他就是接口的方法，这就是为什么成员变量会有括号</strong>，不同于接口我们可以在注解的括号中给成员变量赋值。<h3 id="注解属性类型"><a href="#注解属性类型" class="headerlink" title="注解属性类型"></a>注解属性类型</h3></li><li>注解属性类型可以有以下列出的类型</li><li>1.基本数据类型</li><li>2.String</li><li>3.枚举类型</li><li>4.注解类型</li><li>5.Class类型</li><li>6.以上类型的一维数组类型<h3 id="注解成员变量赋值"><a href="#注解成员变量赋值" class="headerlink" title="注解成员变量赋值"></a>注解成员变量赋值</h3></li><li>如果注解又多个属性，则可以在注解括号中用“，”号隔开分别给对应的属性赋值，如下例子，注解在父类中赋值属性<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyTestAnnotation &#123;</span><br><span class="line">    String name() <span class="keyword">default</span> <span class="string">"mao"</span>;</span><br><span class="line">    int age() <span class="keyword">default</span> <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MyTestAnnotation(name = <span class="meta-string">"father"</span>,age = 50)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="获取注解属性"><a href="#获取注解属性" class="headerlink" title="获取注解属性"></a>获取注解属性</h3><ul><li>前面我们说了很多注解如何定义，放在哪，现在我们可以开始学习注解属性的提取了，这才是使用注解的关键，获取属性的值才是使用注解的目的。</li><li><p>如果获取注解属性，当然是反射啦，主要有三个基本的方法</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**是否存在对应 Annotation 对象*/</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">boolean</span> isAnnotationPresent(<span class="class"><span class="keyword">Class</span>&lt;? <span class="keyword">extends</span> <span class="title">Annotation</span>&gt; <span class="title">annotationClass</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> GenericDeclaration.super.isAnnotationPresent(annotationClass);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**获取 Annotation 对象*/</span></span><br><span class="line">   <span class="keyword">public</span> &lt;A extends Annotation&gt; A getAnnotation(<span class="class"><span class="keyword">Class</span>&lt;<span class="title">A</span>&gt; <span class="title">annotationClass</span>) </span>&#123;</span><br><span class="line">       Objects.requireNonNull(annotationClass);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> (A) annotationData().annotations.get(annotationClass);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">/**获取所有 Annotation 对象数组*/</span>   </span><br><span class="line"><span class="keyword">public</span> Annotation[] getAnnotations() &#123;</span><br><span class="line">       <span class="keyword">return</span> AnnotationParser.toArray(annotationData().annotations);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>下面结合前面的例子，我们来获取一下注解属性，在获取之前我们自定义的注解必须使用元注解@Retention(RetentionPolicy.RUNTIME) </p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">class</span> test &#123;</span><br><span class="line">   public static <span class="keyword">void</span> main(String[] args) <span class="meta">throws</span> NoSuchMethodException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取类注解属性</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Class&lt;Father&gt; fatherClass = Father.<span class="keyword">class</span>;</span><br><span class="line">        boolean annotationPresent = fatherClass.isAnnotationPresent(MyTestAnnotation.<span class="keyword">class</span>);</span><br><span class="line">        <span class="keyword">if</span>(annotationPresent)&#123;</span><br><span class="line">            MyTestAnnotation <span class="keyword">annotation</span> = fatherClass.getAnnotation(MyTestAnnotation.<span class="keyword">class</span>);</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="keyword">annotation</span>.name());</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="keyword">annotation</span>.age());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取方法注解属性</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field age = fatherClass.getDeclaredField(<span class="string">"age"</span>);</span><br><span class="line">            boolean annotationPresent<span class="number">1</span> = age.isAnnotationPresent(Age.<span class="keyword">class</span>);</span><br><span class="line">            <span class="keyword">if</span>(annotationPresent<span class="number">1</span>)&#123;</span><br><span class="line">                Age <span class="keyword">annotation</span> = age.getAnnotation(Age.<span class="keyword">class</span>);</span><br><span class="line">                System.<span class="keyword">out</span>.println(<span class="keyword">annotation</span>.<span class="keyword">value</span>());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Method play = PlayGame.<span class="keyword">class</span>.getDeclaredMethod(<span class="string">"play"</span>);</span><br><span class="line">            <span class="keyword">if</span> (play!=null)&#123;</span><br><span class="line">                People <span class="keyword">annotation</span><span class="number">2</span> = play.getAnnotation(People.<span class="keyword">class</span>);</span><br><span class="line">                Game[] <span class="keyword">value</span> = <span class="keyword">annotation</span><span class="number">2</span>.<span class="keyword">value</span>();</span><br><span class="line">                <span class="keyword">for</span> (Game game : <span class="keyword">value</span>) &#123;</span><br><span class="line">                    System.<span class="keyword">out</span>.println(game.<span class="keyword">value</span>());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>运行结果：</p><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Java%E6%B3%A8%E8%A7%A3%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%90/%E8%8E%B7%E5%8F%96%E6%B3%A8%E8%A7%A3%E5%B1%9E%E6%80%A7%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt="获取注解属性运行结果"></p><h2 id="JDK-提供的注解"><a href="#JDK-提供的注解" class="headerlink" title="JDK 提供的注解"></a>JDK 提供的注解</h2><table><thead><tr><th>注解</th><th>作用</th><th>注意事项</th></tr></thead><tbody><tr><td>@Override</td><td>它是用来描述当前方法是一个重写的方法，在编译阶段对方法进行检查</td><td>jdk1.5中它只能描述继承中的重写，jdk1.6中它可以描述接口实现的重写,也能描述类的继承的重写</td></tr><tr><td>@Deprecated</td><td>它是用于描述当前方法是一个过时的方法</td><td>无</td></tr><tr><td>@SuppressWarnings</td><td>对程序中的警告去除。</td><td>无</td></tr></tbody></table><h2 id="注解作用与应用"><a href="#注解作用与应用" class="headerlink" title="注解作用与应用"></a>注解作用与应用</h2><ul><li><p>现在我们再次回头看看开头官方文档的那句描述</p><blockquote><p>Java 注解用于为 Java 代码提供元数据。作为元数据，注解不直接影响你的代码执行，但也有一些类型的注解实际上可以用于这一目的。</p></blockquote></li><li><p>经过我们前面的了解，注解其实是个很方便的东西，它存活的时间，作用的区域都可以由你方便设置，只是你用注解来干嘛的问题</p></li></ul><h3 id="使用注解进行参数配置"><a href="#使用注解进行参数配置" class="headerlink" title="使用注解进行参数配置"></a>使用注解进行参数配置</h3><ul><li>下面我们看一个银行转账的例子，假设银行有个转账业务，转账的限额可能会根据汇率的变化而变化，我们可以利用注解灵活配置转账的限额，而不用每次都去修改我们的业务代码。<figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**定义限额注解*/</span></span><br><span class="line"><span class="keyword">@Documented</span></span><br><span class="line"><span class="keyword">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">@interface</span> BankTransferMoney &#123;</span><br><span class="line">    <span class="built_in">double</span> maxMoney() <span class="keyword">default</span> <span class="number">10000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**转账处理业务类*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> BankService &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @param money 转账金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">@BankTransferMoney</span>(maxMoney = <span class="number">15000</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> TransferMoney(<span class="built_in">double</span> money)&#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(processAnnotationMoney(money));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String processAnnotationMoney(<span class="built_in">double</span> money) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Method transferMoney = BankService.<span class="keyword">class</span>.getDeclaredMethod(<span class="string">"TransferMoney"</span>,<span class="built_in">double</span>.<span class="keyword">class</span>);</span><br><span class="line">            boolean annotationPresent = transferMoney.isAnnotationPresent(BankTransferMoney.<span class="keyword">class</span>);</span><br><span class="line">            <span class="keyword">if</span>(annotationPresent)&#123;</span><br><span class="line">                BankTransferMoney annotation = transferMoney.getAnnotation(BankTransferMoney.<span class="keyword">class</span>);</span><br><span class="line">                <span class="built_in">double</span> l = annotation.maxMoney();</span><br><span class="line">                <span class="keyword">if</span>(money&gt;l)&#123;</span><br><span class="line">                   <span class="keyword">return</span> <span class="string">"转账金额大于限额，转账失败"</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span><span class="string">"转账金额为:"</span>+money+<span class="string">"，转账成功"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> ( NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"转账处理失败"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args)&#123;</span><br><span class="line">        TransferMoney(<span class="number">10000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>运行结果：</p><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Java%E6%B3%A8%E8%A7%A3%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%90/%E8%BD%AC%E8%B4%A6%E5%A4%84%E7%90%86%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt="转账处理运行结果"></p><ul><li>通过上面的例子，只要汇率变化，我们就改变注解的配置值就可以直接改变当前最大限额。<h3 id="第三方框架的应用"><a href="#第三方框架的应用" class="headerlink" title="第三方框架的应用"></a>第三方框架的应用</h3></li><li>作为一个Android 开发者，平常我们所使用的第三方框架ButterKnife，Retrofit2，Dagger2等都有注解的应用，如果我们要了解这些框架的原理，则注解的基础知识则是必不可少的。<h3 id="注解的作用"><a href="#注解的作用" class="headerlink" title="注解的作用"></a>注解的作用</h3></li><li>提供信息给编译器： 编译器可以利用注解来检测出错误或者警告信息，打印出日志。</li><li>编译阶段时的处理： 软件工具可以用来利用注解信息来自动生成代码、文档或者做其它相应的自动处理。</li><li>运行时处理： 某些注解可以在程序运行的时候接受代码的提取，自动做相应的操作。</li><li>正如官方文档的那句话所说，注解能够提供元数据，转账例子中处理获取注解值的过程是我们开发者直接写的注解提取逻辑，<strong>处理提取和处理 Annotation 的代码统称为 APT（Annotation Processing Tool)</strong>。上面转账例子中的processAnnotationMoney方法就可以理解为APT工具类。</li></ul><h2 id="最后说点"><a href="#最后说点" class="headerlink" title="最后说点"></a>最后说点</h2><p>到此，对于Java中注解的解析就结束了。最后，也非常感谢您阅读我的文章，文章中如果有错误，请大家给我提出来，大家一起学习进步，如果觉得我的文章给予你帮助，也请给我一个喜欢和关注，同时也欢迎访问我的<a href="https://www.maoqitian.com"><strong>个人博客</strong></a>。</p><ul><li><a href="https://github.com/maoqitian/JavaDemo/tree/master/annotationdemo" target="_blank" rel="noopener">文中Demo地址</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;关于注解首先引入官方文档的一句话：Java 注解用于为 Java 代码提供元数据。作为元数据，注解不直接影响你的代码执行，但也有一些类型的注解实际上可以用于这一目的。Java 注解是从 Java5 开始添加到 Java 的。看完这句话也许你还是一脸懵逼，接下我将从注解的定义、元注解、注解属性、自定义注解、注解解析JDK 提供的注解这几个方面再次了解注解（Annotation）&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java基础回顾" scheme="https://www.maoqitian.com/categories/Java%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE/"/>
    
    
      <category term="Java" scheme="https://www.maoqitian.com/tags/Java/"/>
    
      <category term="annotation" scheme="https://www.maoqitian.com/tags/annotation/"/>
    
      <category term="反射" scheme="https://www.maoqitian.com/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>从零开始 hexo 个人博客搭建完全指南</title>
    <link href="https://www.maoqitian.com/2019/03/12/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B-hexo-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97/"/>
    <id>https://www.maoqitian.com/2019/03/12/从零开始-hexo-个人博客搭建完全指南/</id>
    <published>2019-03-12T12:07:38.000Z</published>
    <updated>2020-10-15T14:26:43.690Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://avatars2.githubusercontent.com/u/6375567?s=200&amp;v=4" alt="image"></p><blockquote><p>个人博客对于我们知识的积累过程中起到温故而知新的作用，并且也能达到展示自我的目的。接下来就大致介绍一下以<a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">hexo</a>为基础搭建个人博客的过程。<br><a id="more"></a></p></blockquote><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li>安装 <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git</a><a href="https://note.youdao.com/" target="_blank" rel="noopener">link</a> node.js（直接安装就行） </li><li><p>安装 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/hexo%E5%AE%89%E8%A3%85.png" alt="hexo安装"></p></li><li>假设你已经有了自己的github账号<h3 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h3></li><li><p>选择一个目录初始化hexo</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo init</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E5%88%9D%E5%A7%8B%E5%8C%96hexo.png" alt="初始化hexo"></p></li><li><p>创建 hexo</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E5%88%9B%E5%BB%BAhexo.png" alt="创建hexo"></p></li><li><p>开启hexo本地服务</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo s</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/hexo%E6%9C%AC%E5%9C%B0%E5%90%AF%E5%8A%A8.png" alt="hexo本地启动"></p><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E8%AE%BF%E9%97%AE%E5%90%AF%E5%8A%A8%E6%9C%AC%E5%9C%B0hexo%E7%AB%99.png" alt="访问启动本地hexo站"></p></li></ul><h3 id="hexo关联github"><a href="#hexo关联github" class="headerlink" title="hexo关联github"></a>hexo关联github</h3><ul><li>首先需要有github账号（没有则先注册）</li><li><p>其次创建github仓库，仓库名称为&lt;用户名&gt;.github.io</p></li><li><p>安装hexo-deployer-git插件。在命令行（即Git Bash）运行以下命令即可</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure><p> <img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E5%AE%89%E8%A3%85hexo-deployer-git%E6%8F%92%E4%BB%B6.png" alt="安装hexo-deployer-git插件"></p></li><li><p>修改_config.yml（在站点目录下）。文件末尾修改为（注意冒号之后必须添一个空格）</p> <figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Deployment</span></span><br><span class="line"><span class="meta">## Docs: https:<span class="comment">//hexo.io/docs/deployment.html</span></span></span><br><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol"> type:</span> git</span><br><span class="line"><span class="symbol"> repository:</span> git@github.com:maoqitian/maoqitian.github.io.git</span><br><span class="line"><span class="symbol"> branch:</span> master</span><br></pre></td></tr></table></figure></li><li><p>推送到GithubPages。在命令行（即Git Bash）依次输入以下命令， 返回INFO Deploy done: git即成功推送：</p> <figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo g</span><br><span class="line"><span class="variable">$ </span>hexo d</span><br></pre></td></tr></table></figure><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E6%8E%A8%E9%80%81%E5%88%B0github%E6%88%90%E5%8A%9F.png" alt="推送到github成功"></p></li><li><p>访问我们刚刚搭建好的<a href="maoqitian.github.io">githubPages</a>博客 </p><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E8%AE%BF%E9%97%AEgithubPages%E5%8D%9A%E5%AE%A2.png" alt="访问githubPages博客"></p></li></ul><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><ul><li><p>域名解析（需要到购买域名的网站设置）</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">类型选择为 CNAME；</span><br><span class="line"></span><br><span class="line">主机记录即域名前缀，填写为www；</span><br><span class="line"></span><br><span class="line">记录值填写为自定义域名；</span><br><span class="line"></span><br><span class="line">解析线路，<span class="meta">TTL</span> 默认即可</span><br></pre></td></tr></table></figure><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E8%AE%BE%E7%BD%AE%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E6%B7%BB%E5%8A%A0%E8%AE%B0%E5%BD%95.png" alt="设置域名解析添加记录"></p><ul><li><p>绑定域名可能出现https连接不安全，可以获取免费证书，参照链接： <a href="https://juejin.im/entry/5a8bd9f25188257a5911cfc6" target="_blank" rel="noopener">Hexo绑定自定义Https域名</a></p><h3 id="美化hexo博客样式"><a href="#美化hexo博客样式" class="headerlink" title="美化hexo博客样式"></a>美化hexo博客样式</h3><h4 id="安装主题-NexT-（官方文档已经写得很详细）"><a href="#安装主题-NexT-（官方文档已经写得很详细）" class="headerlink" title="安装主题 NexT （官方文档已经写得很详细）"></a>安装主题 NexT （官方文档已经写得很详细）</h4></li><li><p><a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a></p><h4 id="开启动效背景"><a href="#开启动效背景" class="headerlink" title="开启动效背景"></a>开启动效背景</h4><h5 id="方式1-主题自带的效果"><a href="#方式1-主题自带的效果" class="headerlink" title="方式1 主题自带的效果"></a>方式1 主题自带的效果</h5></li><li>主题配置文件_config.yml将false改为 true</li></ul></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Canvas-nest</span></span><br><span class="line"><span class="attr">canvas_nest:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h5 id="方式2-设置不是主题自带的效果"><a href="#方式2-设置不是主题自带的效果" class="headerlink" title="方式2 设置不是主题自带的效果"></a>方式2 设置不是主题自带的效果</h5><ul><li>主题中新添加内容 _layout.swig 文件</li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 找到themes\next\layout\_layout.swig文件，添加内容：</span></span><br><span class="line"><span class="comment"># 在&lt;body&gt;里添加：</span></span><br><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"bg_content"</span>&gt;</span><br><span class="line">  &lt;canvas <span class="built_in">id</span>=<span class="string">"canvas"</span>&gt;&lt;/canvas&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 仍是该文件，在末尾添加：</span></span><br><span class="line">&lt;<span class="keyword">script</span> type=<span class="string">"text/javascript"</span> src=<span class="string">"/js/src/dynamic_bg.js"</span>&gt;&lt;/<span class="keyword">script</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>添加动效背景js代码 dynamic_bg.js</li><li>在themes\next\source\js\src中新建文件dynamic_bg.js，js代码详情可见：<a href="https://github.com/maoqitian/maoqitian.github.io/blob/master/js/src/dynamic_bg.js" target="_blank" rel="noopener">dynamic_bg.js</a></li><li>修改样式 custom.styl<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 在<span class="selector-tag">themes</span>\<span class="selector-tag">next</span>\<span class="selector-tag">source</span>\<span class="selector-tag">css</span>\_<span class="selector-tag">custom</span>\<span class="selector-tag">custom</span><span class="selector-class">.styl</span>文件末尾添加内容：</span><br><span class="line"><span class="selector-class">.bg_content</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="设置圆形头头像"><a href="#设置圆形头头像" class="headerlink" title="设置圆形头头像"></a>设置圆形头头像</h4><blockquote><p>/themes/next/source/css/_common/components/sidebar/sidebar-author.styl </p></blockquote><pre><code><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.site-author-image</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line"><span class="attribute">padding</span>: $site-author-image-padding;</span><br><span class="line"><span class="attribute">max-width</span>: $site-author-image-width;</span><br><span class="line"><span class="attribute">height</span>: $site-author-image-height;</span><br><span class="line"><span class="attribute">border</span>: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">60%</span>;</span><br><span class="line"><span class="attribute">transition</span>: <span class="number">2.5s</span> all;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.site-author-image</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(360deg);</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.site-author-name</span> &#123;</span><br><span class="line"><span class="attribute">margin</span>: $site-author-name-margin;</span><br><span class="line"><span class="attribute">text-align</span>: $site-author-name-align;</span><br><span class="line"><span class="attribute">color</span>: $site-author-name-color;</span><br><span class="line"><span class="attribute">font-weight</span>: $site-author-name-weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.site-description</span> &#123;</span><br><span class="line"><span class="attribute">margin-top</span>: $site-description-margin-top;</span><br><span class="line"><span class="attribute">text-align</span>: $site-description-align;</span><br><span class="line"><span class="attribute">font-size</span>: $site-description-font-size;</span><br><span class="line"><span class="attribute">color</span>: $site-description-color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><h4 id="主题NexT修改网站标志"><a href="#主题NexT修改网站标志" class="headerlink" title="主题NexT修改网站标志"></a>主题NexT修改网站标志</h4><blockquote><p>themes\next\source\images 路径下替换favicon-16x16-next.png</p></blockquote><blockquote><p>themes\next\source\images路径修改头像替换avatar.jpg，并且在主题配置文件中开启头像设置</p></blockquote>  <figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">avatar:</span> <span class="meta-keyword">/images/</span>avatar.jpg</span><br></pre></td></tr></table></figure><h4 id="修改网页头背景图"><a href="#修改网页头背景图" class="headerlink" title="修改网页头背景图"></a>修改网页头背景图</h4><blockquote><p>themes\next\source\css_common\components\header路径下</p></blockquote>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.header</span> &#123;<span class="attribute">background-image</span>: <span class="built_in">url</span>(图片地址 或者图片路径images\xxx.jpg);&#125;</span><br></pre></td></tr></table></figure><h4 id="修改logo字体、menu背景（字体文件需要自行下载）"><a href="#修改logo字体、menu背景（字体文件需要自行下载）" class="headerlink" title="修改logo字体、menu背景（字体文件需要自行下载）"></a>修改logo字体、menu背景（字体文件需要自行下载）</h4><ul><li><p>在themes/*/source/css/_custom/custom.styl中添加如下代码：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// Custom styles.</span></span><br><span class="line">    @font-face &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Bungasai;</span><br><span class="line">    src: url(<span class="string">'/fonts/Bungasai.ttf'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="selector-class">.site-title</span> &#123;</span><br><span class="line">   <span class="attribute">font-size</span>: <span class="number">45px</span> <span class="meta">!important</span>;</span><br><span class="line"><span class="attribute">font-family</span>: <span class="string">'Bungasai'</span> <span class="meta">!important</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>其中字体文件在 themes/next/source/fonts 目录下，里面有个 .gitkeep 的隐藏文件，打开写入你要保留的字体文件</li><li><p>去掉logo字体背景图</p><blockquote><p>在theme/next/source/css/_common/components/header文件夹下打开site-meta.styl文件，找到.brand{},去掉background: $brand-bg 字段</p></blockquote></li><li><p>修改menu样式（\blog\themes\next\source\css_common\components\header\menu.styl文件）</p></li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Menu</span></span><br><span class="line"><span class="comment">// --------------------------------------------------</span></span><br><span class="line"><span class="selector-class">.menu</span> &#123;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">padding-left</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line"><span class="attribute">background</span>: rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.55</span>);</span><br><span class="line"><span class="attribute">margin-left</span>: auto;</span><br><span class="line"><span class="attribute">margin-right</span>: auto;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">470px</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: initial;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menu</span> <span class="selector-class">.menu-item</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: inline-block;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line"><span class="attribute">list-style</span>: none;</span><br><span class="line"></span><br><span class="line"> @<span class="keyword">media</span> screen and (max-width: 767px) &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: inherit;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="variable">$menu-link-border</span>;</span><br><span class="line">  <span class="attribute">transition-property</span>: border-color;</span><br><span class="line">  the-<span class="attribute">transition</span>();</span><br><span class="line"></span><br><span class="line">  &amp;:hover &#123; <span class="attribute">border-bottom-color</span>: <span class="variable">$menu-link-hover-border</span>; &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="selector-class">.fa</span> &#123; <span class="attribute">margin-right</span>: <span class="number">5px</span>; &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.use-motion</span> <span class="selector-class">.menu-item</span> &#123; <span class="attribute">opacity</span>: <span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="添加RSS"><a href="#添加RSS" class="headerlink" title="添加RSS"></a>添加RSS</h4><blockquote><p>在博客文件夹下面 blog/ 使用git bash 下载插件</p></blockquote>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="comment">--save hexo-generator-feed</span></span><br></pre></td></tr></table></figure><blockquote><p>打开主题配置文件搜索rss并修改为如下</p></blockquote>  <figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">rss:</span> /atom.xml</span><br></pre></td></tr></table></figure><blockquote><p>重新启动发布博客hexo clean清除缓存后$ hexo g 生成静态文件，在文件夹(public)下看到 atom.xml 文件</p></blockquote><h4 id="设置侧边栏社交小图标"><a href="#设置侧边栏社交小图标" class="headerlink" title="设置侧边栏社交小图标"></a>设置侧边栏社交小图标</h4><blockquote><p>打开主题配置文件搜索social,把#去掉就可以启用，如需新增在<a href="https://fontawesome.com/icons" target="_blank" rel="noopener">图标库</a>找自己喜欢的小图标，并将名字复制按social格式修改即可</p></blockquote>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line"><span class="attr">GitHub:</span> <span class="attr">https://github.com/maoqitian</span> <span class="string">||</span> <span class="string">github</span></span><br><span class="line"><span class="string">掘金:</span> <span class="attr">https://juejin.im/user/59e956626fb9a045204b57d4</span> <span class="string">||</span> <span class="string">drupal</span> </span><br><span class="line"><span class="string">简书:</span> <span class="attr">https://www.jianshu.com/u/f58cd7ff1a08</span> <span class="string">||</span> <span class="string">book（图标库图标名称）</span></span><br><span class="line"></span><br><span class="line"><span class="attr">social_icons:</span></span><br><span class="line"><span class="attr">enable:</span> <span class="literal">true</span>   <span class="comment">#是否启用图标</span></span><br><span class="line"><span class="attr">icons_only:</span> <span class="literal">false</span>  <span class="comment">#是否启只显示图标不显示文字</span></span><br><span class="line"><span class="attr">transition:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="自定义网站底部"><a href="#自定义网站底部" class="headerlink" title="自定义网站底部"></a>自定义网站底部</h4><blockquote><p>打开主题配置文件搜索 footer 并按如下对应项修改</p></blockquote>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line"><span class="attr">since:</span> <span class="number">2018</span>     <span class="comment">#指定建站时间，如果没有定义，则使用主题创建当年</span></span><br><span class="line"><span class="attr">icon:</span> <span class="string">heart</span>     <span class="comment">#修改底部心型图形</span></span><br><span class="line"><span class="attr">powered:</span> <span class="literal">false</span>  <span class="comment">#关闭默认数据驱动支持</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭主题名称和版本号</span></span><br><span class="line"><span class="attr">theme:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">false</span> </span><br><span class="line"><span class="attr">  version:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li><p>底部添加访客数和总访问量(编辑主题配置文件)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line"><span class="comment"># count values only if the other configs are false</span></span><br><span class="line"><span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># custom uv span for the whole site</span></span><br><span class="line"><span class="attr">site_uv:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#本站访客数</span></span><br><span class="line"><span class="attr">site_uv_header:</span> <span class="string">&lt;i</span> <span class="string">class="fa</span> <span class="string">fa-user"&gt;&lt;/i&gt;</span> <span class="string">本站访客数</span></span><br><span class="line"><span class="attr">site_uv_footer:</span> <span class="string">人次</span></span><br><span class="line"><span class="comment"># custom pv span for the whole site</span></span><br><span class="line"><span class="attr">site_pv:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">site_pv_header:</span> <span class="string">&lt;i</span> <span class="string">class="fa</span> <span class="string">fa-eye"&gt;&lt;/i&gt;</span> <span class="string">本站总访问量</span></span><br><span class="line"><span class="attr">site_pv_footer:</span> <span class="string">次</span></span><br><span class="line"><span class="comment"># custom pv span for one page only</span></span><br><span class="line"><span class="attr">page_pv:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">page_pv_header:</span> <span class="string">&lt;i</span> <span class="string">class="fa</span> <span class="string">fa-file-o"&gt;&lt;/i&gt;</span> <span class="string">本文阅读量</span></span><br><span class="line"><span class="attr">page_pv_footer:</span> <span class="string">次</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="网页加载样式"><a href="#网页加载样式" class="headerlink" title="网页加载样式"></a>网页加载样式</h4><blockquote><p>编辑主题配置文件</p></blockquote>  <figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 开启网页加载</span></span><br><span class="line">pace: <span class="literal">true</span></span><br><span class="line"><span class="meta"># 可以设置的加载样式列表:</span></span><br><span class="line"><span class="meta">#pace-theme-big-counter</span></span><br><span class="line"><span class="meta">#pace-theme-bounce</span></span><br><span class="line"><span class="meta">#pace-theme-barber-shop</span></span><br><span class="line"><span class="meta">#pace-theme-center-atom</span></span><br><span class="line"><span class="meta">#pace-theme-center-circle</span></span><br><span class="line"><span class="meta">#pace-theme-center-radar</span></span><br><span class="line"><span class="meta">#pace-theme-center-simple</span></span><br><span class="line"><span class="meta">#pace-theme-corner-indicator</span></span><br><span class="line"><span class="meta">#pace-theme-fill-left</span></span><br><span class="line"><span class="meta">#pace-theme-flash</span></span><br><span class="line"><span class="meta">#pace-theme-loading-bar</span></span><br><span class="line"><span class="meta">#pace-theme-mac-osx</span></span><br><span class="line"><span class="meta">#pace-theme-minimal</span></span><br><span class="line"><span class="meta"># For example</span></span><br><span class="line"><span class="meta"># pace_theme: pace-theme-center-simple</span></span><br><span class="line"><span class="meta"># 设置网页加载样式</span></span><br><span class="line">pace_theme: pace-theme-center-atom</span><br></pre></td></tr></table></figure><h4 id="在右上角添加fork-me-on-github"><a href="#在右上角添加fork-me-on-github" class="headerlink" title="在右上角添加fork me on github"></a>在右上角添加fork me on github</h4><ul><li><p>样式地址</p><ul><li><a href="https://blog.github.com/2008-12-19-github-ribbons/" target="_blank" rel="noopener">样式1</a></li><li><a href="http://tholman.com/github-corners/" target="_blank" rel="noopener">样式2</a><blockquote><p>在上面样式连接中 挑选自己喜欢的样式，并复制代码。然后把刚才复制的代码粘贴到 themes\next\layout_layout.swig 文件中(放在 <div class="headband"></div> 的下面)，并把href改为你的github地址</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"https://your-url"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"github-corner"</span> aria-label=<span class="string">"View source on GitHub"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"80"</span> <span class="attr">height</span>=<span class="string">"80"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 250 250"</span> <span class="attr">style</span>=<span class="string">"fill:#151513; color:#fff; position: absolute; top: 0; border: 0; right: 0;"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2"</span> <span class="attr">fill</span>=<span class="string">"currentColor"</span> <span class="attr">style</span>=<span class="string">"transform-origin: 130px 106px;"</span> <span class="attr">class</span>=<span class="string">"octo-arm"</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z"</span> <span class="attr">fill</span>=<span class="string">"currentColor"</span> <span class="attr">class</span>=<span class="string">"octo-body"</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"><span class="selector-class">.github-corner</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:octocat-wave <span class="number">560ms</span> ease-in-out&#125;@<span class="keyword">keyframes</span> octocat-wave&#123;0%,100%&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(0)&#125;20%,60%&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(-25deg)&#125;40%,80%&#123;<span class="attribute">transform</span>:<span class="built_in">rotate</span>(10deg)&#125;&#125;@<span class="keyword">media</span> (max-width:<span class="number">500px</span>)&#123;<span class="selector-class">.github-corner</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:none&#125;<span class="selector-class">.github-corner</span> <span class="selector-class">.octo-arm</span>&#123;<span class="attribute">animation</span>:octocat-wave <span class="number">560ms</span> ease-in-out&#125;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><h4 id="自定义文章底部版权"><a href="#自定义文章底部版权" class="headerlink" title="自定义文章底部版权"></a>自定义文章底部版权</h4><blockquote><p>打开主题配置文件搜索 post_copyright 并按如下对应项修改：</p></blockquote>  <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">post_copyright:</span></span><br><span class="line"><span class="string">enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">license:</span> CC BY-NC-ND <span class="number">4.0</span></span><br><span class="line"><span class="string">license_url:</span> <span class="string">https:</span><span class="comment">//creativecommons.org/licenses/by-nc-nd/4.0/deed.zh</span></span><br></pre></td></tr></table></figure><blockquote><p>经过上面配置底部版权部分只能出现文章作者，文章链接和版权声明，我们可以修改next\layout_macro\post-copyright.swig 文件，添加文章标题和文章发布日期</p></blockquote>  <figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/2.0.0/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/sweetalert/dist/sweetalert.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"post-copyright"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"post-copyright-title"</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">strong</span>&gt;</span></span><span class="template-variable">&#123;&#123; __('post.copyright.title') + __('symbol.colon') &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="xml">   </span><span class="template-variable">&#123;&#123; post.title | default(config.title) &#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"post-copyright-author"</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">strong</span>&gt;</span></span><span class="template-variable">&#123;&#123; __('post.copyright.author') + __('symbol.colon') &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="xml">   </span><span class="template-variable">&#123;&#123; post.author | default(config.author) &#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"post-copyright-created_at"</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">strong</span>&gt;</span></span><span class="template-variable">&#123;&#123; __('post.copyright.created_at') + __('symbol.colon') &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="xml">   </span><span class="template-variable">&#123;&#123; <span class="name">date</span><span class="params">(post.date, config.date_format)</span> &#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"post-copyright-link"</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">strong</span>&gt;</span></span><span class="template-variable">&#123;&#123; __('post.copyright.link') + __('symbol.colon') &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; post.url | default(post.permalink) &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">title</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; post.title &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span><span class="template-variable">&#123;&#123; post.url | default(post.permalink) &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"copy-path"</span>  <span class="attr">title</span>=<span class="string">"点击复制文章链接"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-clipboard"</span> <span class="attr">data-clipboard-text</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; page.permalink &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>  <span class="attr">aria-label</span>=<span class="string">"复制成功！"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"post-copyright-license"</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">strong</span>&gt;</span></span><span class="template-variable">&#123;&#123; __('post.copyright.license_title') + __('symbol.colon') &#125;&#125;</span><span class="xml"> <span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="xml">   </span><span class="template-variable">&#123;&#123; __('post.copyright.license_content', theme.post_copyright.license_url, theme.post_copyright.license) &#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"> </span></span></span><br><span class="line"><span class="xml">   var clipboard = new Clipboard('.fa-clipboard');</span></span><br><span class="line"><span class="xml">   $(".fa-clipboard").click(function()&#123;</span></span><br><span class="line"><span class="xml">     clipboard.on('success', function()&#123;</span></span><br><span class="line"><span class="xml">       swal(&#123;</span></span><br><span class="line"><span class="xml">         title: "",</span></span><br><span class="line"><span class="xml">         text: '复制文章链接成功',</span></span><br><span class="line"><span class="xml">         icon: "success",</span></span><br><span class="line"><span class="xml">         showConfirmButton: true</span></span><br><span class="line"><span class="xml">         &#125;);</span></span><br><span class="line"><span class="xml">    &#125;);</span></span><br><span class="line"><span class="xml">   &#125;);  </span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>经过如上配置，文章标题和发布日期都显示出来了，但是只能显示英文，中文配置文件没有对应的中文，打开 themes\next\languages\zh-Hans.yml 搜索 copyright： 自定义修改类别名称如下</p></blockquote>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">copyright:</span></span><br><span class="line"><span class="attr">  title:</span> <span class="string">本文标题</span></span><br><span class="line"><span class="attr">  created_at:</span> <span class="string">发布时间</span></span><br><span class="line"><span class="attr">  author:</span> <span class="string">本文作者</span></span><br><span class="line"><span class="attr">  link:</span> <span class="string">本文链接</span></span><br><span class="line"><span class="attr">  license_title:</span> <span class="string">版权声明</span></span><br><span class="line"><span class="attr">  license_content:</span> <span class="string">'本博客所有文章除特别声明外，均采用</span></span><br><span class="line"><span class="string">    &lt;a href="%s" rel="external nofollow" target="_blank"&gt;%s&lt;/a&gt; 许可协议。转载请注明出处！'</span></span><br></pre></td></tr></table></figure><h4 id="更好的管理文章"><a href="#更好的管理文章" class="headerlink" title="更好的管理文章"></a>更好的管理文章</h4><blockquote><p>根据<a href="https://hexo.io/zh-cn/docs/asset-folders.html" target="_blank" rel="noopener">官方说明</a>，编辑博客配置文件</p></blockquote>  <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">方式一：（不管是方式一还是方式二，都是必须的）：</span><br><span class="line">_config.yml</span><br><span class="line"><span class="string">post_asset_folder:</span> <span class="literal">true</span></span><br><span class="line">方式二（下载插件，在bolg文件目录下执行命令）：</span><br><span class="line">npm install <span class="string">https:</span><span class="comment">//github.com/CodeFalling/hexo-asset-image --save</span></span><br></pre></td></tr></table></figure><blockquote><p>hexo新建文章后的目录结构</p></blockquote>  <figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> _posts</span><br><span class="line">├── demo文章</span><br><span class="line"><span class="string">|   ├── demo1.jpg</span></span><br><span class="line"><span class="string">|   ├── demo2.jpg</span></span><br><span class="line"><span class="string">|   └── demo3.jpg</span></span><br><span class="line">└── demo文章.md</span><br></pre></td></tr></table></figure><blockquote><p>正确的引用图片方式是使用下列的标签插件</p></blockquote>  <figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">方式一：</span><br><span class="line">&#123;<span class="symbol">%</span> asset_img <span class="built_in">example</span>.jpg This <span class="built_in">is</span> an <span class="built_in">example</span> <span class="built_in">image</span> <span class="symbol">%</span>&#125;</span><br><span class="line">方式二：</span><br><span class="line">&lt;img src=<span class="string">"/demo文章/demo1.jpg"</span> alt=<span class="string">"demo文章"</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h4><ul><li><p>比如新建标签页</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 新建页面 <span class="keyword">tags</span> </span><br><span class="line">hexo <span class="keyword">new</span> page <span class="keyword">tags</span></span><br><span class="line"></span><br><span class="line"># \blog\<span class="keyword">source</span>\<span class="keyword">tags</span>目录下 <span class="built_in">index</span>.md，编辑设置<span class="built_in">type</span>类型为<span class="keyword">tags</span></span><br><span class="line">title: 标签</span><br><span class="line">date: <span class="number">2018</span>-<span class="number">2</span>-<span class="number">22</span> <span class="number">23</span>:<span class="number">39</span>:<span class="number">04</span></span><br><span class="line"><span class="built_in">type</span>: <span class="string">"tags"</span></span><br><span class="line"></span><br><span class="line">//编辑主题配置文件，<span class="keyword">tags</span> 加上刚刚新建页面的相对目录</span><br><span class="line"><span class="keyword">menu</span>:</span><br><span class="line">home: / || home</span><br><span class="line"><span class="keyword">tag</span><span class="variable">s:</span> /<span class="keyword">tags</span>/ || <span class="keyword">tags</span>(图标代码 Font Awesome)</span><br><span class="line">categorie<span class="variable">s:</span> /categories/ || <span class="keyword">th</span></span><br><span class="line">archive<span class="variable">s:</span> /archives/ || archive</span><br><span class="line">abou<span class="variable">t:</span> /about/ || user</span><br></pre></td></tr></table></figure></li></ul><h4 id="显示当前浏览进度"><a href="#显示当前浏览进度" class="headerlink" title="显示当前浏览进度"></a>显示当前浏览进度</h4><blockquote><p>修主题配置文件config.yml，把 false 改为 true</p></blockquote>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line"><span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable sidebar on narrow view (only for Muse | Mist).</span></span><br><span class="line"><span class="attr">onmobile:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="添加字数统计"><a href="#添加字数统计" class="headerlink" title="添加字数统计"></a>添加字数统计</h4><ul><li>下载插件（bolg目录下）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-wordcount <span class="comment">--save</span></span><br></pre></td></tr></table></figure><ul><li>在主题配置文件中找到如下配置，并修改配置如下</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_meta:</span></span><br><span class="line"><span class="attr">  item_text:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  created_at:</span> <span class="literal">true</span> <span class="comment">#发布时间</span></span><br><span class="line"><span class="attr">  updated_at:</span> <span class="literal">false</span> <span class="comment">#更新时间</span></span><br><span class="line"><span class="attr">  categories:</span> <span class="literal">true</span> <span class="comment">#分类</span></span><br><span class="line"></span><br><span class="line"><span class="attr">post_wordcount:</span></span><br><span class="line"><span class="attr">  item_text:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  wordcount:</span> <span class="literal">true</span> <span class="comment">#单篇字数统计</span></span><br><span class="line"><span class="attr">  min2read:</span> <span class="literal">true</span> <span class="comment">#单篇阅读时长</span></span><br><span class="line"><span class="attr">  totalcount:</span> <span class="literal">false</span> <span class="comment">#站点字数统计</span></span><br><span class="line"><span class="attr">  separated_meta:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>显示样式加上“字”和“分钟”，则打开 themes\next\layout_macro\post.swig 文件分别搜索代码，并把“字”和“分钟”按如下添加到代码后面</li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">title</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; __('post.wordcount') &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="template-variable">&#123;&#123; wordcount(post.content) &#125;&#125;</span><span class="xml"> 字</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">title</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; __('post.min2read') &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="template-variable">&#123;&#123; min2read(post.content) &#125;&#125;</span><span class="xml"> 分钟</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="添加浏览统计"><a href="#添加浏览统计" class="headerlink" title="添加浏览统计"></a>添加浏览统计</h4><h5 id="文章浏览统计"><a href="#文章浏览统计" class="headerlink" title="文章浏览统计"></a>文章浏览统计</h5><ul><li>注册<a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a>账号</li><li>创建一个项目，在项目的存储模块新建新建Class用来专门保存我们博客的文章访问量等数据，我们前面对NexT主题的修改兼容，此处的新建Class名字必须为Counter，由于LeanCloud升级了默认的ACL权限，如果你想避免后续因为权限的问题导致次数统计显示不正常，建议在此处选择无限制</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/leancloud%E5%88%9B%E5%BB%BAclass.png" alt="leancloud创建class"></p><ul><li><p>获取我们前面新建项目的app_id和app_key，主题配置文件中设置对应信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">leancloud_visitors:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  app_id:</span> <span class="comment">#&lt;app_id&gt;</span></span><br><span class="line"><span class="attr">  app_key:</span> <span class="comment">#&lt;app_key&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Web安全<br>因为AppID以及AppKey是暴露在外的，因此如果一些别用用心之人知道了之后用于其它目的是得不偿失的，为了确保只用于我们自己的博客，建议开启Web安全选项，这样就只能通过我们自己的域名才有权访问后台的数据了，可以进一步提升安全性。选择应用的设置的安全中心选项卡，加入我们域名保存。</p></li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/leancloud%E8%AE%BE%E7%BD%AE%E5%AE%89%E5%85%A8%E5%9F%9F%E5%90%8D.png" alt="leancloud设置安全域名"></p><h5 id="站点浏览统计-不蒜子"><a href="#站点浏览统计-不蒜子" class="headerlink" title="站点浏览统计 不蒜子"></a>站点浏览统计 不蒜子</h5><ul><li><p>显示站点统计</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">busuanzi_count:</span><br><span class="line">  # count values only <span class="keyword">if</span> the other configs are <span class="literal">false</span></span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  # custom uv span <span class="keyword">for</span> the whole site</span><br><span class="line">  site_uv: <span class="literal">true</span></span><br><span class="line">  #本站访客数</span><br><span class="line">  site_uv_header: &lt;i <span class="attribute">class</span>=<span class="string">"fa fa-user"</span>&gt;&lt;/i&gt; 本站访客数</span><br><span class="line">  site_uv_footer: 人次</span><br><span class="line">  # custom pv span <span class="keyword">for</span> the whole site</span><br><span class="line">  site_pv: <span class="literal">true</span></span><br><span class="line">  site_pv_header: &lt;i <span class="attribute">class</span>=<span class="string">"fa fa-eye"</span>&gt;&lt;/i&gt; 本站总访问量</span><br><span class="line">  site_pv_footer: 次</span><br><span class="line">  # custom pv span <span class="keyword">for</span> one<span class="built_in"> page </span>only</span><br></pre></td></tr></table></figure></li><li><p>如果无法显示字数统计，原因为不蒜子域名过期的问题</p></li><li>解决：进入 hexo 博客项目的 themes 目录下，在 next 主题目录中的 layout/_third-party/analytics/ 下找到 busuanzi-counter.swig 文件<br>把：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>改为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="添加搜索功能（基于Next主题）"><a href="#添加搜索功能（基于Next主题）" class="headerlink" title="添加搜索功能（基于Next主题）"></a>添加搜索功能（基于Next主题）</h4><ul><li><p>安装插件searchdb</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-generator-searchdb <span class="comment">--save</span></span><br></pre></td></tr></table></figure></li><li><p>hexo博客配置文件中添加如下配置</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">search:</span></span><br><span class="line"><span class="symbol">  path:</span> search.xml</span><br><span class="line"><span class="symbol">  field:</span> post</span><br><span class="line"><span class="symbol">  format:</span> html</span><br><span class="line"><span class="symbol">  limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure></li><li><p>Next主题配置_config.yml文件中更改如下配置（enable设置为true）</p></li></ul><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">local_search:</span></span><br><span class="line"><span class="symbol">  enable:</span> true</span><br><span class="line">  <span class="meta"># <span class="meta-keyword">if</span> auto, trigger search by changing input</span></span><br><span class="line">  <span class="meta"># <span class="meta-keyword">if</span> manual, trigger search by pressing enter key or search button</span></span><br><span class="line"><span class="symbol">  trigger:</span> auto</span><br><span class="line">  <span class="meta"># show top n results per article, show all results by setting to -1</span></span><br><span class="line"><span class="symbol">  top_n_per_article:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="能够显示大图"><a href="#能够显示大图" class="headerlink" title="能够显示大图"></a>能够显示大图</h4><ul><li><p>方法一：文章属性中加入图片链接</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">demo</span> <span class="string">title</span> </span><br><span class="line"><span class="attr">date:</span> <span class="number">2019</span><span class="bullet">-01</span><span class="bullet">-14</span> <span class="number">15</span><span class="string">:55:49</span></span><br><span class="line"><span class="attr">toc:</span> <span class="literal">false</span> <span class="comment">#是否显示文章目录</span></span><br><span class="line"><span class="attr">categories:</span>  </span><br><span class="line"><span class="bullet">-</span> <span class="string">持续集成（CI）</span> <span class="comment">#分类</span></span><br><span class="line"><span class="attr">tags:</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">Jenkins</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">GitLab</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">CentOS</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Maven</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Tomcat</span></span><br><span class="line"><span class="attr">photos:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">"https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/Jenkins.jpg"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></li><li><p>方法二：由于markdown是支持原生html的，所以我们可以在正文引用img来为我们的文章设置摘要配图。</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//在“&lt;!--</span> <span class="string">more</span> <span class="bullet">--&gt;”之前的内容都会展示到摘要中(同时与你主题文件中配置的摘要字数有关).</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">demo</span> <span class="string">title</span> </span><br><span class="line"><span class="attr">date:</span> <span class="number">2019</span><span class="bullet">-01</span><span class="bullet">-14</span> <span class="number">15</span><span class="string">:55:49</span></span><br><span class="line"><span class="attr">toc:</span> <span class="literal">false</span> <span class="comment">#是否显示文章目录</span></span><br><span class="line"><span class="attr">categories:</span>  </span><br><span class="line"><span class="bullet">-</span> <span class="string">持续集成（CI）</span> <span class="comment">#分类</span></span><br><span class="line"><span class="attr">tags:</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">Jenkins</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">GitLab</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">CentOS</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Maven</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Tomcat</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">&lt;img</span> <span class="string">src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/Jenkins.jpg"</span> <span class="string">width=50%</span> <span class="string">/&gt;</span></span><br><span class="line"><span class="string">&lt;!--more--&gt;</span></span><br></pre></td></tr></table></figure><h4 id="添加评论"><a href="#添加评论" class="headerlink" title="添加评论"></a>添加评论</h4><ul><li>添加<a href="https://www.livere.com/" target="_blank" rel="noopener">来必力</a>评论系统</li><li>首先注册来必力账号（163邮箱可以注册）</li><li>安装创建（实际就是创建一个网站评论项目，填写你的）</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/39c2ad856ab065e47c96d50f8e28cd151c142750/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E6%9D%A5%E5%BF%85%E5%8A%9B%E8%AF%84%E8%AE%BA%E5%AE%89%E8%A3%85.png" alt="来必力评论安装"></p><ul><li>获取livere_uid也就是（也就是代码管理的data-uid）</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/39c2ad856ab065e47c96d50f8e28cd151c142750/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E6%9D%A5%E5%BF%85%E5%8A%9Buid%E8%8E%B7%E5%8F%96.png" alt="来必力uid获取"></p><ul><li>最后修改主题配置文件字段，填入上一步获取的livere_uid<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">livere_uid:</span> you uid</span><br></pre></td></tr></table></figure></li></ul><h4 id="修改文章代码显示样式"><a href="#修改文章代码显示样式" class="headerlink" title="修改文章代码显示样式"></a>修改文章代码显示样式</h4><ul><li>修改hexo配置文件<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  line_number:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  auto_detect:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  tab_replace:</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="5-22-博客文章分页"><a href="#5-22-博客文章分页" class="headerlink" title="5.22 博客文章分页"></a>5.22 博客文章分页</h4><ul><li>hexo博客配置文件中<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">## 每页显示的文章量 (0 = 关闭分页功能)</span></span><br><span class="line"><span class="symbol">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="symbol">pagination_dir:</span> page</span><br></pre></td></tr></table></figure></li></ul><h4 id="博客文章阴影效果"><a href="#博客文章阴影效果" class="headerlink" title="博客文章阴影效果"></a>博客文章阴影效果</h4><ul><li>修改主题目录下themes/next/source/css/_custom/custom.styl文件添加代码</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//文章添加阴影效果 1</span></span><br><span class="line"><span class="selector-class">.post</span>&#123;</span><br><span class="line">    <span class="attribute">margin-top</span>:<span class="number">60px</span>;</span><br><span class="line">    <span class="selector-class">.post-block</span> &#123;</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">35px</span> <span class="number">30px</span>;</span><br><span class="line">      <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">      <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">2px</span> <span class="number">0</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.12</span>), <span class="number">0</span> <span class="number">3px</span> <span class="number">1px</span> -<span class="number">2px</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.06</span>), <span class="number">0</span> <span class="number">1px</span> <span class="number">5px</span> <span class="number">0</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.12</span>);</span><br><span class="line">      <span class="attribute">border-radius</span>: initial;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//文章添加阴影效果 2</span></span><br><span class="line"><span class="selector-class">.post</span>&#123;</span><br><span class="line">    <span class="attribute">margin-top</span>:<span class="number">30px</span>;</span><br><span class="line">    <span class="selector-class">.post-block</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: initial;</span><br><span class="line">    <span class="attribute">background-position</span>-x: initial;</span><br><span class="line">    <span class="attribute">background-position</span>-y: initial;</span><br><span class="line">    <span class="attribute">background-size</span>: initial;</span><br><span class="line">    <span class="attribute">background-repeat</span>-x: initial;</span><br><span class="line">    <span class="attribute">background-repeat</span>-y: initial;</span><br><span class="line">    <span class="attribute">background-attachment</span>: initial;</span><br><span class="line">    <span class="attribute">background-origin</span>: initial;</span><br><span class="line">    <span class="attribute">background-clip</span>: initial;</span><br><span class="line">    <span class="attribute">background-color</span>: rgb(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">2px</span> <span class="number">0</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.12</span>), <span class="number">0</span> <span class="number">3px</span> <span class="number">1px</span> -<span class="number">2px</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.06</span>), <span class="number">0</span> <span class="number">1px</span> <span class="number">5px</span> <span class="number">0</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.12</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-top-left-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-top-right-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-bottom-right-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-bottom-left-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="添加站点友情链接"><a href="#添加站点友情链接" class="headerlink" title="添加站点友情链接"></a>添加站点友情链接</h4><ul><li>主题配置文件中</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Blog rolls</span></span><br><span class="line"><span class="attr">links_icon:</span> <span class="string">pagelines</span> <span class="comment">#模块icon</span></span><br><span class="line"><span class="attr">links_title:</span> <span class="string">友情链接</span> <span class="comment">#模块标题</span></span><br><span class="line"><span class="attr">links_layout:</span> <span class="string">block</span>   <span class="comment">#模块layout 样式</span></span><br><span class="line"><span class="comment">#links_layout: inline</span></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line">  <span class="string">玩Android:</span> <span class="attr">http://www.wanandroid.com/</span>  <span class="comment"># 链接名称：链接地址</span></span><br></pre></td></tr></table></figure><h4 id="添加文章分享功能"><a href="#添加文章分享功能" class="headerlink" title="添加文章分享功能"></a>添加文章分享功能</h4><ul><li>将主题配置_config.yml文件中关于baidushare部分的内容改为（其中type亦可以选择button）</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">baidushare:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">slide</span></span><br><span class="line"><span class="attr">  baidushare:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>集成百度分享你会发现配置文件有一句话表明不支持https</li></ul><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># Warning: Baidu Share does <span class="keyword">not</span> support https.</span><br></pre></td></tr></table></figure><h5 id="不支持https解决方案"><a href="#不支持https解决方案" class="headerlink" title="不支持https解决方案"></a>不支持https解决方案</h5><ul><li>下载新的静态资源 <a href="https://github.com/hrwhisper/baiduShare" target="_blank" rel="noopener">static</a></li><li>下载压缩包到本地，解压后，将static文件夹保存至themes\next\source目录下</li><li>修改文件themes\next\layout_partials\share\baidushare.swig<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">文件末尾 讲静态资源路径改为我刚刚下载好的静态资源</span><br><span class="line">.src='http://bdimg.share.baidu.com/static/api/js/share.js?v=<span class="number">89860593</span>.js?cdnversion='+<span class="symbol">~(-new Date()/36e5)]</span>;</span><br><span class="line"></span><br><span class="line">改为 </span><br><span class="line">.src='/static/api/js/share.js?v=<span class="number">89860593</span>.js?cdnversion='+<span class="symbol">~(-new Date()/36e5)]</span>;</span><br></pre></td></tr></table></figure></li></ul><h4 id="页面点击桃心效果"><a href="#页面点击桃心效果" class="headerlink" title="页面点击桃心效果"></a>页面点击桃心效果</h4><ul><li><p>创建clicklove.js文件，并写入如下内容代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e,t,a</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span>&#123;c(<span class="string">".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"</span>),o(),r()&#125;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class="number">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class="number">1</span>)):(d[e].y--,d[e].scale+=<span class="number">.004</span>,d[e].alpha-=<span class="number">.013</span>,d[e].el.style.cssText=<span class="string">"left:"</span>+d[e].x+<span class="string">"px;top:"</span>+d[e].y+<span class="string">"px;opacity:"</span>+d[e].alpha+<span class="string">";transform:scale("</span>+d[e].scale+<span class="string">","</span>+d[e].scale+<span class="string">") rotate(45deg);background:"</span>+d[e].color+<span class="string">";z-index:99999"</span>);requestAnimationFrame(r)&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">"function"</span>==<span class="keyword">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"div"</span>);a.className=<span class="string">"heart"</span>,d.push(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.clientX<span class="number">-5</span>,<span class="attr">y</span>:e.clientY<span class="number">-5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:s()&#125;),t.body.appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"style"</span>);a.type=<span class="string">"text/css"</span>;<span class="keyword">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class="keyword">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">"rgb("</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">")"</span>&#125;<span class="keyword">var</span> d=[];e.requestAnimationFrame=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;setTimeout(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),n()&#125;(<span class="built_in">window</span>,<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure></li><li><p>在\themes\next\layout_layout.swig文件末尾添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 页面点击小红心 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/clicklove.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="添加网页在线联系功能（DaoVoice）"><a href="#添加网页在线联系功能（DaoVoice）" class="headerlink" title="添加网页在线联系功能（DaoVoice）"></a>添加网页在线联系功能（DaoVoice）</h4><ul><li>首先注册<a href="https://dashboard.daovoice.io/" target="_blank" rel="noopener">DaoVoice</a>，注册可以使用GitHub账号注册(这里我就是使用Github 关联注册)</li><li>注册完成之后还需要创建我们网站对应的DaoVoice项目，邀请码为 2e5d695d</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/DaoVoice%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE.png" alt="DaoVoice创建项目"></p><ul><li>创建成功之后DaoVoice会提示我们快速接入，如下图需要找到对应的app_id，然后需要修改/themes/next/layout/_partials/head.swig文件，并加入如下代码，注意”//widget.daovoice.io/widget/xxxx.js”中的xxxx就对应图中的app_id</li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> theme.daovoice %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml">  (function(i,s,o,g,r,a,m)&#123;i["DaoVoiceObject"]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset="utf-8";m.parentNode.insertBefore(a,m)&#125;)(window,document,"script",('https:' == document.location.protocol ? 'https:' : 'http:') + "//widget.daovoice.io/widget/xxxx.js","daovoice")</span></span><br><span class="line"><span class="xml">  daovoice('init', &#123;</span></span><br><span class="line"><span class="xml">      app_id: "</span><span class="template-variable">&#123;&#123;theme.daovoice_app_id&#125;&#125;</span><span class="xml">"</span></span><br><span class="line"><span class="xml">    &#125;);</span></span><br><span class="line"><span class="xml">  daovoice('update');</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E5%BF%AB%E9%80%9F%E6%8E%A5%E5%85%A5DaoVoice.png" alt="快速接入DaoVoice"></p><ul><li>最后在主题配置文件中加入如下代码（注意冒号后面的空格），并填入对应的app_id</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Online contact</span></span><br><span class="line"><span class="attr">daovoice:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">daovoice_app_id:</span>   <span class="comment"># 这里填你刚才获得的 app_id</span></span><br></pre></td></tr></table></figure><ul><li>其他的一些设置可以自行在daovoice控制台中进行设置，这里就不展开了<h4 id="每篇文章末尾统一添加“本文结束”标记"><a href="#每篇文章末尾统一添加“本文结束”标记" class="headerlink" title="每篇文章末尾统一添加“本文结束”标记"></a>每篇文章末尾统一添加“本文结束”标记</h4><h5 id="添加“本文结束”标记"><a href="#添加“本文结束”标记" class="headerlink" title="添加“本文结束”标记"></a>添加“本文结束”标记</h5></li><li><p>在\themes\next\layout_macro下新建 passage-end-tag.swig 文件,并添加以下代码(新建文件格式必须是utf-8)：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> not is_index %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align:center;color: #ccc;font-size:14px;"</span>&gt;</span>-------------本文结束<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-heart"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>感谢阅读-------------<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>打开\themes\next\layout_macro\post.swig文件，在post-body 之后， post-footer （post-footer之前有两个DIV）之前添加如下代码：</p></li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> not is_index %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> 'passage-end-tag.swig' %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E6%96%87%E6%9C%AB%E6%B7%BB%E5%8A%A0%E6%96%87%E6%9C%AC%E7%BB%93%E6%9D%9F%E6%A0%87%E8%AE%B0.png" alt="文末添加文本结束标记"></p><ul><li>在主题配置文件_config.yml在末尾添加以下字段：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文章末尾添加“本文结束”标记</span></span><br><span class="line"><span class="attr">passage_end_tag:</span></span><br><span class="line"><span class="attr">  enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h5 id="修改文章底部的的标签样式"><a href="#修改文章底部的的标签样式" class="headerlink" title="修改文章底部的的标签样式"></a>修改文章底部的的标签样式</h5><blockquote><p>打开模板文件/themes/next/layout/_macro/post.swig，找到rel=”tag”&gt;#字段，<br>将# 换成<i class="fa fa-tag"></i>,其中tag是你选择标签图标的名字,也是可以自定义的,<br>如下:</p></blockquote><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; url_for(tag.path) &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">rel</span>=<span class="string">"tag"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-tag"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> </span><span class="template-variable">&#123;&#123; tag.name &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="重新发布博客"><a href="#重新发布博客" class="headerlink" title="重新发布博客"></a>重新发布博客</h3><ul><li><p>经过我们各种修改美化后的博客，需要同步到github中，具体步骤为</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在博客目录下</span></span><br><span class="line"><span class="attribute">hexo</span> clean</span><br><span class="line"></span><br><span class="line">hexo g </span><br><span class="line"></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li></ul><h3 id="新建页面，发布文章"><a href="#新建页面，发布文章" class="headerlink" title="新建页面，发布文章"></a>新建页面，发布文章</h3><ul><li><p>新建页面命令，在命令中指定文章的布局（layout），默认为 post，可以通过修改 _config.yml 中的 default_layout 参数来指定默认布局</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> [layout] &lt;<span class="built_in">title</span>&gt;</span><br></pre></td></tr></table></figure></li><li><p>layout的类型</p></li></ul><table><thead><tr><th>布局</th><th>路径</th><th>布局含义</th></tr></thead><tbody><tr><td>post</td><td>source/_posts</td><td>文章</td></tr><tr><td>page</td><td>source</td><td>页面</td></tr><tr><td>draft</td><td>source/_drafts</td><td>草稿</td></tr></tbody></table><ul><li><p>默认三种layout模板的路径 \blog\scaffolds</p></li><li><p>如果需要删除文章，则到source/_posts目录下删除对应文章重新发布博客即可</p><h3 id="博客同步管理"><a href="#博客同步管理" class="headerlink" title="博客同步管理"></a>博客同步管理</h3></li><li>在github中默认博客仓库中新建hexo分支并且将博客仓库的默认分支变成hexo分支(setting中设置)</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E5%8D%9A%E5%AE%A2%E4%BB%93%E5%BA%93%E7%9A%84%E9%BB%98%E8%AE%A4%E5%88%86%E6%94%AF%E5%8F%98%E6%88%90hexo.png" alt="博客仓库的默认分支变成hexo"></p><ul><li>克隆刚刚的分支到本地电脑（存在blog源文件的目录）</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github<span class="selector-class">.com</span>:maoqitian/maoqitian<span class="selector-class">.github</span><span class="selector-class">.io</span><span class="selector-class">.git</span></span><br></pre></td></tr></table></figure><ul><li><p>将blog源文件的目录下所有文件复制到刚刚克隆hexo分支的文件目录username.github.io层级，并下载一下插件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-generator-<span class="keyword">index</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-<span class="keyword">archive</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-<span class="keyword">category</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-tag <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-<span class="keyword">server</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-deployer-heroku <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-deployer-rsync <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-deployer-openshift <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-renderer-marked@<span class="number">0.2</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-renderer-stylus@<span class="number">0.2</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-feed@<span class="number">1</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-sitemap@<span class="number">1</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-<span class="keyword">search</span> <span class="comment">--save</span></span><br><span class="line">npm <span class="keyword">install</span> hexo-generator-searchdb <span class="comment">--save</span></span><br></pre></td></tr></table></figure></li><li><p>提交时考虑以下注意事项</p><ul><li>将themes目录以内中的主题的.git目录删除（如果有），因为一个git仓库中不能包含另一个git仓库，否则提交主题文件夹会失败</li><li>后期需要更新主题时在另一个地方git clone下来该主题的最新版本，然后将内容拷到当前主题目录即可</li></ul></li><li>然后提交该 hexo 分支 </li></ul><h4 id="其他电脑需要操作blog"><a href="#其他电脑需要操作blog" class="headerlink" title="其他电脑需要操作blog"></a>其他电脑需要操作blog</h4><ul><li>首先你需要在电脑上配置相关环境</li><li>安装Node.js、git和hexo</li><li>新电脑上克隆username.github.io仓库的hexo分支到本地，此时本地git仓库处于hexo分支</li><li>切换到username.github.io目录，执行npm install(由于仓库有一个.gitignore文件，里面默认是忽略掉 node_modules文件夹的，也就是说仓库的hexo分支并没有存储该目录，所以需要install下）</li><li>如果node_modules文件没有丢失, 可不执行该操作</li><li>到这里了就可以开始在自己的电脑上写博客了，新建文章，更新文章等</li><li>需要注意的是每次更新博客之后, 都要把相关修改上传到hexo分支，每次换电脑更新博客的时候, 在修改之前最好也要git pull拉取一下最新的更新</li></ul><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官方文档</a> </li><li><a href="https://www.simon96.online/2018/10/12/hexo-tutorial/" target="_blank" rel="noopener">最全Hexo博客搭建+主题优化+插件配置+常用操作+错误分析</a></li><li><a href="http://blog.codesfile.com/2017/12/16/HEXO%E6%90%AD%E9%85%8DNext%E4%B8%BB%E9%A2%98%E4%BF%AE%E6%94%B9%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">HEXO搭配Next主题修改博客</a></li><li><a href="https://blog.csdn.net/cl534854121/article/details/76121105?locationNum=6&amp;fps=1" target="_blank" rel="noopener">百度分享集成</a></li><li><a href="https://asdfv1929.github.io/2018/01/26/click-love/" target="_blank" rel="noopener">Hexo NexT主题添加点击爱心效果</a></li><li><a href="https://asdfv1929.github.io/2018/01/21/daovoice/" target="_blank" rel="noopener">Hexo NexT主题内接入网页在线联系功能</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://avatars2.githubusercontent.com/u/6375567?s=200&amp;amp;v=4&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;个人博客对于我们知识的积累过程中起到温故而知新的作用，并且也能达到展示自我的目的。接下来就大致介绍一下以&lt;a href=&quot;https://github.com/hexojs/hexo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo&lt;/a&gt;为基础搭建个人博客的过程。&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="hexo博客搭建" scheme="https://www.maoqitian.com/categories/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Git" scheme="https://www.maoqitian.com/tags/Git/"/>
    
      <category term="hexo" scheme="https://www.maoqitian.com/tags/hexo/"/>
    
      <category term="Next主题" scheme="https://www.maoqitian.com/tags/Next%E4%B8%BB%E9%A2%98/"/>
    
      <category term="Github" scheme="https://www.maoqitian.com/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>从源码角度深入理解Glide（下）</title>
    <link href="https://www.maoqitian.com/2019/02/19/%E4%BB%8E%E6%BA%90%E7%A0%81%E8%A7%92%E5%BA%A6%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Glide%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <id>https://www.maoqitian.com/2019/02/19/从源码角度深入理解Glide（下）/</id>
    <published>2019-02-19T14:01:24.000Z</published>
    <updated>2020-10-15T14:26:43.688Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/bumptech/glide/master/static/glide_logo.png" alt="image"></p><blockquote><p>上一篇文章<a href="https://www.maoqitian.com/2019/02/19/%E4%BB%8E%E6%BA%90%E7%A0%81%E8%A7%92%E5%BA%A6%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3glide%EF%BC%88%E4%B8%8A%EF%BC%89/">从源码角度深入理解Glide（上）</a>中，我们已经把Glide加载图片的基本流程走了一遍，想必你已经对Glide的加载原理有了新的认识并且见识到了Glide源码的复杂逻辑，在我们感叹Glide源码复杂的同时我们也忽略了Glide加载图片过程的其它细节，特别是缓存方面，我们在上一篇文章中对于缓存的处理都是跳过的，这一篇文章我们就从Glide的缓存开始再次对Glide进行深入理解。<br><a id="more"></a></p></blockquote><h2 id="Glide缓存"><a href="#Glide缓存" class="headerlink" title="Glide缓存"></a>Glide缓存</h2><ul><li>Glide加载默认情况下可以分为三级缓存，哪三级呢？他们分别是<strong>内存、磁盘和网络。</strong></li><li><p>默认情况下，Glide 会在开始一个新的图片请求之前检查以下多级的缓存：</p><ul><li>1.活动资源 (Active Resources) - 现在是否有另一个 View 正在展示这张图片</li><li>2.内存缓存 (Memory cache) - 该图片是否最近被加载过并仍存在于内存中</li><li>3.资源类型（Resource） - 该图片是否之前曾被解码、转换并写入过磁盘缓存</li><li>4.数据来源 (Data) - 构建这个图片的资源是否之前曾被写入过文件缓存</li></ul></li><li>网络级别的加载我们已经在上一篇文章了解了，上面列出的前两种情况则是内存缓存，后两种情况则是磁盘缓存，如果以上四种情况都不存在，Glide则会通过返回到原始资源以取回数据（原始文件，Uri, Url（网络）等） <h3 id="缓存的key"><a href="#缓存的key" class="headerlink" title="缓存的key"></a>缓存的key</h3></li><li>提起缓存，我们首先要明白，Glide中缓存的图片肯定不止一个，当我们加载图片的同时，如果缓存中有我们正在加载的图片，我们怎么找到这个图片的缓存呢？所以为了找到对应的缓存，则每一个缓存都有它对应的标识，这个标识在Glide中用接口Key来描述<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**Key 接口*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Key</span> </span>&#123;</span><br><span class="line">  String STRING_CHARSET_NAME = <span class="string">"UTF-8"</span>;</span><br><span class="line">  Charset CHARSET = Charset.forName(STRING_CHARSET_NAME);</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">updateDiskCacheKey</span><span class="params">(@NonNull MessageDigest messageDigest)</span></span>;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span></span>;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="缓存Key的生成"><a href="#缓存Key的生成" class="headerlink" title="缓存Key的生成"></a>缓存Key的生成</h4><ul><li><p>前面提到了缓存Key的接口，那这个缓存的Key实在哪里生成的，实现类又是什么呢？这我们就要看到加载发动机Engine类的load方法</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> EngineKeyFactory keyFactory;</span><br><span class="line"><span class="comment">/**Engine类的load方法*/</span></span><br><span class="line"><span class="keyword">public</span> &lt;R&gt; LoadStatus load(GlideContext glideContext,Object model, Key signature,<span class="keyword">int</span> width,<span class="keyword">int</span> height,<span class="keyword">Class</span>&lt;?&gt; resourceClass,<span class="keyword">Class</span>&lt;R&gt; transcodeClass,Priority priority,DiskCacheStrategy diskCacheStrategy,Map&lt;<span class="keyword">Class</span>&lt;?&gt;, Transformation&lt;?&gt;&gt; transformations,<span class="keyword">boolean</span> isTransformationRequired,<span class="keyword">boolean</span> isScaleOnlyOrNoTransform, <span class="keyword">Options</span> <span class="keyword">options</span>,<span class="keyword">boolean</span> isMemoryCacheable,<span class="keyword">boolean</span> useUnlimitedSourceExecutorPool,<span class="keyword">boolean</span> useAnimationPool,<span class="keyword">boolean</span> onlyRetrieveFromCache,ResourceCallback cb) &#123;</span><br><span class="line">    Util.assertMainThread();</span><br><span class="line">    <span class="keyword">long</span> startTime = VERBOSE_IS_LOGGABLE ? LogTime.getLogTime() : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    EngineKey key = keyFactory.buildKey(model, signature, width, height, transformations,</span><br><span class="line">        resourceClass, transcodeClass, <span class="keyword">options</span>);</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    ..........</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/**EngineKey类*/</span>  </span><br><span class="line"><span class="keyword">class</span> EngineKey <span class="keyword">implements</span> Key &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Object model;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> width;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> height;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">Class</span>&lt;?&gt; resourceClass;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">Class</span>&lt;?&gt; transcodeClass;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Key signature;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;<span class="keyword">Class</span>&lt;?&gt;, Transformation&lt;?&gt;&gt; transformations;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">Options</span> <span class="keyword">options</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> hashCode;</span><br><span class="line"></span><br><span class="line">  EngineKey(</span><br><span class="line">      Object model,</span><br><span class="line">      Key signature,</span><br><span class="line">      <span class="keyword">int</span> width,</span><br><span class="line">      <span class="keyword">int</span> height,</span><br><span class="line">      Map&lt;<span class="keyword">Class</span>&lt;?&gt;, Transformation&lt;?&gt;&gt; transformations,</span><br><span class="line">      <span class="keyword">Class</span>&lt;?&gt; resourceClass,</span><br><span class="line">      <span class="keyword">Class</span>&lt;?&gt; transcodeClass,</span><br><span class="line">      <span class="keyword">Options</span> <span class="keyword">options</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.model = Preconditions.checkNotNull(model);</span><br><span class="line">    <span class="keyword">this</span>.signature = Preconditions.checkNotNull(signature, <span class="string">"Signature must not be null"</span>);</span><br><span class="line">    <span class="keyword">this</span>.width = width;</span><br><span class="line">    <span class="keyword">this</span>.height = height;</span><br><span class="line">    <span class="keyword">this</span>.transformations = Preconditions.checkNotNull(transformations);</span><br><span class="line">    <span class="keyword">this</span>.resourceClass =</span><br><span class="line">        Preconditions.checkNotNull(resourceClass, <span class="string">"Resource class must not be null"</span>);</span><br><span class="line">    <span class="keyword">this</span>.transcodeClass =</span><br><span class="line">        Preconditions.checkNotNull(transcodeClass, <span class="string">"Transcode class must not be null"</span>);</span><br><span class="line">    <span class="keyword">this</span>.<span class="keyword">options</span> = Preconditions.checkNotNull(<span class="keyword">options</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">boolean</span> equals(Object o) &#123;</span><br><span class="line">    <span class="keyword">if</span> (o <span class="keyword">instanceof</span> EngineKey) &#123;</span><br><span class="line">      EngineKey other = (EngineKey) o;</span><br><span class="line">      <span class="keyword">return</span> model.equals(other.model)</span><br><span class="line">          &amp;&amp; signature.equals(other.signature)</span><br><span class="line">          &amp;&amp; height == other.height</span><br><span class="line">          &amp;&amp; width == other.width</span><br><span class="line">          &amp;&amp; transformations.equals(other.transformations)</span><br><span class="line">          &amp;&amp; resourceClass.equals(other.resourceClass)</span><br><span class="line">          &amp;&amp; transcodeClass.equals(other.transcodeClass)</span><br><span class="line">          &amp;&amp; <span class="keyword">options</span>.equals(other.<span class="keyword">options</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">int</span> hashCode() &#123;</span><br><span class="line">    <span class="keyword">if</span> (hashCode == <span class="number">0</span>) &#123;</span><br><span class="line">      hashCode = model.hashCode();</span><br><span class="line">      hashCode = <span class="number">31</span> * hashCode + signature.hashCode();</span><br><span class="line">      hashCode = <span class="number">31</span> * hashCode + width;</span><br><span class="line">      hashCode = <span class="number">31</span> * hashCode + height;</span><br><span class="line">      hashCode = <span class="number">31</span> * hashCode + transformations.hashCode();</span><br><span class="line">      hashCode = <span class="number">31</span> * hashCode + resourceClass.hashCode();</span><br><span class="line">      hashCode = <span class="number">31</span> * hashCode + transcodeClass.hashCode();</span><br><span class="line">      hashCode = <span class="number">31</span> * hashCode + <span class="keyword">options</span>.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hashCode;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>由以上源码我们知道，通过EngineKeyFactory的buildKey方法Glide创建了缓存的Key实现类EngineKey对象，由生成EngineKey对象传入的参数我们可以明白，只要有一个参数不同，所生成的EngineKey对象都会是不同的。内存的速度是最快的，理所当然如果内存中有缓存的对应加载图片Glide会搜先从内存缓存中加载。</p><h3 id="LRU"><a href="#LRU" class="headerlink" title="LRU"></a>LRU</h3></li><li>Glide<a href="https://bumptech.github.io/glide/doc/caching.html" target="_blank" rel="noopener">官方文档</a>说明<br><img src="https://github.com/maoqitian/MaoMdPhoto/raw/39c2ad856ab065e47c96d50f8e28cd151c142750/%E4%BB%8E%E6%BA%90%E7%A0%81%E8%A7%92%E5%BA%A6%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Glide/%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E6%8F%8F%E8%BF%B0.png" alt="资源管理官方描述"><h4 id="LRU算法思想"><a href="#LRU算法思想" class="headerlink" title="LRU算法思想"></a>LRU算法思想</h4></li><li>从官方文档描述，我们可以知道Glide的缓存底层实现原理算法都是LRU（Least Recently Used），字面意思为最近最少使用。算法核心思想（个人理解）：<strong>在一个有限的集合中，存入缓存，每一个缓存都有唯一标识，当要获取一个缓存，集合中没有则存入，有则直接从集合获取，存入缓存到集合时如果集合已经满了则找到集合中最近最少的缓存删除并存入需要存入的缓存。</strong> 这样也就有效的避免了内存溢出（OOM）的问题。</li><li>接下来我们看一张图能够更好的理解LRU算法</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/%E4%BB%8E%E6%BA%90%E7%A0%81%E8%A7%92%E5%BA%A6%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Glide/LRU%E5%9B%BE.jpg" alt="LRU图"></p><ul><li>横线上方每个数字代表要存入的数据，横线下方代表三个内存页（也可以理解为缓存结合），缓存集合最多可以存入三个缓存数据，则从1开始依次按照数字代码的缓存读取并存入缓存集合，首先开始时三个页内存是空的，前三个缓存数据不同，依次存入缓存集合，当数字4在内存中并进行缓存时，根据LRU算法思想，则2和3相较于1使用时间间隔更少，所以淘汰1，缓存数据4替换1的位置，接下去同理。</li><li>Glide内存缓存使用的是LruCache，磁盘缓存使用的DiskLruCache，他们核心思想都是LRU算法，而缓存集合使用的是LinkedHashMap，熟悉<a href="https://www.jianshu.com/p/972dfad0c95b" target="_blank" rel="noopener">集合框架</a>应该都明白LinkedHashMap集成HashMap，并且LinkedHashMap保证了key的唯一性，更符合LRU算法的实现。</li><li>更深入的了解LruCache和DiskLruCache可以查看郭霖大神的解析<a href="https://blog.csdn.net/guolin_blog/article/details/28863651" target="_blank" rel="noopener">Android DiskLruCache完全解析，硬盘缓存的最佳方案</a><h3 id="内存缓存"><a href="#内存缓存" class="headerlink" title="内存缓存"></a>内存缓存</h3><h4 id="内存缓存相关API"><a href="#内存缓存相关API" class="headerlink" title="内存缓存相关API"></a>内存缓存相关API</h4><figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跳过内存缓存</span></span><br><span class="line"><span class="type">RequestOptions</span> requestOptions =<span class="function"><span class="keyword">new</span> <span class="title">RequestOptions</span>().<span class="title">skipMemoryCache</span>(true);</span></span><br><span class="line"><span class="function"><span class="title">Glide</span>.<span class="title">with</span>(this).<span class="title">load</span>(<span class="type">IMAGE_URL</span>).<span class="title">apply</span>(requestOptions).<span class="title">into</span>(imageView);</span></span><br><span class="line"><span class="function"><span class="comment">//Generated API 方式</span></span></span><br><span class="line"><span class="function"><span class="title">GlideApp</span>.<span class="title">with</span>(this).<span class="title">load</span>(<span class="type">IMAGE_URL</span>).<span class="title">skipMemoryCache</span>(true).<span class="title">into</span>(imageView); </span></span><br><span class="line"><span class="function"><span class="comment">//清除内存缓存，必须在主线程中调用</span></span></span><br><span class="line"><span class="function"><span class="title">Glide</span>.<span class="title">get</span>(context).<span class="title">clearMemory</span>();</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="内存缓存源码分析"><a href="#内存缓存源码分析" class="headerlink" title="内存缓存源码分析"></a>内存缓存源码分析</h4><ul><li>内存缓存不需要你进行任何设置，它默认就是开启的，我们再次回到Engine类的load方法<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**Engine类的load方法*/</span></span><br><span class="line"><span class="keyword">public</span> &lt;R&gt; LoadStatus load(GlideContext glideContext,Object model, Key signature,<span class="keyword">int</span> width,<span class="keyword">int</span> height,<span class="keyword">Class</span>&lt;?&gt; resourceClass,<span class="keyword">Class</span>&lt;R&gt; transcodeClass,Priority priority,DiskCacheStrategy diskCacheStrategy,Map&lt;<span class="keyword">Class</span>&lt;?&gt;, Transformation&lt;?&gt;&gt; transformations,<span class="keyword">boolean</span> isTransformationRequired,<span class="keyword">boolean</span> isScaleOnlyOrNoTransform, <span class="keyword">Options</span> <span class="keyword">options</span>,<span class="keyword">boolean</span> isMemoryCacheable,<span class="keyword">boolean</span> useUnlimitedSourceExecutorPool,<span class="keyword">boolean</span> useAnimationPool,<span class="keyword">boolean</span> onlyRetrieveFromCache,ResourceCallback cb) &#123;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    ..........</span><br><span class="line">    EngineResource&lt;?&gt; active = loadFromActiveResources(key, isMemoryCacheable);</span><br><span class="line">    <span class="keyword">if</span> (active != <span class="keyword">null</span>) &#123;</span><br><span class="line">      cb.onResourceReady(active, DataSource.MEMORY_CACHE);</span><br><span class="line">      <span class="keyword">if</span> (VERBOSE_IS_LOGGABLE) &#123;</span><br><span class="line">        logWithTimeAndKey(<span class="string">"Loaded resource from active resources"</span>, startTime, key);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    ..........</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="活动资源-Active-Resources"><a href="#活动资源-Active-Resources" class="headerlink" title="活动资源 (Active Resources)"></a>活动资源 (Active Resources)</h5><ul><li><p>通过以上Engine类load的源码，首先调用loadFromActiveResources方法来从内存中获取缓存</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ActiveResources</span> activeResources;</span><br><span class="line"><span class="comment">/**Engine类的loadFromActiveResources方法*/</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">  <span class="keyword">private</span> <span class="type">EngineResource</span>&lt;?&gt; loadFromActiveResources(<span class="type">Key</span> key, boolean isMemoryCacheable) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isMemoryCacheable) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">EngineResource</span>&lt;?&gt; active = activeResources.get(key);</span><br><span class="line">    <span class="keyword">if</span> (active != <span class="literal">null</span>) &#123;</span><br><span class="line">      active.acquire();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> active;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/**ActiveResources类*/</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ActiveResources</span> </span>&#123;</span><br><span class="line">     <span class="meta">@VisibleForTesting</span></span><br><span class="line">  <span class="keyword">final</span> <span class="type">Map</span>&lt;<span class="type">Key</span>, <span class="type">ResourceWeakReference</span>&gt; activeEngineResources = <span class="keyword">new</span> <span class="type">HashMap</span>&lt;&gt;();</span><br><span class="line">   <span class="comment">//省略部分代码</span></span><br><span class="line">    ........</span><br><span class="line">   <span class="meta">@VisibleForTesting</span></span><br><span class="line">  static <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceWeakReference</span> <span class="keyword">extends</span> <span class="title">WeakReference&lt;EngineResource&lt;?&gt;&gt;</span> </span>&#123;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    ........</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**Engine类的onEngineJobComplete方法*/</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  public void onEngineJobComplete(<span class="type">EngineJob</span>&lt;?&gt; engineJob, <span class="type">Key</span> key, <span class="type">EngineResource</span>&lt;?&gt; resource) &#123;</span><br><span class="line">    <span class="type">Util</span>.assertMainThread();</span><br><span class="line">    <span class="comment">// A null resource indicates that the load failed, usually due to an exception.</span></span><br><span class="line">    <span class="keyword">if</span> (resource != <span class="literal">null</span>) &#123;</span><br><span class="line">      resource.setResourceListener(key, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (resource.isCacheable()) &#123;</span><br><span class="line">        activeResources.activate(key, resource);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    jobs.removeIfCurrent(key, engineJob);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**RequestOptions类的skipMemoryCache方法*/</span></span><br><span class="line">public <span class="type">RequestOptions</span> skipMemoryCache(boolean skip) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isAutoCloneEnabled) &#123;</span><br><span class="line">      <span class="keyword">return</span> clone().skipMemoryCache(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.isCacheable = !skip;</span><br><span class="line">    fields |= <span class="type">IS_CACHEABLE</span>;</span><br><span class="line">    <span class="keyword">return</span> selfOrThrowIfLocked();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>通过以上源码， 这里需要分几步来解读，首先如果是第一次加载，肯定没有内存缓存，所以如果第一次加载成功，则在加载成功之后调用了Engine对象的onEngineJobComplete方法，并在该方法中将加载成功的resource通过ActiveResources对象的activate方法保存在其内部维护的弱引用（WeakReference）HashMap中。下次再加载相同的资源，当你设置了skipMemoryCache（true），则表明你不想使用内存缓存，这时候Glide再次加载相同资源的时候则会跳过内存缓存的加载，否则可以从ActiveResources对象中获取，如果内存资源没被回收的话（关于弱引用的一下描述可以看看我以前写的一篇文章<a href="https://www.jianshu.com/p/bfc3e8cd64ae" target="_blank" rel="noopener">Android 学习笔记之图片三级缓存</a>）。如果该弱引用资源被回收了(GC)，则下一步就到内存中寻找是否有该资源的缓存。</p></li></ul><h5 id="内存缓存-Memory-cache"><a href="#内存缓存-Memory-cache" class="headerlink" title="内存缓存 (Memory cache)"></a>内存缓存 (Memory cache)</h5><ul><li><p>接着回到Engine类的load方法，如果弱引用缓存资源已经被回收，则调用loadFromCache方法在内存缓存中查找缓存资源</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**Engine类的load方法*/</span></span><br><span class="line"><span class="keyword">public</span> &lt;R&gt; LoadStatus load(GlideContext glideContext,<span class="keyword">Object</span> model, Key signature,<span class="built_in">int</span> <span class="built_in">width</span>,<span class="built_in">int</span> <span class="built_in">height</span>,Class&lt;?&gt; resourceClass,Class&lt;R&gt; transcodeClass,Priority priority,DiskCacheStrategy diskCacheStrategy,Map&lt;Class&lt;?&gt;, Transformation&lt;?&gt;&gt; transformations,<span class="built_in">boolean</span> isTransformationRequired,<span class="built_in">boolean</span> isScaleOnlyOrNoTransform, Options options,<span class="built_in">boolean</span> isMemoryCacheable,<span class="built_in">boolean</span> useUnlimitedSourceExecutorPool,<span class="built_in">boolean</span> useAnimationPool,<span class="built_in">boolean</span> onlyRetrieveFromCache,ResourceCallback cb) &#123;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    ..........</span><br><span class="line">    EngineResource&lt;?&gt; cached = loadFromCache(<span class="built_in">key</span>, isMemoryCacheable);</span><br><span class="line">    <span class="keyword">if</span> (cached != <span class="keyword">null</span>) &#123;</span><br><span class="line">      cb.onResourceReady(cached, DataSource.MEMORY_CACHE);</span><br><span class="line">      <span class="keyword">if</span> (VERBOSE_IS_LOGGABLE) &#123;</span><br><span class="line">        logWithTimeAndKey(<span class="string">"Loaded resource from cache"</span>, startTime, <span class="built_in">key</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    ..........</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/**Engine类的loadFromCache方法*/</span></span><br><span class="line"><span class="keyword">private</span> EngineResource&lt;?&gt; loadFromCache(Key <span class="built_in">key</span>, <span class="built_in">boolean</span> isMemoryCacheable) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isMemoryCacheable) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    EngineResource&lt;?&gt; cached = getEngineResourceFromCache(<span class="built_in">key</span>);</span><br><span class="line">    <span class="keyword">if</span> (cached != <span class="keyword">null</span>) &#123;</span><br><span class="line">      cached.acquire();</span><br><span class="line">      activeResources.activate(<span class="built_in">key</span>, cached);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cached;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/**Engine类的getEngineResourceFromCache方法*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> MemoryCache cache;</span><br><span class="line"><span class="keyword">private</span> EngineResource&lt;?&gt; getEngineResourceFromCache(Key <span class="built_in">key</span>) &#123;</span><br><span class="line">    Resource&lt;?&gt; cached = cache.remove(<span class="built_in">key</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> EngineResource&lt;?&gt; result;</span><br><span class="line">    <span class="keyword">if</span> (cached == <span class="keyword">null</span>) &#123;</span><br><span class="line">      result = <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cached <span class="keyword">instanceof</span> EngineResource) &#123;</span><br><span class="line">      <span class="comment">// Save an object allocation if we've cached an EngineResource (the typical case).</span></span><br><span class="line">      result = (EngineResource&lt;?&gt;) cached;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result = <span class="keyword">new</span> EngineResource&lt;&gt;(cached, <span class="keyword">true</span> <span class="comment">/*isMemoryCacheable*/</span>, <span class="keyword">true</span> <span class="comment">/*isRecyclable*/</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/**GlideBuilder类的build方法*/</span></span><br><span class="line"><span class="keyword">private</span>  MemoryCache cache;</span><br><span class="line">@NonNull</span><br><span class="line">  Glide build(@NonNull Context context) &#123;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    ..........</span><br><span class="line">    <span class="keyword">if</span> (memoryCache == <span class="keyword">null</span>) &#123;</span><br><span class="line">      memoryCache = <span class="keyword">new</span> LruResourceCache(memorySizeCalculator.getMemoryCacheSize());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (diskCacheFactory == <span class="keyword">null</span>) &#123;</span><br><span class="line">      diskCacheFactory = <span class="keyword">new</span> InternalCacheDiskCacheFactory(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (engine == <span class="keyword">null</span>) &#123;</span><br><span class="line">      engine =</span><br><span class="line">          <span class="keyword">new</span> Engine(</span><br><span class="line">              memoryCache,</span><br><span class="line">              diskCacheFactory,</span><br><span class="line">              diskCacheExecutor,</span><br><span class="line">              sourceExecutor,</span><br><span class="line">              GlideExecutor.newUnlimitedSourceExecutor(),</span><br><span class="line">              GlideExecutor.newAnimationExecutor(),</span><br><span class="line">              isActiveResourceRetentionAllowed);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    ..........</span><br><span class="line">&#125;    </span><br><span class="line"><span class="comment">/**LruResourceCache类的实现继承关系*/</span>    </span><br><span class="line"><span class="keyword">public</span> class LruResourceCache extends LruCache&lt;Key, Resource&lt;?&gt;&gt; implements MemoryCache&#123;......&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过以上源码，在loadFromCache同样也判断了Glide是否设置了skipMemoryCache（true）方法，没有设置则调用getEngineResourceFromCache方法，在该方法中我们可以看到cache对象就是MemoryCache对象，而该对象实际是一个接口，他的实现类是LruResourceCache，该对象我们前面在GlideBuilder的build方法中进行了新建（在第一步with方法中调用了Glide.get方法，在get方法中初始化Glide调用了在GlideBuilder的build方法），这里也就说明Glide的内存缓存还是使用LruCache来实现，这里如果获取到了内存缓存，则获取内容缓存的同时移除该缓存，并在loadFromCache方法中将该资源标记为正在使用同时加入在弱引用中。这样在ListView或者Recyclerview中加载图片则下次加载首先从弱引用Map中获取缓存资源，并且标志当前资源正在使用，可以防止该资源被LRU算法回收掉。</p><h5 id="内存缓存写入"><a href="#内存缓存写入" class="headerlink" title="内存缓存写入"></a>内存缓存写入</h5></li><li><p>前面我们只是分析了如何获取内存缓存，而内存缓存又是在哪里写入的呢？根据前面分析，首先获取在弱引用Map中的缓存资源，而前面我们在分析活动资源(Active Resources)时候已经说过是在onEngineJobComplete放中往弱引用Map存放缓存资源，而<br>onEngineJobComplete方法是在哪里调用呢，这我们就要回想起<a href="https://www.maoqitian.com/2019/02/19/%E4%BB%8E%E6%BA%90%E7%A0%81%E8%A7%92%E5%BA%A6%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3glide%EF%BC%88%E4%B8%8A%EF%BC%89/">上一篇文章</a>中我们再网络加载图片成功后腰切换在主线程回调来显示图片，也就是EngineJob对象的handleResultOnMainThread方法</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**EngineJob类的handleResultOnMainThread方法*/</span></span><br><span class="line">@Synthetic</span><br><span class="line">  void handleResultOnMainThread() &#123;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    ..........</span><br><span class="line">    engineResource = engineResourceFactory.build(resource, isCacheable);</span><br><span class="line">    hasResource = true;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    ..........</span><br><span class="line">    engineResource.acquire();</span><br><span class="line">    listener.onEngineJobComplete(this, key, engineResource);</span><br><span class="line">    engineResource.release();</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    ..........</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/**EngineJob类的EngineResourceFactory内部类*/</span>  </span><br><span class="line">@VisibleForTesting</span><br><span class="line">  static <span class="keyword">class</span> EngineResourceFactory &#123;</span><br><span class="line">    public &lt;R&gt; EngineResource&lt;R&gt; build(Resource&lt;R&gt; resource, boolean isMemoryCacheable) &#123;</span><br><span class="line">      return new EngineResource&lt;&gt;(resource, isMemoryCacheable, <span class="comment">/*isRecyclable=*/</span> true);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/**Engine类的onEngineJobComplete方法*/</span></span><br><span class="line">@SuppressWarnings(<span class="string">"unchecked"</span>)</span><br><span class="line">  @Override</span><br><span class="line">  public void onEngineJobComplete(EngineJob&lt;?&gt; engineJob, Key key, EngineResource&lt;?&gt; resource) &#123;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    ..........</span><br><span class="line">    <span class="keyword">if</span> (resource != null) &#123;</span><br><span class="line">      resource.setResourceListener(key, this);</span><br><span class="line">      <span class="keyword">if</span> (resource.isCacheable()) &#123;</span><br><span class="line">        activeResources.activate(key, resource);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    ..........</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>通过以上源码，EngineJob类的handleResultOnMainThread方法首先构建了获取好的包含图片的资源，标记当前资源正在使用，通过listener.onEngineJobComplete回调，而listener就是Engine对象，也就到了Engine类的onEngineJobComplete方法，并在该方法中存入了图片资源到弱引用Map中。</p></li><li><p>上面我是分析了弱引用资源的缓存存入，接着我们看看内存缓存是在哪里存入的，在次看回handleResultOnMainThread方法，我们看到onEngineJobComplete回调前后分别调用了EngineResource对象的acquire方法和release方法</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**EngineResource类的acquire方法*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">acquire</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isRecycled) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot acquire a recycled resource"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!Looper.getMainLooper().<span class="keyword">equals</span>(Looper.myLooper())) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException(<span class="string">"Must call acquire on the main thread"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ++acquired;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/**EngineResource类的release方法*/</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">release</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (acquired &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot release a recycled or not yet acquired resource"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!Looper.getMainLooper().<span class="keyword">equals</span>(Looper.myLooper())) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException(<span class="string">"Must call release on the main thread"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (--acquired == <span class="number">0</span>) &#123;</span><br><span class="line">      listener.onResourceReleased(key, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/**Engine类的onResourceReleased方法*/</span></span><br><span class="line">@Override</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResourceReleased</span>(<span class="params">Key cacheKey, EngineResource&lt;?&gt; resource</span>)</span> &#123;</span><br><span class="line">    Util.assertMainThread();</span><br><span class="line">    activeResources.deactivate(cacheKey);</span><br><span class="line">    <span class="keyword">if</span> (resource.isCacheable()) &#123;</span><br><span class="line">      cache.put(cacheKey, resource);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      resourceRecycler.recycle(resource);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>通过以上源码，其实我们应该能恍然大悟，Glide的内存缓存存入其实就是通过一个acquired变量来进行控制，如果当前弱引用资源不再使用，也就是acquired等于零的时候，则调用回调listener.onResourceReleased（listener就是Engine对象），在onResourceReleased方法中移除了弱引用资源资源，并且没有设置skipMemoryCache（true），则通过cache.put存入内存缓存。</p></li><li>总的来说Glide的内存缓存主要是结合了弱引用和内存来实现的。<h5 id="Glide内存缓存机制示意图"><a href="#Glide内存缓存机制示意图" class="headerlink" title="Glide内存缓存机制示意图"></a>Glide内存缓存机制示意图</h5><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/%E4%BB%8E%E6%BA%90%E7%A0%81%E8%A7%92%E5%BA%A6%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Glide/Glide%E5%86%85%E5%AD%98%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="Glide内存缓存机制示意图"><h3 id="磁盘缓存"><a href="#磁盘缓存" class="headerlink" title="磁盘缓存"></a>磁盘缓存</h3></li><li><p>说去磁盘缓存，上一篇文章我们在简单使用Glide的例子中就已经使用了Glide的磁盘缓存</p><figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RequestOptions</span> requestOptions = <span class="function"><span class="keyword">new</span> <span class="title">RequestOptions</span>()</span></span><br><span class="line"><span class="function">         .<span class="title">diskCacheStrategy</span>(<span class="type">DiskCacheStrategy</span>.<span class="type">NONE</span>);<span class="comment">//不使用缓存</span></span></span><br><span class="line"><span class="function">     <span class="title">Glide</span>.<span class="title">with</span>(<span class="type">Context</span>).<span class="title">load</span>(<span class="type">IMAGE_URL</span>).<span class="title">apply</span>(requestOptions).<span class="title">into</span>(mImageView);</span></span><br></pre></td></tr></table></figure></li><li><p>既然知道如何使用Glide的磁盘缓存，首先我们要了解Glide4中给我提供了哪几种磁盘缓存策略</p><h4 id="磁盘缓存策略"><a href="#磁盘缓存策略" class="headerlink" title="磁盘缓存策略"></a>磁盘缓存策略</h4></li><li>1.DiskCacheStrategy.NONE： 表示不使用磁盘缓存</li><li>2.DiskCacheStrategy.DATA： 表示磁盘缓存只缓存原始加载的图片</li><li>DiskCacheStrategy.RESOURCE： 表示磁盘缓存只缓存经过解码转换后的图片</li><li>DiskCacheStrategy.ALL： 表示磁盘缓存既缓存原始图片，也缓存经过解码转换后的图片</li><li>DiskCacheStrategy.AUTOMATIC： 表示让Glide根据图片资源智能地选择使用哪一种磁盘缓存策略，该选项也是我们在不进行手动设置的时候Glide的默认设置<h4 id="磁盘缓存源码分析"><a href="#磁盘缓存源码分析" class="headerlink" title="磁盘缓存源码分析"></a>磁盘缓存源码分析</h4></li><li><p>不知你是否还记得上一篇文章中在加载图片的时候我们是在开启子线程任务在线程池中进行的，我们来回顾一下</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**DecodeJob类的start方法*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">(DecodeJob&lt;R&gt; decodeJob)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.decodeJob = decodeJob;</span><br><span class="line">    GlideExecutor executor = decodeJob.willDecodeFromCache()</span><br><span class="line">        ? diskCacheExecutor</span><br><span class="line">        : getActiveSourceExecutor();</span><br><span class="line">    executor.execute(decodeJob);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/**DecodeJob类的willDecodeFromCache方法*/</span> </span><br><span class="line"> <span class="function"><span class="keyword">boolean</span> <span class="title">willDecodeFromCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Stage firstStage = getNextStage(Stage.INITIALIZE);</span><br><span class="line">    <span class="keyword">return</span> firstStage == Stage.RESOURCE_CACHE || firstStage == Stage.DATA_CACHE;</span><br><span class="line">  &#125; </span><br><span class="line"><span class="comment">/**DecodeJob类的getNextStage方法*/</span>   </span><br><span class="line"><span class="keyword">private</span> <span class="function">Stage <span class="title">getNextStage</span><span class="params">(Stage current)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (current) &#123;</span><br><span class="line">      <span class="keyword">case</span> INITIALIZE:</span><br><span class="line">        <span class="keyword">return</span> diskCacheStrategy.decodeCachedResource()</span><br><span class="line">            ? Stage.RESOURCE_CACHE : getNextStage(Stage.RESOURCE_CACHE);</span><br><span class="line">      <span class="keyword">case</span> RESOURCE_CACHE:</span><br><span class="line">        <span class="keyword">return</span> diskCacheStrategy.decodeCachedData()</span><br><span class="line">            ? Stage.DATA_CACHE : getNextStage(Stage.DATA_CACHE);</span><br><span class="line">      <span class="keyword">case</span> DATA_CACHE:</span><br><span class="line">        <span class="keyword">return</span> onlyRetrieveFromCache ? Stage.FINISHED : Stage.SOURCE;</span><br><span class="line">     <span class="comment">//省略部分代码</span></span><br><span class="line">    ......</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/**DiskCacheStrategy类的ALL对象*/</span>     </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DiskCacheStrategy ALL = <span class="keyword">new</span> DiskCacheStrategy() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">isDataCacheable</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> dataSource == DataSource.REMOTE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> isResourceCacheable(<span class="keyword">boolean</span> isFromAlternateCacheKey, DataSource dataSource,</span><br><span class="line">        EncodeStrategy encodeStrategy) &#123;</span><br><span class="line">      <span class="keyword">return</span> dataSource != DataSource.RESOURCE_DISK_CACHE &amp;&amp; dataSource != DataSource.MEMORY_CACHE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">decodeCachedResource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">decodeCachedData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;  </span><br><span class="line"><span class="comment">/**GlideBuilder类的build方法*/</span>  </span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line">  <span class="function">Glide <span class="title">build</span><span class="params">(@NonNull Context context)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">if</span> (diskCacheExecutor == <span class="keyword">null</span>) &#123;</span><br><span class="line">      diskCacheExecutor = GlideExecutor.newDiskCacheExecutor();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**GlideExecutor类的newDiskCacheExecutor方法*/</span> </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_DISK_CACHE_EXECUTOR_THREADS = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function">GlideExecutor <span class="title">newDiskCacheExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> newDiskCacheExecutor(</span><br><span class="line">        DEFAULT_DISK_CACHE_EXECUTOR_THREADS,</span><br><span class="line">        DEFAULT_DISK_CACHE_EXECUTOR_NAME,</span><br><span class="line">        UncaughtThrowableStrategy.DEFAULT);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/**GlideExecutor类的newDiskCacheExecutor方法*/</span> </span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> GlideExecutor newDiskCacheExecutor(</span><br><span class="line">      <span class="keyword">int</span> threadCount, String name, UncaughtThrowableStrategy uncaughtThrowableStrategy) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> GlideExecutor(</span><br><span class="line">        <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">            threadCount <span class="comment">/* corePoolSize */</span>,</span><br><span class="line">            threadCount <span class="comment">/* maximumPoolSize */</span>,</span><br><span class="line">            <span class="number">0</span> <span class="comment">/* keepAliveTime */</span>,</span><br><span class="line">            TimeUnit.MILLISECONDS,</span><br><span class="line">            <span class="keyword">new</span> PriorityBlockingQueue&lt;Runnable&gt;(),</span><br><span class="line">            <span class="keyword">new</span> DefaultThreadFactory(name, uncaughtThrowableStrategy, <span class="keyword">true</span>)));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>通过以上源码，可以分两个步骤来进行解读：</p><ul><li>第一步在DecodeJob对象的start方法开启子线程来加载图片，这里使用了线程池，通过willDecodeFromCache方法和getNextStage放结合，主要通过Stage枚举来判断当前使用的缓存策略，而缓存策略的设置则通过DiskCacheStrategy对象的<strong>decodeCachedResource和decodeCachedData方法来进行设置</strong>，而这两个方法在DiskCacheStrategy抽象类都是抽象方法，而他们的实现就是我们前面提到的Glide磁盘缓存的五种策略，上面代码中列出其中一种ALL代码，decodeCachedResource和decodeCachedData方法都返回ture，也就说明磁盘缓存既缓存原始图片，也缓存经过解码转换后的图片；如果decodeCachedResource返回false和decodeCachedData方法返回true，也就代表DATA策略，磁盘缓存只缓存原始加载的图片，其他同理</li><li>第二步通过前面对设置策略的判断，如果有缓存策略，则拿到的线程池就是磁盘缓存加载的线程池（线程池的理解可以看看我以前写的一篇<a href="https://www.maoqitian.com/2019/01/20/Java中的线程池/">文章</a>），该线程的初始化还是在GlideExecutor对象的build方法中，通过以上源码，该线程池只有唯一一个核心线程，这就保证所有执行的的任务都在这一个线程中执行，并且是顺序执行，也就不用在考虑线程同步的问题了。</li></ul></li><li>根据前面官网的说明，不管是内存缓存还是磁盘缓存，都是使用LRU，接着看看Glide磁盘缓存在哪获取LRU对象，还是得看到GlideBuilder对象的build方法</li></ul><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**GlideBuilder类的build方法*/</span>  </span><br><span class="line">private DiskCache.Factory diskCacheFactory;</span><br><span class="line">@NonNull</span><br><span class="line">  Glide build(@NonNull Context context) &#123;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    ..........</span><br><span class="line">    <span class="keyword">if</span> (diskCacheFactory == null) &#123;</span><br><span class="line">      diskCacheFactory = new InternalCacheDiskCacheFactory(context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    ..........</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**InternalCacheDiskCacheFactory类的继承关系*/</span></span><br><span class="line">public final <span class="keyword">class</span> InternalCacheDiskCacheFactory extends DiskLruCacheFactory &#123;</span><br><span class="line">   <span class="comment">//省略实现代码</span></span><br><span class="line">    ..........  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**DiskLruCacheFactory类的部分代码*/</span></span><br><span class="line">public <span class="keyword">class</span> DiskLruCacheFactory implements DiskCache.Factory &#123;</span><br><span class="line">   <span class="comment">//省略部分代码</span></span><br><span class="line">    ..........</span><br><span class="line">    @Override</span><br><span class="line">  public DiskCache build() &#123;</span><br><span class="line">    File cacheDir = cacheDirectoryGetter.getCacheDirectory();</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    ..........</span><br><span class="line">    return DiskLruCacheWrapper.create(cacheDir, diskCacheSize);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**DiskLruCacheWrapper类的部分代码*/</span></span><br><span class="line">public <span class="keyword">class</span> DiskLruCacheWrapper implements DiskCache &#123;</span><br><span class="line"><span class="comment">//省略部分代码</span></span><br><span class="line">    ..........</span><br><span class="line">   private synchronized DiskLruCache getDiskCache() throws IOException &#123;</span><br><span class="line">    <span class="keyword">if</span> (diskLruCache == null) &#123;</span><br><span class="line">      diskLruCache = DiskLruCache.open(directory, APP_VERSION, VALUE_COUNT, maxSize);</span><br><span class="line">    &#125;</span><br><span class="line">    return diskLruCache;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="comment">//省略部分代码</span></span><br><span class="line">    ..........</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**DiskLruCache类的部分代码*/</span></span><br><span class="line">public final <span class="keyword">class</span> DiskLruCache implements Closeable &#123;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    ..........</span><br><span class="line">    public static DiskLruCache open(File directory, int appVersion, int valueCount, long maxSize)</span><br><span class="line">      throws IOException &#123;</span><br><span class="line">          DiskLruCache cache = new DiskLruCache(directory, appVersion, valueCount, maxSize);</span><br><span class="line">          <span class="comment">//省略部分代码</span></span><br><span class="line">          ..........</span><br><span class="line">          return cache;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//省略部分代码</span></span><br><span class="line">      ..........</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过以上源码，我们在GlideBuilder对象的build方法中已经新建了InternalCacheDiskCacheFactory对象，也就是DiskLruCacheFactory对象，同样该对象已经被我们传入Engine对象的构造方法中，最终包装成LazyDiskCacheProvider对象（该对象代码就不贴出了），所以只要调用DiskLruCacheFactory对象的build方法就能够最终获取到<strong>DiskLruCache对象</strong>，该对象是Glide自己实现的，但是其原理和谷歌官方推荐的DiskLruCache也差不了太多，核心还是使用LRU算法来实现磁盘缓存。<h5 id="资源类型（Resource）"><a href="#资源类型（Resource）" class="headerlink" title="资源类型（Resource）"></a>资源类型（Resource）</h5></li><li><p>根据前面分分析，假定没有内存缓存，而是由磁盘缓存，则结合前面分析我们得到了磁盘缓存处理的线程池，也获得枚举Stage是RESOURCE_CACHE或DATA_CACHE，则在DecodeJob对象getNextGenerator方法，我们就能得到对应的Generator</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**DecodeJob的getNextGenerator方法*/</span></span><br><span class="line"><span class="keyword">private</span> DataFetcherGenerator getNextGenerator() &#123;</span><br><span class="line">    <span class="keyword">switch</span> (stage) &#123;</span><br><span class="line">      <span class="keyword">case</span> RESOURCE_CACHE:<span class="type"></span></span><br><span class="line"><span class="type">        return new ResourceCacheGenerator</span>(decodeHelper, <span class="built_in">this</span>);</span><br><span class="line">      <span class="keyword">case</span> DATA_CACHE:<span class="type"></span></span><br><span class="line"><span class="type">        return new DataCacheGenerator</span>(decodeHelper, <span class="built_in">this</span>);</span><br><span class="line">      <span class="keyword">case</span> SOURCE:<span class="type"></span></span><br><span class="line"><span class="type">        return new SourceGenerator</span>(decodeHelper, <span class="built_in">this</span>);</span><br><span class="line">      <span class="keyword">case</span> FINISHED:<span class="type"></span></span><br><span class="line"><span class="type">        return null</span>;</span><br><span class="line">      <span class="keyword">default</span>:<span class="type"></span></span><br><span class="line"><span class="type">        throw new IllegalStateException</span>(<span class="string">"Unrecognized stage: "</span> + stage);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>通过getNextGenerator方法的源码，如果之前设置磁盘缓存策略为DiskCacheStrategy.RESOURCE，则应该对应的就是枚举Stage.RESOURCE_CACHE，也就是说接下来使用的资源Generator是ResourceCacheGenerator，结合<a href="https://www.maoqitian.com/2019/02/19/%E4%BB%8E%E6%BA%90%E7%A0%81%E8%A7%92%E5%BA%A6%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3glide%EF%BC%88%E4%B8%8A%EF%BC%89/">上一篇文章</a>，我们分析网络加载流程是这里获取的是SourceGenerator，我们接着来看ResourceCacheGenerator的startNext()方法</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** ResourceCacheGenerator类的startNext方法*/</span></span><br><span class="line">  <span class="meta">@SuppressWarnings</span>(<span class="string">"PMD.CollapsibleIfStatements"</span>)</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">startNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="comment">//省略部分代码</span></span><br><span class="line">      ..........</span><br><span class="line">      currentKey =</span><br><span class="line">          <span class="keyword">new</span> ResourceCacheKey(<span class="comment">// NOPMD AvoidInstantiatingObjectsInLoops</span></span><br><span class="line">              helper.getArrayPool(),</span><br><span class="line">              sourceId,</span><br><span class="line">              helper.getSignature(),</span><br><span class="line">              helper.getWidth(),</span><br><span class="line">              helper.getHeight(),</span><br><span class="line">              transformation,</span><br><span class="line">              resourceClass,</span><br><span class="line">              helper.getOptions());</span><br><span class="line">      cacheFile = helper.getDiskCache().get(currentKey);</span><br><span class="line">      <span class="keyword">if</span> (cacheFile != <span class="keyword">null</span>) &#123;</span><br><span class="line">        sourceKey = sourceId;</span><br><span class="line">        modelLoaders = helper.getModelLoaders(cacheFile);</span><br><span class="line">        modelLoaderIndex = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    loadData = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">boolean</span> started = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">while</span> (!started &amp;&amp; hasNextModelLoader()) &#123;</span><br><span class="line">      ModelLoader&lt;File, ?&gt; modelLoader = modelLoaders.get(modelLoaderIndex++);</span><br><span class="line">      loadData = modelLoader.buildLoadData(cacheFile,</span><br><span class="line">          helper.getWidth(), helper.getHeight(), helper.getOptions());</span><br><span class="line">      <span class="keyword">if</span> (loadData != <span class="keyword">null</span> &amp;&amp; helper.hasLoadPath(loadData.fetcher.getDataClass())) &#123;</span><br><span class="line">        started = <span class="keyword">true</span>;</span><br><span class="line">        loadData.fetcher.loadData(helper.getPriority(), <span class="keyword">this</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> started;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/**DecodeHelper类的getDiskCache方法*/</span></span><br><span class="line"> <span class="function">DiskCache <span class="title">getDiskCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">return</span> diskCacheProvider.<span class="title">getDiskCache</span><span class="params">()</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/** LazyDiskCacheProvider类的getDiskCache方法 */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function">DiskCache <span class="title">getDiskCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (diskCache == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (diskCache == <span class="keyword">null</span>) &#123;</span><br><span class="line">            diskCache = factory.build();</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (diskCache == <span class="keyword">null</span>) &#123;</span><br><span class="line">            diskCache = <span class="keyword">new</span> DiskCacheAdapter();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> diskCache;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>通过以上源码其实已经很清晰，首先还是获取缓存的唯一key，然后helper.getDiskCache().get(currentKey)这一句话就是获取缓存，helper对象就是DecodeHelper，它的getDiskCache方法获取的对象也就是前面提到的包含DiskLruCacheFactory对象的LazyDiskCacheProvider对象，而LazyDiskCacheProvider对象的getDiskCache方法调用了factory.build()，factory对象DiskLruCacheFactory，也就是获取了我们前面所说的<strong>DiskLruCache对象</strong>。</p></li><li>接着继续看数据返回走的流程还是通过回调通cb.onDataFetcherReady将获取的缓存资源传递到DecodeJob，由DecodeJob继续执行剩余图片显示步骤，大致流程和网络加载差不多，这里就不进行讨论了<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** ResourceCacheGenerator类的startNext方法*/</span></span><br><span class="line"> @<span class="keyword">Override</span></span><br><span class="line">  public void onDataReady(Object data) &#123;</span><br><span class="line">    <span class="selector-tag">cb</span><span class="selector-class">.onDataFetcherReady</span>(<span class="selector-tag">sourceKey</span>, <span class="selector-tag">data</span>, <span class="selector-tag">loadData</span><span class="selector-class">.fetcher</span>, <span class="selector-tag">DataSource</span><span class="selector-class">.RESOURCE_DISK_CACHE</span>,</span><br><span class="line">        <span class="selector-tag">currentKey</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="数据来源-Data"><a href="#数据来源-Data" class="headerlink" title="数据来源 (Data)"></a>数据来源 (Data)</h5><ul><li>同理资源类型（Resource），则设置磁盘缓存策略为DiskCacheStrategy.DATA，则应该对应的就是枚举Stage.DATA_CACHE，使用的资源Generator是DataCacheGenerator，所以直接看看DataCacheGenerator的startNext()方法，该方法源码如下，同样是根据key通过<strong>DiskLruCache对象</strong>来获取磁盘缓存（DATA），数据返回走的流程还是通过回调通cb.onDataFetcherReady将获取的缓存资源传递到DecodeJob，由DecodeJob继续执行剩余图片显示<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** DataCacheGenerator类的startNext方法*/</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> boolean startNext() &#123;</span><br><span class="line">      <span class="comment">//省略部分代码</span></span><br><span class="line">      ..........</span><br><span class="line">      Key originalKey = new DataCacheKey(sourceId, helper.getSignature());</span><br><span class="line">      cacheFile = helper.getDiskCache().<span class="keyword">get</span>(originalKey);</span><br><span class="line">      <span class="keyword">if</span> (cacheFile != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.sourceKey = sourceId;</span><br><span class="line">        modelLoaders = helper.getModelLoaders(cacheFile);</span><br><span class="line">        modelLoaderIndex = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    loadData = <span class="literal">null</span>;</span><br><span class="line">    boolean started = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> (!started &amp;&amp; hasNextModelLoader()) &#123;</span><br><span class="line">      ModelLoader&lt;File, ?&gt; modelLoader = modelLoaders.<span class="keyword">get</span>(modelLoaderIndex++);</span><br><span class="line">      loadData =</span><br><span class="line">          modelLoader.buildLoadData(cacheFile, helper.getWidth(), helper.getHeight(),</span><br><span class="line">              helper.getOptions());</span><br><span class="line">      <span class="keyword">if</span> (loadData != <span class="literal">null</span> &amp;&amp; helper.hasLoadPath(loadData.fetcher.getDataClass())) &#123;</span><br><span class="line">        started = <span class="literal">true</span>;</span><br><span class="line">        loadData.fetcher.loadData(helper.getPriority(), <span class="keyword">this</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> started;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/** DataCacheGenerator类的onDataReady方法*/</span>  </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> void onDataReady(Object <span class="keyword">data</span>) &#123;</span><br><span class="line">    cb.onDataFetcherReady(sourceKey, <span class="keyword">data</span>, loadData.fetcher, DataSource.DATA_DISK_CACHE, sourceKey);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="磁盘缓存数据存入"><a href="#磁盘缓存数据存入" class="headerlink" title="磁盘缓存数据存入"></a>磁盘缓存数据存入</h5><ul><li>前面我们只是了解了磁盘缓存的获取，磁盘缓存又是在哪里存入的，接着往下看。</li><li><p>根据上一篇文章的分析，加载图片会走到DecodeJob对象的decodeFromRetrievedData方法</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** DecodeJob类的decodeFromRetrievedData方法*/</span>  </span><br><span class="line">private void decodeFromRetrievedData() &#123;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">      ..........</span><br><span class="line">    notifyEncodeAndRelease(resource, currentDataSource);</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">      ..........</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/** DecodeJob类的notifyEncodeAndRelease方法*/</span>  </span><br><span class="line">private final DeferredEncodeManager&lt;?&gt; deferredEncodeManager = new DeferredEncodeManager&lt;&gt;();</span><br><span class="line">private void notifyEncodeAndRelease(Resource&lt;R&gt; resource, DataSource dataSource) &#123;</span><br><span class="line"><span class="comment">//省略部分代码</span></span><br><span class="line">      ..........</span><br><span class="line">    stage = Stage.ENCODE;</span><br><span class="line">    try &#123;</span><br><span class="line">      <span class="keyword">if</span> (deferredEncodeManager.hasResourceToEncode()) &#123;</span><br><span class="line">        deferredEncodeManager.encode(diskCacheProvider, options);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    ..........</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/** DeferredEncodeManager类的encode方法**/</span></span><br><span class="line">void encode(DiskCacheProvider diskCacheProvider, Options options) &#123;</span><br><span class="line">      GlideTrace.beginSection(<span class="string">"DecodeJob.encode"</span>);</span><br><span class="line">      try &#123;</span><br><span class="line">        diskCacheProvider.getDiskCache().put(key,</span><br><span class="line">            new DataCacheWriter&lt;&gt;(encoder, toEncode, options));</span><br><span class="line">      &#125; finally &#123;</span><br><span class="line">        toEncode.unlock();</span><br><span class="line">        GlideTrace.endSection();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>通过以上源码可以看到DecodeJob对象的decodeFromRetrievedData方法通过调用notifyEncodeAndRelease方法，在该方法中调用了内部类DeferredEncodeManager的encode方法存入了磁盘缓存，这里存入的是转换后的磁盘缓存（Resource）。</p></li><li><p>原始数据也就是SourceGenerator第一次网络下载成功之后获取的图片数据，之后再做磁盘缓存，所以再次回到看到SourceGenerator的onDataReady方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**SourceGenerator类的onDataReady方法**/</span> </span><br><span class="line"><span class="keyword">private</span> <span class="built_in">Object</span> dataToCache;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">void</span> onDataReady(<span class="built_in">Object</span> data) &#123;</span><br><span class="line">    DiskCacheStrategy diskCacheStrategy = helper.getDiskCacheStrategy();</span><br><span class="line">    <span class="keyword">if</span> (data != <span class="literal">null</span> &amp;&amp; diskCacheStrategy.isDataCacheable(loadData.fetcher.getDataSource())) &#123;</span><br><span class="line">      dataToCache = data;</span><br><span class="line">      cb.reschedule();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      cb.onDataFetcherReady(loadData.sourceKey, data, loadData.fetcher,</span><br><span class="line">          loadData.fetcher.getDataSource(), originalKey);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;  </span><br><span class="line"><span class="comment">/**SourceGenerator类的startNext方法**/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">boolean</span> startNext() &#123;</span><br><span class="line">    <span class="keyword">if</span> (dataToCache != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="built_in">Object</span> data = dataToCache;</span><br><span class="line">      dataToCache = <span class="literal">null</span>;</span><br><span class="line">      cacheData(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sourceCacheGenerator != <span class="literal">null</span> &amp;&amp; sourceCacheGenerator.startNext()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">//省略部分代码</span></span><br><span class="line">  ..........</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/**SourceGenerator类的cacheData方法**/</span>  </span><br><span class="line"><span class="keyword">private</span> <span class="built_in">void</span> cacheData(<span class="built_in">Object</span> dataToCache) &#123;</span><br><span class="line">    long startTime = LogTime.getLogTime();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Encoder&lt;<span class="built_in">Object</span>&gt; encoder = helper.getSourceEncoder(dataToCache);</span><br><span class="line">      DataCacheWriter&lt;<span class="built_in">Object</span>&gt; writer =</span><br><span class="line">          <span class="keyword">new</span> DataCacheWriter&lt;&gt;(encoder, dataToCache, helper.getOptions());</span><br><span class="line">      originalKey = <span class="keyword">new</span> DataCacheKey(loadData.sourceKey, helper.getSignature());</span><br><span class="line">      helper.getDiskCache().put(originalKey, writer);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    ..........</span><br><span class="line">    sourceCacheGenerator =</span><br><span class="line">        <span class="keyword">new</span> DataCacheGenerator(Collections.singletonList(loadData.sourceKey), helper, <span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/**DecodeJob类的reschedule方法**/</span> </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">void</span> reschedule() &#123;</span><br><span class="line">    runReason = RunReason.SWITCH_TO_SOURCE_SERVICE;</span><br><span class="line">    callback.reschedule(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/**Engine类的reschedule方法**/</span>   </span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">void</span> reschedule(DecodeJob&lt;?&gt; job) &#123;</span><br><span class="line">    getActiveSourceExecutor().execute(job);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>通过以上源码，其实逻辑已经很清晰，会让你有“柳暗花明又一村”的感觉，onDataReady网络请求成功并且设置了缓存策略，则将图片资源赋值给Object类型的dataToCache，执行回调cb.reschedule，cb就是DecodeJob对象，所以接着执行了DecodeJob对象的reschedule方法，该方法再次执行回调也就是执行了Engine对象的reschedule方法，该方法再次执行DecodeJob，也就会再次触发SourceGenerator类的startNext方法，该方法首先判断了Object类型的dataToCache是否有值，前面分析该对象已经赋值，所以就进入到SourceGenerator对象的cacheData方法存入了我们的原始下载图片的缓存。</p><h4 id="仅从缓存加载图片"><a href="#仅从缓存加载图片" class="headerlink" title="仅从缓存加载图片"></a>仅从缓存加载图片</h4></li><li>前面我基本把Glide的缓存模块梳理了一遍，但是还差个东西，那就是如果我只想Glide加载缓存呢？这种需求还是有的，比如说我们在有些应用看到的省流量模式，不就是正好对应这个需求，没关系Gldie也已经为我们考虑到了，那就是onlyRetrieveFromCache(true)，只要设置了这个，图片在内存缓存或在磁盘缓存中就会被加载出来，而没有缓存，则这一次加载失败。</li><li><p>我们看看如何使用</p><figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RequestOptions</span> requestOptions = <span class="function"><span class="keyword">new</span> <span class="title">RequestOptions</span>().<span class="title">onlyRetrieveFromCache</span>(true);</span></span><br><span class="line"><span class="function"><span class="title">Glide</span>.<span class="title">with</span>(this).<span class="title">load</span>(<span class="type">IMAGE_URL</span>).<span class="title">apply</span>(requestOptions).<span class="title">into</span>(mImageView);</span></span><br><span class="line"><span class="function"><span class="comment">//Generated API 方式        </span></span></span><br><span class="line"><span class="function"><span class="title">GlideApp</span>.<span class="title">with</span>(this)</span></span><br><span class="line"><span class="function">  .<span class="title">load</span>(url)</span></span><br><span class="line"><span class="function">  .<span class="title">diskCacheStrategy</span>(<span class="type">DiskCacheStrategy</span>.<span class="type">ALL</span>)</span></span><br><span class="line"><span class="function">  .<span class="title">into</span>(mImageView);</span></span><br></pre></td></tr></table></figure></li><li><p>使用起来还是很方便的，只要设置onlyRetrieveFromCache(true)方法就行，而它的原理也其实也很简单，我们再次回到DecodeJob对象的getNextStage方法，如果前面获取了缓存，则相应得到对应的Generator加载图片，如果获取不到缓存，则枚举Stage.FINISHED，DecodeJob对象的getNextGenerator方法则会返回null。(如下代码所示)</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**DecodeJob类的getNextStage方法**/</span> </span><br><span class="line"><span class="function"><span class="keyword">private</span> Stage <span class="title">getNextStage</span>(<span class="params">Stage current</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (current) &#123;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    ..........</span><br><span class="line">      <span class="keyword">case</span> DATA_CACHE:</span><br><span class="line">        <span class="keyword">return</span> onlyRetrieveFromCache ? Stage.FINISHED : Stage.SOURCE;</span><br><span class="line">      <span class="keyword">case</span> SOURCE:</span><br><span class="line">      <span class="keyword">case</span> FINISHED:</span><br><span class="line">        <span class="keyword">return</span> Stage.FINISHED;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/**DecodeJob类的getNextGenerator方法**/</span>   </span><br><span class="line"><span class="function"><span class="keyword">private</span> DataFetcherGenerator <span class="title">getNextGenerator</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (stage) &#123;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    ..........</span><br><span class="line">      <span class="keyword">case</span> FINISHED:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unrecognized stage: "</span> + stage);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="Glide磁盘缓存机制示意图"><a href="#Glide磁盘缓存机制示意图" class="headerlink" title="Glide磁盘缓存机制示意图"></a>Glide磁盘缓存机制示意图</h5><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/%E4%BB%8E%E6%BA%90%E7%A0%81%E8%A7%92%E5%BA%A6%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Glide/Glide%E7%A3%81%E7%9B%98%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="Glide磁盘缓存机制示意图"></p><h3 id="Glide缓存小结"><a href="#Glide缓存小结" class="headerlink" title="Glide缓存小结"></a>Glide缓存小结</h3><ul><li>通过前面对Glide缓存的分析，让我再次认识到Glide的强大，使用时只是简单的几个方法设置或者不设置，Glide都能够在背后依靠其复杂的逻辑为我们快速的加载出图片并显示，缓存还有一些细节比如可以自定义key等，这里就不进行展开了，有兴趣的可以自行研究。</li></ul><h2 id="Glide-回调与监听"><a href="#Glide-回调与监听" class="headerlink" title="Glide 回调与监听"></a>Glide 回调与监听</h2><h3 id="图片加载成功回调原理"><a href="#图片加载成功回调原理" class="headerlink" title="图片加载成功回调原理"></a>图片加载成功回调原理</h3><ul><li>由上一篇文章分析，我们来回顾一下图片加载成功之后的逻辑。数据加载成功之后切换主线程最终调用SingleRequest类的onResourceReady方法，在该方法中加载成功的数据通过target.onResourceReady方法将数据加载出来，target就是DrawableImageViewTarget对象，他继续了实现了Target接口的基类ImageViewTarget，所以调用它实现的onResourceReady方法或者父类实现的onResourceReady方法就实现了加载成功数据的回调，并由DrawableImageViewTarget对象显示加载成功的图片，这就是数据加载成功回调原理。 <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**SingleRequest类的onResourceReady方法**/</span>    </span><br><span class="line"><span class="meta">@Nullable</span> </span><br><span class="line"><span class="keyword">private</span> List&lt;RequestListener&lt;R&gt;&gt; requestListeners;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">void</span> onResourceReady(Resource&lt;R&gt; resource, R result, DataSource dataSource) &#123;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    ..........</span><br><span class="line">    isCallingCallbacks = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="built_in">boolean</span> anyListenerHandledUpdatingTarget = <span class="literal">false</span>;</span><br><span class="line">      <span class="comment">//省略部分代码</span></span><br><span class="line">     ..........</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!anyListenerHandledUpdatingTarget) &#123;</span><br><span class="line">        Transition&lt;? <span class="keyword">super</span> R&gt; animation =</span><br><span class="line">            animationFactory.build(dataSource, isFirstResource);</span><br><span class="line">        target.onResourceReady(result, animation);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    ..........</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/**Target 接口**/</span>      </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> Target&lt;R&gt; <span class="keyword">extends</span> LifecycleListener &#123;&#125;</span><br><span class="line"><span class="comment">/**ImageViewTarget类的onResourceReady方法**/</span> </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">void</span> onResourceReady(<span class="meta">@NonNull</span> Z resource, <span class="meta">@Nullable</span> Transition&lt;? <span class="keyword">super</span> Z&gt; transition) &#123;</span><br><span class="line">    <span class="keyword">if</span> (transition == <span class="literal">null</span> || !transition.transition(resource, <span class="keyword">this</span>)) &#123;</span><br><span class="line">      setResourceInternal(resource);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      maybeUpdateAnimatable(resource);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/**ImageViewTarget类的setResourceInternal方法**/</span> </span><br><span class="line"><span class="keyword">private</span> <span class="built_in">void</span> setResourceInternal(<span class="meta">@Nullable</span> Z resource) &#123;</span><br><span class="line">    setResource(resource);</span><br><span class="line">    maybeUpdateAnimatable(resource);</span><br><span class="line">  &#125;</span><br><span class="line">DrawableImageViewTarget</span><br><span class="line"><span class="comment">/**DrawableImageViewTarget类的setResource方法**/</span> </span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="built_in">void</span> setResource(<span class="meta">@Nullable</span> Drawable resource) &#123;</span><br><span class="line">    view.setImageDrawable(resource);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Glide监听（listener）"><a href="#Glide监听（listener）" class="headerlink" title="Glide监听（listener）"></a>Glide监听（listener）</h3><ul><li><p>再次看看Glide监听（listener）的例子</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Glide.with(<span class="keyword">this</span>).load(IMAGE_URL).listener(<span class="keyword">new</span> RequestListener&lt;Drawable&gt;() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onLoadFailed</span><span class="params">(@Nullable GlideException e, Object model, Target&lt;Drawable&gt; <span class="keyword">target</span>, <span class="keyword">boolean</span> isFirstResource)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onResourceReady</span><span class="params">(Drawable resource, Object model, Target&lt;Drawable&gt; <span class="keyword">target</span>, DataSource dataSource, <span class="keyword">boolean</span> isFirstResource)</span> </span>&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;).into(mImageView);</span><br></pre></td></tr></table></figure></li><li><p>Glide监听的实现同样还是基于我们上面分析的SingleRequest对象的onResourceReady方法，使用的时候调用RequestBuilder对象的listener方法，传入的RequestListener对象加入到requestListeners，这样在SingleRequest对象的onResourceReady方法中遍历requestListeners，来回调listener.onResourceReady方法，布尔类型的anyListenerHandledUpdatingTarget则接收回调listener.onResourceReady方法的返回值，如果返回true，则不会执会往下执行，则接着的into方法就不会被触发，说明我们自己在监听中处理，返回false则不拦截。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**RequestBuilder类的listener方法**/</span> </span><br><span class="line"><span class="meta">@Nullable</span> </span><br><span class="line"><span class="keyword">private</span> List&lt;RequestListener&lt;TranscodeType&gt;&gt; requestListeners;</span><br><span class="line">  <span class="keyword">public</span> RequestBuilder&lt;TranscodeType&gt; listener(</span><br><span class="line">      <span class="meta">@Nullable</span> RequestListener&lt;TranscodeType&gt; requestListener) &#123;</span><br><span class="line">    <span class="keyword">this</span>.requestListeners = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">return</span> <span class="title">addListener</span><span class="params">(requestListener)</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/**RequestBuilder类的addListener方法**/</span>  </span><br><span class="line">  <span class="keyword">public</span> RequestBuilder&lt;TranscodeType&gt; addListener(</span><br><span class="line">      <span class="meta">@Nullable</span> RequestListener&lt;TranscodeType&gt; requestListener) &#123;</span><br><span class="line">    <span class="keyword">if</span> (requestListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.requestListeners == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.requestListeners = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.requestListeners.add(requestListener);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**SingleRequest类的onResourceReady方法**/</span>    </span><br><span class="line"><span class="meta">@Nullable</span> </span><br><span class="line"><span class="keyword">private</span> List&lt;RequestListener&lt;R&gt;&gt; requestListeners;</span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">onResourceReady</span><span class="params">(Resource&lt;R&gt; resource, R result, DataSource dataSource)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    ..........</span><br><span class="line">    isCallingCallbacks = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">boolean</span> anyListenerHandledUpdatingTarget = <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">if</span> (requestListeners != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (RequestListener&lt;R&gt; listener : requestListeners) &#123;</span><br><span class="line">          anyListenerHandledUpdatingTarget |=</span><br><span class="line">              listener.onResourceReady(result, model, <span class="keyword">target</span>, dataSource, isFirstResource);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      anyListenerHandledUpdatingTarget |=</span><br><span class="line">          targetListener != <span class="keyword">null</span></span><br><span class="line">              &amp;&amp; targetListener.onResourceReady(result, model, <span class="keyword">target</span>, dataSource, isFirstResource);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!anyListenerHandledUpdatingTarget) &#123;</span><br><span class="line">        Transition&lt;? <span class="keyword">super</span> R&gt; animation =</span><br><span class="line">            animationFactory.build(dataSource, isFirstResource);</span><br><span class="line">        <span class="keyword">target</span>.onResourceReady(result, animation);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    ..........</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Target（目标）"><a href="#Target（目标）" class="headerlink" title="Target（目标）"></a>Target（目标）</h2><ul><li>Target在Glide中相当于中间人的作用，在图片的展示起到承上启下的功效，首先看看Target接口的继承关系图</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/%E4%BB%8E%E6%BA%90%E7%A0%81%E8%A7%92%E5%BA%A6%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Glide/Target%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%E5%9B%BE.png" alt="Target继承关系图"></p><ul><li>通过该图，我们可以把Target分为三类，一种是简单的Target，一种是加载到特定View的Target(ViewTarget)，还有一种是FutureTarget，可以知道异步执行的结果，得到缓存文件</li><li>上一篇文章分析into方法时我们是分析into(ImageView)这个方法开始的，它内部还是会得到特定的Target对象，也就是我们一直说的DrawableImageViewTarget，而他是属于ViewTarget的子类<h3 id="简单的Target（SimpleTarget）"><a href="#简单的Target（SimpleTarget）" class="headerlink" title="简单的Target（SimpleTarget）"></a>简单的Target（SimpleTarget）</h3></li><li>SimpleTarget其实是在给我们更灵活的加载到各种各样对象准备的，只要指定我们加载获取的是什么对象asBitmap()，就能使用SimpleTarge或者集成它的我们自定义的对象，在其中通过获取的Bitmap显示在对应的控件上，比如上一篇文章例子提到的NotifivationTarget，就是加载到指定的Notifivation中，灵活加载。<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意需要指定Glide的加载类型asBitmap，不指定Target不知道本身是是类型的Target</span></span><br><span class="line"><span class="selector-tag">Glide</span><span class="selector-class">.with</span>(this)<span class="selector-class">.asBitmap</span>()<span class="selector-class">.load</span>(IMAGE_URL)<span class="selector-class">.into</span>(new SimpleTarget&lt;Bitmap&gt;() &#123;</span><br><span class="line">            <span class="variable">@Override</span></span><br><span class="line">            public void onResourceReady(<span class="variable">@NonNull</span> Bitmap resource, <span class="variable">@Nullable</span> Transition&lt;? super Bitmap&gt; transition) &#123;</span><br><span class="line">            <span class="comment">//加载完成已经在主线程</span></span><br><span class="line">                <span class="selector-tag">mImageView</span><span class="selector-class">.setImageBitmap</span>(resource);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="特定View的Target-ViewTarget"><a href="#特定View的Target-ViewTarget" class="headerlink" title="特定View的Target(ViewTarget)"></a>特定View的Target(ViewTarget)</h3><ul><li>由DrawableImageViewTarget和BitmapImageViewTarget我们就可以知道这是为了不同类型的图片资源准备的Target，但是还有一种需求，就是如果我们传入是要加载图片资源的View，但是该View不被Glide支持，目前into方法支持传入ImageView，没关系，ViewTarget可以帮上忙，比如我们需要加载到RelativeLayout<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> maoqitian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 自定义RelativeLayout</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/18 0018 19:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyView</span> <span class="keyword">extends</span> <span class="title">RelativeLayout</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ViewTarget&lt;MyView, Drawable&gt; viewTarget;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        viewTarget =<span class="keyword">new</span> ViewTarget&lt;MyView, Drawable&gt;(<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResourceReady</span><span class="params">(@NonNull Drawable resource, @Nullable Transition&lt;? <span class="keyword">super</span> Drawable&gt; transition)</span> </span>&#123;</span><br><span class="line">                setBackground(resource);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ViewTarget&lt;MyView, Drawable&gt; <span class="title">getViewTarget</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> viewTarget;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用Glide加载</span></span><br><span class="line">MyView rl_view = findViewById(R.id.rl_view);</span><br><span class="line">Glide.with(<span class="keyword">this</span>).load(IMAGE_URL).into(rl_view.getViewTarget());</span><br></pre></td></tr></table></figure></li></ul><h3 id="FutureTarget"><a href="#FutureTarget" class="headerlink" title="FutureTarget"></a>FutureTarget</h3><ul><li>FutureTarget的一大用处就是可以得到缓存文件</li></ul><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                FutureTarget&lt;File&gt; <span class="keyword">target</span> = <span class="keyword">null</span>;</span><br><span class="line">                RequestManager requestManager = Glide.with(MainActivity.<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">target</span> = requestManager</span><br><span class="line">                            .downloadOnly()</span><br><span class="line">                            .load(IMAGE_URL)</span><br><span class="line">                            .submit();</span><br><span class="line">                    <span class="keyword">final</span> File downloadedFile = <span class="keyword">target</span>.get();</span><br><span class="line">                    Log.i(TAG,<span class="string">"缓存文件路径"</span>+downloadedFile.getAbsolutePath());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ExecutionException | InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">target</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">target</span>.cancel(<span class="keyword">true</span>); <span class="comment">// mayInterruptIfRunning</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br></pre></td></tr></table></figure><h3 id="preload（预加载）"><a href="#preload（预加载）" class="headerlink" title="preload（预加载）"></a>preload（预加载）</h3><ul><li><p>如何使用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Glide</span><span class="selector-class">.with</span>(<span class="selector-tag">this</span>)<span class="selector-class">.load</span>(<span class="selector-tag">IMAGE_URL</span>)<span class="selector-class">.preload</span>();</span><br></pre></td></tr></table></figure></li><li><p>预加载其实也是属于Target的范围，只是他加载的对象为空而已，也就是没有加载目标</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**RequestBuilder类的preload方法**/</span></span><br><span class="line"> <span class="meta">@NonNull</span></span><br><span class="line">  <span class="keyword">public</span> Target&lt;TranscodeType&gt; preload() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">return</span> <span class="title">preload</span><span class="params">(Target.SIZE_ORIGINAL, Target.SIZE_ORIGINAL)</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/**RequestBuilder类的preload方法**/</span> </span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line">  <span class="keyword">public</span> Target&lt;TranscodeType&gt; preload(<span class="keyword">int</span> width, <span class="keyword">int</span> height) &#123;</span><br><span class="line">    <span class="keyword">final</span> PreloadTarget&lt;TranscodeType&gt; <span class="keyword">target</span> = PreloadTarget.obtain(requestManager, width, height);</span><br><span class="line">    <span class="function"><span class="keyword">return</span> <span class="title">into</span><span class="params">(<span class="keyword">target</span>)</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/**RequestBuilder类的onResourceReady方法**/</span>   </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PreloadTarget</span>&lt;<span class="title">Z</span>&gt; <span class="keyword">extends</span> <span class="title">SimpleTarget</span>&lt;<span class="title">Z</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Handler HANDLER = <span class="keyword">new</span> Handler(Looper.getMainLooper(), <span class="keyword">new</span> Callback() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">handleMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (message.what == MESSAGE_CLEAR) &#123;</span><br><span class="line">        ((PreloadTarget&lt;?&gt;) message.obj).clear();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//省略部分代码</span></span><br><span class="line">    ..........</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;Z&gt; PreloadTarget&lt;Z&gt; obtain(RequestManager requestManager, <span class="keyword">int</span> width, <span class="keyword">int</span> height) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PreloadTarget&lt;&gt;(requestManager, width, height);</span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onResourceReady</span><span class="params">(@NonNull Z resource, @Nullable Transition&lt;? <span class="keyword">super</span> Z&gt; transition)</span> </span>&#123;</span><br><span class="line">    HANDLER.obtainMessage(MESSAGE_CLEAR, <span class="keyword">this</span>).sendToTarget();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//省略部分代码</span></span><br><span class="line">    ..........</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过以上源码，逻辑已经非常清晰，Glide的preload方法里使用的继承SimpleTarget的PreloadTarget对象来作为Target，在它的onResourceReady方法中并没有任何的加载操作，只是调用了Handler来释放资源，到这里也许你会有疑惑，不是说预加载么，怎么不加载。哈哈，其实到onResourceReady方法被调用经过前面的分析Glide已经走完缓存的所有逻辑，那就很容易理解了，预加载只是把图片加载到缓存当中，没有进行其他操作，自然是预加载，并且加载完成之后释放了资源。</p></li></ul><h2 id="Generated-API"><a href="#Generated-API" class="headerlink" title="Generated API"></a>Generated API</h2><ul><li>Generated API说白了就是Glide使用注解处理器生成一个API（GlideApp），该API可以代替Glide帮助我们完成图片加载。</li><li>Generated API 目前仅可以在 Application 模块内使用，使用Generated API一方面在Application 模块中可将常用的选项组打包成一个选项在 Generated API 中使用，另一方面可以为Generated API 扩展自定义选项（扩展我们自定义的功能方法）。</li><li>在上一篇文章中例子中我们可以看到使用Generated API之后使用Glide的方式基本上和Glide3的用法一样流式API使用，先来回顾一下如何使用Generated API</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在app下的gradle添加Glide注解处理器的依赖</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">  annotationProcessor <span class="symbol">'com</span>.github.bumptech.glide:compiler:<span class="number">4.8</span><span class="number">.0</span>'</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//新建一个类集成AppGlideModule并添加上@GlideModule注解，重新rebuild项目就可以使用GlideApp了</span></span><br><span class="line"><span class="meta">@GlideModule</span></span><br><span class="line">public <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAppGlideModule</span> <span class="keyword">extends</span> <span class="title">AppGlideModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>经过上的代码的操作，通过Glide注解处理器已经给我们生成了GlideApp类</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**GlideApp类部分代码**/</span> </span><br><span class="line">public <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">GlideApp</span> </span>&#123;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    ..........</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    public static <span class="type">GlideRequests</span> <span class="keyword">with</span>(<span class="meta">@NonNull</span> <span class="type">Context</span> context) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">GlideRequests</span>) <span class="type">Glide</span>.<span class="keyword">with</span>(context);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//省略部分代码</span></span><br><span class="line">    ..........</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**GlideApp类部分代码**/</span> </span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">GlideRequest&lt;TranscodeType&gt;</span> <span class="keyword">extends</span> <span class="title">RequestBuilder&lt;TranscodeType&gt;</span> <span class="title">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"><span class="comment">//省略部分代码</span></span><br><span class="line">    ..........</span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line">  <span class="meta">@CheckResult</span></span><br><span class="line">  public <span class="type">GlideRequest</span>&lt;<span class="type">TranscodeType</span>&gt; placeholder(<span class="meta">@Nullable</span> <span class="type">Drawable</span> drawable) &#123;</span><br><span class="line">    <span class="keyword">if</span> (getMutableOptions() instanceof <span class="type">GlideOptions</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.requestOptions = ((<span class="type">GlideOptions</span>) getMutableOptions()).placeholder(drawable);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.requestOptions = <span class="keyword">new</span> <span class="type">GlideOptions</span>().apply(<span class="keyword">this</span>.requestOptions).placeholder(drawable);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//省略部分代码</span></span><br><span class="line">    ..........</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**RequestBuilder类的getMutableOptions方法**/</span> </span><br><span class="line"><span class="keyword">protected</span> <span class="type">RequestOptions</span> getMutableOptions() &#123;</span><br><span class="line">    <span class="keyword">return</span> defaultRequestOptions == <span class="keyword">this</span>.requestOptions</span><br><span class="line">        ? <span class="keyword">this</span>.requestOptions.clone() : <span class="keyword">this</span>.requestOptions;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>通过以上源码，可以发现，GlideApp对象的with方法返回的是GlideRequests对象，GlideRequests对象继承的是RequestBuilder，这时应该又是豁然开朗的感觉，GlideApp能够适应流式API，其实就是对RequestBuilder包装了一层，GlideRequests对象通过其父类RequestBuilder对象的getMutableOptions方法获取到requestOptions，然后在相应的方法中操作requestOptions以达到可以使用流式API的功能。<h3 id="GlideExtension"><a href="#GlideExtension" class="headerlink" title="GlideExtension"></a>GlideExtension</h3></li><li>GlideExtension字面意思就是Glide扩展，它是一个作用于类上的注解，任何扩展 Glide API 的类都必须使用这个注解来标记，否则其中被注解的方法就会被忽略。<br>被 @GlideExtension 注解的类应以工具类的思维编写。这种类应该有一个私有的、空的构造方法，应为 final 类型，并且仅包含静态方法。<h4 id="GlideOption"><a href="#GlideOption" class="headerlink" title="@GlideOption"></a>@GlideOption</h4></li><li><p>GlideOption注解是用来扩展RequestOptions，扩展功能方法第一个参数必须是RequestOptions。下面我们通过设置一个扩展默认设置占位符和错误符方法的例子来说明GlideOption注解。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> maoqitian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: GlideApp 功能扩展类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/2/19 0019 12:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GlideExtension</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGlideExtension</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MyGlideExtension() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可以为方法任意添加参数，但要保证第一个参数为 RequestOptions</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置通用的加载占位图和错误加载图</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> options</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GlideOption</span></span><br><span class="line">    <span class="keyword">public</span> static void normalPlaceholder(RequestOptions options) &#123;</span><br><span class="line">        options.placeholder(R.drawable.ic_cloud_download_black_24dp).error(R.drawable.ic_error_black_24dp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**GlideOptions类中生成对应的方法**/</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@see</span> MyGlideExtension#normalPlaceholder(RequestOptions)</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@CheckResult</span></span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line">  <span class="keyword">public</span> GlideOptions normalPlaceholder() &#123;</span><br><span class="line">    <span class="keyword">if</span> (isAutoCloneEnabled()) &#123;</span><br><span class="line">      <span class="keyword">return</span> clone().normalPlaceholder();</span><br><span class="line">    &#125;</span><br><span class="line">    MyGlideExtension.normalPlaceholder(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/**GlideRequest类中生成对应的方法**/</span>  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@see</span> GlideOptions#normalPlaceholder()</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@CheckResult</span></span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line">  <span class="keyword">public</span> GlideRequest&lt;TranscodeType&gt; normalPlaceholder() &#123;</span><br><span class="line">    <span class="keyword">if</span> (getMutableOptions() instanceof GlideOptions) &#123;</span><br><span class="line">      <span class="keyword">this</span>.requestOptions = ((GlideOptions) getMutableOptions()).normalPlaceholder();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.requestOptions = new GlideOptions().apply(<span class="keyword">this</span>.requestOptions).normalPlaceholder();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>如上代码所示，我们可以通过@GlideExtension注解设置自己功能扩展类，使用@GlideOption注解标注对赢扩展功能静态方法，重构项目后Glide注解处理器则会自动在GlideOptions对象和GlideRequest对象中生成相应的方法能够被我们调用</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用我们刚刚设置的扩展功能方法</span></span><br><span class="line"><span class="selector-tag">GlideApp</span><span class="selector-class">.with</span>(this)<span class="selector-class">.load</span>(IMAGE_URL)</span><br><span class="line">                <span class="selector-class">.normalPlaceholder</span>()</span><br><span class="line">                <span class="selector-class">.into</span>(mImageView);</span><br></pre></td></tr></table></figure></li></ul><h4 id="GlideType"><a href="#GlideType" class="headerlink" title="GlideType"></a>GlideType</h4><ul><li><p>GlideType注解是用于扩展RequestManager的，同理扩展的方法第一个参数必须是RequestManager，并设置类型为加载资源类型，该注解主要作用就是扩展Glide支持加载资源的类型，以下举出官方文档支持gif的一个例子，还是在我们刚刚扩展功能类中。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GlideExtension</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGlideExtension</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> RequestOptions DECODE_TYPE_GIF = decodeTypeOf(GifDrawable.<span class="keyword">class</span>).lock();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GlideType</span>(GifDrawable.<span class="keyword">class</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> asMyGif(RequestBuilder&lt;GifDrawable&gt; requestBuilder) &#123;</span><br><span class="line">        requestBuilder</span><br><span class="line">                .transition(<span class="keyword">new</span> DrawableTransitionOptions())</span><br><span class="line">                .apply(DECODE_TYPE_GIF);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**GlideRequests类中生成的asMyGif方法**/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@see</span> MyGlideExtension#asMyGif(RequestBuilder)</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line">  <span class="meta">@CheckResult</span></span><br><span class="line">  <span class="keyword">public</span> GlideRequest&lt;GifDrawable&gt; asMyGif() &#123;</span><br><span class="line">    GlideRequest&lt;GifDrawable&gt; requestBuilder = <span class="keyword">this</span>.<span class="keyword">as</span>(GifDrawable.<span class="keyword">class</span>);</span><br><span class="line">    MyGlideExtension.asMyGif(requestBuilder);</span><br><span class="line">    <span class="keyword">return</span> requestBuilder;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>同理在我们加载Gif资源的时候可以直接使用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">GlideApp</span><span class="selector-class">.with</span>(<span class="selector-tag">this</span>)<span class="selector-class">.asMyGif</span>()<span class="selector-class">.load</span>(<span class="selector-tag">IMAGE_URL</span>)</span><br><span class="line">               <span class="selector-class">.into</span>(<span class="selector-tag">mImageView</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id="源码阅读方法思路"><a href="#源码阅读方法思路" class="headerlink" title="源码阅读方法思路"></a>源码阅读方法思路</h2><ul><li>看了这么多源码，其实我想说说框架源码阅读的方法思路：<ul><li>1.首先自己能把框架大体的流程走一遍，然后根据自己刚刚的思路把文章写出来，在写文章的同时也能发现自己刚刚的思路是否有问题，慢慢纠正</li><li>2.文章写完，把整体流程图画出来，画图的过程一个是复习思路，还可以让自己对源码逻辑更加清晰</li><li>3.阅读框架源码时看到英文注释可以先理解其含义，在你看源码没头绪的时候往往思路就在注释中，如果对源码中一个类很迷惑，可以直接看该类的头部注释往往注明了该类的作用。</li></ul></li><li><h2 id="最后说点"><a href="#最后说点" class="headerlink" title="最后说点"></a>最后说点</h2></li><li><p>到此，真的很想大叫一声宣泄一下，Glide源码就像一座山，一座高峰，你必须沉住气，慢慢的解读，要不然稍不留神就会掉入代码的海洋，迷失方向。回头看看，你不得不感叹正式由于Glide源码中成千上万行的代码，才造就了这样一个强大的框架。最后，也非常感谢您阅读我的文章，文章中如果有错误，请大家给我提出来，大家一起学习进步，如果觉得我的文章给予你帮助，也请给我一个喜欢和关注，同时也欢迎访问我的<a href="https://www.maoqitian.com"><strong>个人博客</strong></a>。</p></li><li><p>参考链接</p><ul><li><a href="http://bumptech.github.io/glide/" target="_blank" rel="noopener">Gldie文档</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/bumptech/glide/master/static/glide_logo.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;上一篇文章&lt;a href=&quot;https://www.maoqitian.com/2019/02/19/%E4%BB%8E%E6%BA%90%E7%A0%81%E8%A7%92%E5%BA%A6%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3glide%EF%BC%88%E4%B8%8A%EF%BC%89/&quot;&gt;从源码角度深入理解Glide（上）&lt;/a&gt;中，我们已经把Glide加载图片的基本流程走了一遍，想必你已经对Glide的加载原理有了新的认识并且见识到了Glide源码的复杂逻辑，在我们感叹Glide源码复杂的同时我们也忽略了Glide加载图片过程的其它细节，特别是缓存方面，我们在上一篇文章中对于缓存的处理都是跳过的，这一篇文章我们就从Glide的缓存开始再次对Glide进行深入理解。&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android热门框架解析" scheme="https://www.maoqitian.com/categories/Android%E7%83%AD%E9%97%A8%E6%A1%86%E6%9E%B6%E8%A7%A3%E6%9E%90/"/>
    
    
      <category term="Android" scheme="https://www.maoqitian.com/tags/Android/"/>
    
      <category term="源码分析" scheme="https://www.maoqitian.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="Glide" scheme="https://www.maoqitian.com/tags/Glide/"/>
    
      <category term="图片加载" scheme="https://www.maoqitian.com/tags/%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD/"/>
    
      <category term="LRU" scheme="https://www.maoqitian.com/tags/LRU/"/>
    
  </entry>
  
  <entry>
    <title>从源码角度深入理解Glide（上）</title>
    <link href="https://www.maoqitian.com/2019/02/19/%E4%BB%8E%E6%BA%90%E7%A0%81%E8%A7%92%E5%BA%A6%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Glide%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>https://www.maoqitian.com/2019/02/19/从源码角度深入理解Glide（上）/</id>
    <published>2019-02-19T13:26:23.000Z</published>
    <updated>2020-10-15T14:26:43.688Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/bumptech/glide/master/static/glide_logo.png" alt="image"></p><blockquote><p>谈到Glide，从英文字面意思有滑行、滑动的意思；而Android从开发的角度我们知道它是一款图片加载框架，这里引用官方文档的一句话“Glide是一个快速高效的Android图片加载库，注重于平滑的滚动”，从官方文档介绍我们了解到用Glide框架来加载图片是快速并且高效的，接下来就来通过简单使用Glide和源码理解两个方面看看Glide是否是快速和高效（文中代码基于Glide 4.8版本）。<br><a id="more"></a></p></blockquote><h2 id="Glide简单使用"><a href="#Glide简单使用" class="headerlink" title="Glide简单使用"></a>Glide简单使用</h2><ul><li><p>1.使用前需要添加依赖</p>  <figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">implementation</span> <span class="string">'com.github.bumptech.glide:glide:4.8.0'</span></span><br><span class="line"><span class="comment">//使用Generated API需要引入 </span></span><br><span class="line">annotationProcessor <span class="string">'com.github.bumptech.glide:compiler:4.8.0'</span></span><br></pre></td></tr></table></figure></li><li><p>2.简单加载网络图片到ImageView，可以看到简单一句代码就能将网络图片加载到ImageView，也可以使用Generated API方式</p>  <figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接使用</span></span><br><span class="line"><span class="type">Glide</span>.<span class="keyword">with</span>(<span class="type">Context</span>).load(<span class="type">IMAGE_URL</span>).into(mImageView)</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用Generated API， 作用范围Application 模块内使用</span></span><br><span class="line"><span class="comment">//创建MyAppGlideModule类加上@GlideModule注解，make project 就能使用 GlideApp</span></span><br><span class="line"><span class="meta">@GlideModule</span></span><br><span class="line">public <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAppGlideModule</span> <span class="keyword">extends</span> <span class="title">AppGlideModule</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Generated API加载图片</span></span><br><span class="line"><span class="type">GlideApp</span>.<span class="keyword">with</span>(<span class="type">Context</span>).load(<span class="type">IMAGE_URL</span>).into(mImageView);</span><br></pre></td></tr></table></figure></li><li><p>3.当加载网络图片的时候，网络请求是耗时操作，所以图片不可能马上就加载出来，网络请求这段时间ImageView是空白的，所以我们可以使用一个占位符显示图片来优化用户体验，占位符有三种</p><ul><li>加载占位符（placeholder）</li><li>错误占位符（error）</li><li><p>后备回调符（Fallback）</p><figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加占位图</span></span><br><span class="line">     <span class="type">RequestOptions</span> requestOptions = <span class="function"><span class="keyword">new</span> <span class="title">RequestOptions</span>()</span></span><br><span class="line"><span class="function">         .<span class="title">placeholder</span>(<span class="type">R</span>.drawable.ic_cloud_download_black_24dp)</span></span><br><span class="line"><span class="function">         .<span class="title">error</span>(<span class="type">R</span>.drawable.ic_error_black_24dp)</span></span><br><span class="line"><span class="function">         .<span class="title">diskCacheStrategy</span>(<span class="type">DiskCacheStrategy</span>.<span class="type">NONE</span>);<span class="comment">//不使用缓存</span></span></span><br><span class="line"><span class="function">     <span class="title">Glide</span>.<span class="title">with</span>(<span class="type">Context</span>).<span class="title">load</span>(<span class="type">IMAGE_URL</span>).<span class="title">apply</span>(requestOptions).<span class="title">into</span>(mImageView);</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//Generated API 方式(和Glide3 一样)</span></span></span><br><span class="line"><span class="function"><span class="title">GlideApp</span>.<span class="title">with</span>(<span class="type">Context</span>).<span class="title">load</span>(<span class="type">IMAGE_URL</span>)</span></span><br><span class="line"><span class="function">         .<span class="title">placeholder</span>(<span class="type">R</span>.drawable.ic_cloud_download_black_24dp)</span></span><br><span class="line"><span class="function">         .<span class="title">error</span>(<span class="type">R</span>.drawable.ic_error_black_24dp)</span></span><br><span class="line"><span class="function">         .<span class="title">diskCacheStrategy</span>(<span class="type">DiskCacheStrategy</span>.<span class="type">NONE</span>)</span></span><br><span class="line"><span class="function">         .<span class="title">into</span>(mImageView);</span></span><br><span class="line"><span class="function">         </span></span><br><span class="line"><span class="function"><span class="comment">// 后备回调符(Fallback) Generated API 方式才有，在应用设置用户头像场景中，如果用户不设置，也就是为null的情况，可以使用后备回调符显示默认头像</span></span></span><br><span class="line"><span class="function"><span class="title">private</span> <span class="title">static</span> <span class="title">final</span> <span class="title">String</span> <span class="title">NULL_URL</span>=<span class="title">null</span>;</span></span><br><span class="line"><span class="function"><span class="title">GlideApp</span>.<span class="title">with</span>(<span class="type">Context</span>).<span class="title">load</span>(<span class="type">NULL_URL</span>)</span></span><br><span class="line"><span class="function">         .<span class="title">fallback</span>(<span class="type">R</span>.drawable.ic_account_circle_black_24dp)</span></span><br><span class="line"><span class="function">         .<span class="title">into</span>(mImageView);</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/%E4%BB%8E%E6%BA%90%E7%A0%81%E8%A7%92%E5%BA%A6%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Glide/%E6%98%BE%E7%A4%BA%E5%8D%A0%E4%BD%8D%E5%9B%BE.gif" height="400" width="230"></p></li></ul></li><li><p>4.指定加载图片的大小（override）</p> <figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RequestOptions</span> requestOptions = <span class="function"><span class="keyword">new</span> <span class="title">RequestOptions</span>().<span class="title">override</span>(<span class="number">200</span>,<span class="number">100</span>);</span></span><br><span class="line"><span class="function"><span class="title">Glide</span>.<span class="title">with</span>(<span class="type">Context</span>).<span class="title">load</span>(<span class="type">IMAGE_URL</span>).<span class="title">apply</span>(requestOptions).<span class="title">into</span>(mImageView);</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">//Generated API 方式</span></span></span><br><span class="line"><span class="function"><span class="title">GlideApp</span>.<span class="title">with</span>(<span class="type">Context</span>).<span class="title">load</span>(<span class="type">IMAGE_URL</span>)</span></span><br><span class="line"><span class="function">             .<span class="title">override</span>(<span class="number">200</span>,<span class="number">100</span>)</span></span><br><span class="line"><span class="function">             .<span class="title">into</span>(mImageView);</span></span><br></pre></td></tr></table></figure></li><li><p>5.缩略图 (Thumbnail)</p><ul><li><p>这个其实和占位符（placeholder）有些相似，但是占位符只能加载本地资源，而缩略图可以加载网络资源，thumbnail方法与我们的主动加载并行运行，如果主动加载已经完成，则缩略图不会显示</p><figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//缩略图Options</span></span><br><span class="line"><span class="type">RequestOptions</span> requestOptions = <span class="function"><span class="keyword">new</span> <span class="title">RequestOptions</span>()</span></span><br><span class="line"><span class="function">        .<span class="title">override</span>(<span class="number">200</span>,<span class="number">100</span>)</span></span><br><span class="line"><span class="function">        .<span class="title">diskCacheStrategy</span>(<span class="type">DiskCacheStrategy</span>.<span class="type">NONE</span>);</span></span><br><span class="line"><span class="function"> <span class="title">Glide</span>.<span class="title">with</span>(<span class="type">Context</span>)</span></span><br><span class="line"><span class="function">            .<span class="title">load</span>(<span class="type">IMAGE_URL</span>)</span></span><br><span class="line"><span class="function">            .<span class="title">thumbnail</span>( <span class="type">Glide</span>.with(this)</span></span><br><span class="line"><span class="function">            .<span class="title">load</span>(<span class="type">IMAGE_URL</span>)</span></span><br><span class="line"><span class="function">            .<span class="title">apply</span>(requestOptions))</span></span><br><span class="line"><span class="function">            .<span class="title">into</span>(mImageView);</span></span><br><span class="line"><span class="function"><span class="comment">//Generated API 方式</span></span></span><br><span class="line"><span class="function"> <span class="title">GlideApp</span>.<span class="title">with</span>(<span class="type">Context</span>).</span></span><br><span class="line"><span class="function">            <span class="title">load</span>(<span class="type">IMAGE_URL</span>).</span></span><br><span class="line"><span class="function">            <span class="title">thumbnail</span>( <span class="type">GlideApp</span>.with(this)</span></span><br><span class="line"><span class="function">            .<span class="title">load</span>(<span class="type">IMAGE_URL</span>).<span class="title">override</span>(<span class="number">200</span>,<span class="number">100</span>)</span></span><br><span class="line"><span class="function">        .<span class="title">diskCacheStrategy</span>(<span class="type">DiskCacheStrategy</span>.<span class="type">NONE</span>)).<span class="title">into</span>(mImageView);</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>6.图像变化</p><ul><li><p>Glide中内置了三种图片的变化操作，分别是CenterCrop（图片原图的中心区域进行裁剪显示），FitCenter（图片原始长宽铺满）和CircleCrop（圆形裁剪）</p><figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//显示圆形裁剪到ImageView</span></span><br><span class="line"><span class="type">RequestOptions</span> requestOptions = <span class="function"><span class="keyword">new</span> <span class="title">RequestOptions</span>()</span></span><br><span class="line"><span class="function">            .<span class="title">circleCrop</span>()</span></span><br><span class="line"><span class="function">            .<span class="title">diskCacheStrategy</span>(<span class="type">DiskCacheStrategy</span>.<span class="type">NONE</span>);</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Glide</span>.<span class="title">with</span>(<span class="type">Context</span>)</span></span><br><span class="line"><span class="function">            .<span class="title">load</span>(<span class="type">IMAGE_URL</span>)</span></span><br><span class="line"><span class="function">            .<span class="title">apply</span>(requestOptions)</span></span><br><span class="line"><span class="function">            .<span class="title">into</span>(mImageView);</span></span><br><span class="line"><span class="function">            </span></span><br><span class="line"><span class="function"><span class="comment">//RequestOptions都内置了使用者三种变化的静态方法</span></span></span><br><span class="line"><span class="function"><span class="title">Glide</span>.<span class="title">with</span>(<span class="type">Context</span>)</span></span><br><span class="line"><span class="function">            .<span class="title">load</span>(<span class="type">IMAGE_URL</span>)</span></span><br><span class="line"><span class="function">            .<span class="title">apply</span>(<span class="type">RequestOptions</span>.circleCropTransform())</span></span><br><span class="line"><span class="function">            .<span class="title">into</span>(mImageView);</span></span><br><span class="line"><span class="function">            </span></span><br><span class="line"><span class="function"><span class="comment">//Generated API 方式</span></span></span><br><span class="line"><span class="function"><span class="title">GlideApp</span>.<span class="title">with</span>(<span class="type">Context</span>).<span class="title">load</span>(<span class="type">IMAGE_URL</span>)</span></span><br><span class="line"><span class="function">            .<span class="title">circleCrop</span>()</span></span><br><span class="line"><span class="function">            .<span class="title">diskCacheStrategy</span>(<span class="type">DiskCacheStrategy</span>.<span class="type">NONE</span>)</span></span><br><span class="line"><span class="function">            .<span class="title">into</span>(mImageView);</span></span><br></pre></td></tr></table></figure></li><li><p>如果想要更酷炫的变化，可以使用第三方框架<a href="https://github.com/wasabeef/glide-transformations" target="_blank" rel="noopener">glide-transformations</a>来帮助我们实现，并且变化是可以组合的</p><figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第三方框架glide-transformations引入</span></span><br><span class="line">implementation <span class="string">'jp.wasabeef:glide-transformations:4.0.0'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用glide-transformations框架 变换图片颜色和加入模糊效果</span></span><br><span class="line"> <span class="type">RequestOptions</span> requestOptions=<span class="function"><span class="keyword">new</span> <span class="title">RequestOptions</span>()</span></span><br><span class="line"><span class="function">           .<span class="title">placeholder</span>(<span class="type">R</span>.drawable.ic_cloud_download_black_24dp)</span></span><br><span class="line"><span class="function">           .<span class="title">transforms</span>(new <span class="type">ColorFilterTransformation</span>(<span class="type">Color</span>.argb(<span class="number">80</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>)),<span class="title">new</span> <span class="title">BlurTransformation</span>(<span class="number">30</span>))</span></span><br><span class="line"><span class="function">           .<span class="title">diskCacheStrategy</span>(<span class="type">DiskCacheStrategy</span>.<span class="type">NONE</span>);</span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function">  <span class="title">Glide</span>.<span class="title">with</span>(<span class="type">Context</span>).<span class="title">load</span>(<span class="type">IMAGE_URL</span>).</span></span><br><span class="line"><span class="function">           <span class="title">apply</span>(requestOptions).</span></span><br><span class="line"><span class="function">           <span class="title">into</span>(mImageView);</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  <span class="comment">//Generated API 方式</span></span></span><br><span class="line"><span class="function">  <span class="title">GlideApp</span>.<span class="title">with</span>(<span class="type">Context</span>).<span class="title">load</span>(<span class="type">IMAGE_URL</span>)</span></span><br><span class="line"><span class="function">           .<span class="title">transforms</span>(new <span class="type">ColorFilterTransformation</span>(<span class="type">Color</span>.argb(<span class="number">80</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>)),<span class="title">new</span> <span class="title">BlurTransformation</span>(<span class="number">30</span>))</span></span><br><span class="line"><span class="function">           .<span class="title">placeholder</span>(<span class="type">R</span>.drawable.ic_cloud_download_black_24dp)</span></span><br><span class="line"><span class="function">           .<span class="title">diskCacheStrategy</span>(<span class="type">DiskCacheStrategy</span>.<span class="type">NONE</span>)</span></span><br><span class="line"><span class="function">           .<span class="title">into</span>(mImageView);</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/%E4%BB%8E%E6%BA%90%E7%A0%81%E8%A7%92%E5%BA%A6%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Glide/glide_transformation.gif" alt="glide_transformation"></p></li><li>更多效果可以查看<a href="https://github.com/wasabeef/glide-transformations/blob/master/example/src/main/java/jp/wasabeef/example/glide/MainAdapter.kt" target="_blank" rel="noopener">官方例子</a> </li></ul></li><li><p>7.加载目标（Target）</p><ul><li><p>Target是介于请求和请求者之间的中介者的角色，into方法的返回值就是target对象，之前我们一直使用的 into(ImageView) ，它其实是一个辅助方法，它接受一个 ImageView 参数并为其请求的资源类型包装了一个合适的 ImageViewTarget</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载</span></span><br><span class="line">Target&lt;Drawable&gt; target = </span><br><span class="line"> Glide.<span class="keyword">with</span>(Context)</span><br><span class="line">.load(url)</span><br><span class="line">.<span class="keyword">into</span>(<span class="literal">new</span> Target&lt;Drawable&gt;() &#123;</span><br><span class="line">  <span class="params">...</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//清除加载</span></span><br><span class="line">Glide.<span class="keyword">with</span>(Context).clear(target);</span><br></pre></td></tr></table></figure><ul><li>当我们使用Notification显示应用通知，如果想要自定义通知的界面，我们需要用到RemoteView，如果要给RemoteView设置ImageView，根据提供的setImageViewBitmap方法，如果通知界面需要加载网络图片，则需要将网络图片转换成bitmap，一般我们可以根据获取图片链接的流来转换成bitmap，或者使用本文的主题使用Glide框架，这些都是耗时操作，感觉操作起来很麻烦，而Glide框架很贴心的给我提供了NotificationTarget(继承SimpleTarget)，相对于我们加载目标变成Notification</li></ul><figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新建 NotificationTarget 对象参数说明，与Glide3不同，Glide4的asBitmap()方法必须在load方法前面</span></span><br><span class="line"><span class="comment"> * @param context 上下文对象          </span></span><br><span class="line"><span class="comment"> * @param viewId 需要加载ImageView的view的 id        </span></span><br><span class="line"><span class="comment"> * @param remoteViews RemoteView对象   </span></span><br><span class="line"><span class="comment"> * @param notification   Notification对象</span></span><br><span class="line"><span class="comment"> * @param notificationId Notification Id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">String</span> iamgeUrl = <span class="string">"http://p1.music.126.net/fX0HfPMAHJ2L_UeJWsL7ig==/18853325881511874.jpg?param=130y130"</span>;     </span><br><span class="line"> </span><br><span class="line"><span class="type">NotificationTarget</span> notificationTarget = <span class="function"><span class="keyword">new</span> <span class="title">NotificationTarget</span>(mContext,<span class="type">R</span>.id.notification_Image_play,mRemoteViews,mNotification,notifyId);</span></span><br><span class="line"><span class="function"><span class="title">Glide</span>.<span class="title">with</span>(mContext.getApplicationContext())</span></span><br><span class="line"><span class="function">             .<span class="title">asBitmap</span>()</span></span><br><span class="line"><span class="function">             .<span class="title">load</span>(iamgeUrl)</span></span><br><span class="line"><span class="function">             .<span class="title">into</span>( notificationTarget );</span></span><br><span class="line"><span class="function">             </span></span><br><span class="line"><span class="function"><span class="comment">//Generated API 方式            </span></span></span><br><span class="line"><span class="function"><span class="title">GlideApp</span>.<span class="title">with</span>(mContext.getApplicationContext())</span></span><br><span class="line"><span class="function">             .<span class="title">asBitmap</span>()</span></span><br><span class="line"><span class="function">             .<span class="title">load</span>(iamgeUrl)</span></span><br><span class="line"><span class="function">             .<span class="title">into</span>( notificationTarget );</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/%E4%BB%8E%E6%BA%90%E7%A0%81%E8%A7%92%E5%BA%A6%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Glide/glide_notification.gif" alt="glide_notification"></p></li></ul></li><li><p>8.回调监听</p><ul><li>使用Glide加载图片，虽然在加载中或者加失败都有占位符方法处理，但是我们还是希望可以知道图片到底是加载成功还是失败，Glide也给我们提供了监听方法来知道图片到底是加载成功还是失败，结合listener和into方法来使用回调</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Glide</span><span class="selector-class">.with</span>(this)<span class="selector-class">.load</span>(IMAGE_URL).</span><br><span class="line">              <span class="selector-tag">listener</span>(new RequestListener&lt;Drawable&gt;() &#123;</span><br><span class="line">                  <span class="variable">@Override</span></span><br><span class="line">                  public boolean onLoadFailed(<span class="variable">@Nullable</span> GlideException e, Object model, Target&lt;Drawable&gt; target, boolean isFirstResource) &#123;</span><br><span class="line">                 <span class="selector-tag">Toast</span><span class="selector-class">.makeText</span>(getApplicationContext(),<span class="string">"图片加载失败"</span>,Toast.LENGTH_SHORT)<span class="selector-class">.show</span>();</span><br><span class="line">                      <span class="selector-tag">return</span> <span class="selector-tag">false</span>;</span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line">                  @<span class="selector-tag">Override</span></span><br><span class="line">                  <span class="selector-tag">public</span> <span class="selector-tag">boolean</span> <span class="selector-tag">onResourceReady</span>(Drawable resource, Object model, Target&lt;Drawable&gt; target, DataSource dataSource, boolean isFirstResource) &#123;</span><br><span class="line">                 <span class="selector-tag">Toast</span><span class="selector-class">.makeText</span>(getApplicationContext(),<span class="string">"图片加载成功"</span>,Toast.LENGTH_SHORT)<span class="selector-class">.show</span>();</span><br><span class="line">                      <span class="selector-tag">return</span> <span class="selector-tag">false</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;)<span class="selector-class">.into</span>(mImageView);*/</span><br><span class="line">      <span class="comment">//Generated API 方式</span></span><br><span class="line">      <span class="selector-tag">GlideApp</span><span class="selector-class">.with</span>(this)<span class="selector-class">.load</span>(IMAGE_URL)</span><br><span class="line">              <span class="selector-class">.listener</span>(new RequestListener&lt;Drawable&gt;() &#123;</span><br><span class="line">                  <span class="variable">@Override</span></span><br><span class="line">                  public boolean onLoadFailed(<span class="variable">@Nullable</span> GlideException e, Object model, Target&lt;Drawable&gt; target, boolean isFirstResource) &#123;</span><br><span class="line">                      <span class="selector-tag">Toast</span><span class="selector-class">.makeText</span>(getApplicationContext(),<span class="string">"图片加载失败"</span>,Toast.LENGTH_SHORT)<span class="selector-class">.show</span>();</span><br><span class="line">                      <span class="selector-tag">return</span> <span class="selector-tag">false</span>;</span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line">                  @<span class="selector-tag">Override</span></span><br><span class="line">                  <span class="selector-tag">public</span> <span class="selector-tag">boolean</span> <span class="selector-tag">onResourceReady</span>(Drawable resource, Object model, Target&lt;Drawable&gt; target, DataSource dataSource, boolean isFirstResource) &#123;</span><br><span class="line">                      <span class="selector-tag">Toast</span><span class="selector-class">.makeText</span>(getApplicationContext(),<span class="string">"图片加载成功"</span>,Toast.LENGTH_SHORT)<span class="selector-class">.show</span>();</span><br><span class="line">                      <span class="selector-tag">return</span> <span class="selector-tag">false</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;)<span class="selector-class">.into</span>(mImageView);</span><br></pre></td></tr></table></figure><ul><li>可以看到监听实现的方法都有布尔类型的返回值，返回true，则代表处理了该回调事件，false则不进行处理，如果onResourceReady方法返回true，则into方法就不会执行，也就是图片不会加载到ImageView，同理onLoadFailed方法返回true，则error方法不会执行。</li></ul></li></ul><blockquote><p>Glide还有其他的一些使用方法，这里就不继续展开了，有兴趣的可以自行继续研究。</p></blockquote><h2 id="Glide源码解析"><a href="#Glide源码解析" class="headerlink" title="Glide源码解析"></a>Glide源码解析</h2><h3 id="Glide加载图片到ImageView基本流程图"><a href="#Glide加载图片到ImageView基本流程图" class="headerlink" title="Glide加载图片到ImageView基本流程图"></a>Glide加载图片到ImageView基本流程图</h3><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/%E4%BB%8E%E6%BA%90%E7%A0%81%E8%A7%92%E5%BA%A6%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Glide/Glide%E5%9F%BA%E6%9C%AC%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg" alt="Glide加载基本流程图"></p><h3 id="Glide加载图片到ImageView源码分析"><a href="#Glide加载图片到ImageView源码分析" class="headerlink" title="Glide加载图片到ImageView源码分析"></a>Glide加载图片到ImageView源码分析</h3><ul><li>在上一节简单的列出了一些Glide的使用方法，能用不代表你已经懂了，接下来就通过理解源码的方式来对Glide是如何工作的做深一层次理解，首先从最简单使用开始</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Glide</span><span class="selector-class">.with</span>(<span class="selector-tag">Context</span>)<span class="selector-class">.load</span>(<span class="selector-tag">IMAGE_URL</span>)<span class="selector-class">.into</span>(<span class="selector-tag">mImageView</span>);</span><br></pre></td></tr></table></figure><h4 id="with方法"><a href="#with方法" class="headerlink" title="with方法"></a>with方法</h4><ul><li>来吧，开始是Glide的with()方法，直接上源码</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Glide类的with()方法*/</span></span><br><span class="line"><span class="variable">@NonNull</span></span><br><span class="line">  public static RequestManager with(<span class="variable">@NonNull</span> Context context) &#123;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">getRetriever</span>(context)<span class="selector-class">.get</span>(context);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @<span class="selector-tag">NonNull</span></span><br><span class="line">  <span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">RequestManager</span> <span class="selector-tag">with</span>(<span class="variable">@NonNull</span> Activity activity) &#123;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">getRetriever</span>(activity)<span class="selector-class">.get</span>(activity);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @<span class="selector-tag">NonNull</span></span><br><span class="line">  <span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">RequestManager</span> <span class="selector-tag">with</span>(<span class="variable">@NonNull</span> FragmentActivity activity) &#123;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">getRetriever</span>(activity)<span class="selector-class">.get</span>(activity);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @<span class="selector-tag">NonNull</span></span><br><span class="line">  <span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">RequestManager</span> <span class="selector-tag">with</span>(<span class="variable">@NonNull</span> Fragment fragment) &#123;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">getRetriever</span>(fragment.getActivity())<span class="selector-class">.get</span>(fragment);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @<span class="selector-tag">SuppressWarnings</span>(<span class="string">"deprecation"</span>)</span><br><span class="line">  @<span class="selector-tag">Deprecated</span></span><br><span class="line">  @<span class="selector-tag">NonNull</span></span><br><span class="line">  <span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">RequestManager</span> <span class="selector-tag">with</span>(<span class="variable">@NonNull</span> android.app.Fragment fragment) &#123;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">getRetriever</span>(fragment.getActivity())<span class="selector-class">.get</span>(fragment);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @<span class="selector-tag">NonNull</span></span><br><span class="line">  <span class="selector-tag">public</span> <span class="selector-tag">static</span> <span class="selector-tag">RequestManager</span> <span class="selector-tag">with</span>(<span class="variable">@NonNull</span> View view) &#123;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">getRetriever</span>(view.getContext())<span class="selector-class">.get</span>(view);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>通过源码，可以看到with有不同参数类型的重载方法，每个方法首先都是调用 getRetriever()方法</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Glide类的getRetriever()方法*/</span></span><br><span class="line"><span class="selector-tag">private</span> <span class="selector-tag">static</span> <span class="selector-tag">RequestManagerRetriever</span> <span class="selector-tag">getRetriever</span>(<span class="variable">@Nullable</span> Context context) &#123;</span><br><span class="line">   <span class="comment">// Context could be null for other reasons (ie the user passes in null), but in practice it will</span></span><br><span class="line">   <span class="comment">// only occur due to errors with the Fragment lifecycle.</span></span><br><span class="line">   <span class="selector-tag">Preconditions</span><span class="selector-class">.checkNotNull</span>(</span><br><span class="line">       context,</span><br><span class="line">       <span class="string">"You cannot start a load on a not yet attached View or a Fragment where getActivity() "</span></span><br><span class="line">           + <span class="string">"returns null (which usually occurs when getActivity() is called before the Fragment "</span></span><br><span class="line">           + <span class="string">"is attached or after the Fragment is destroyed)."</span>);</span><br><span class="line">   <span class="selector-tag">return</span> <span class="selector-tag">Glide</span><span class="selector-class">.get</span>(context)<span class="selector-class">.getRequestManagerRetriever</span>();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li><p>Glide的get方法中通过new GlideBuilder()获取了Glide对象，并通过Glide的getRequestManagerRetriever()的方法最终得到RequestManagerRetriever对象，接下来我们看看RequestManagerRetriever对象的get方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** RequestManagerRetriever类的get()方法*/</span></span><br><span class="line"> <span class="meta">@NonNull</span></span><br><span class="line">  <span class="keyword">public</span> RequestManager <span class="keyword">get</span>(<span class="meta">@NonNull</span> Context context) &#123;</span><br><span class="line">    <span class="keyword">if</span> (context == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> new IllegalArgumentException(<span class="string">"You cannot start a load on a null Context"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Util.isOnMainThread() &amp;&amp; !(context instanceof Application)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (context instanceof FragmentActivity) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">get</span>((FragmentActivity) context);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (context instanceof Activity) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">get</span>((Activity) context);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (context instanceof ContextWrapper) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">get</span>(((ContextWrapper) context).getBaseContext());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> getApplicationManager(context);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line">  <span class="keyword">public</span> RequestManager <span class="keyword">get</span>(<span class="meta">@NonNull</span> FragmentActivity activity) &#123;</span><br><span class="line">    <span class="keyword">if</span> (Util.isOnBackgroundThread()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">get</span>(activity.getApplicationContext());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      assertNotDestroyed(activity);</span><br><span class="line">      FragmentManager fm = activity.getSupportFragmentManager();</span><br><span class="line">      <span class="keyword">return</span> supportFragmentGet(</span><br><span class="line">          activity, fm, <span class="comment">/*parentHint=*/</span> <span class="literal">null</span>, isActivityVisible(activity));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line">  <span class="keyword">public</span> RequestManager <span class="keyword">get</span>(<span class="meta">@NonNull</span> Fragment fragment) &#123;</span><br><span class="line">    Preconditions.checkNotNull(fragment.getActivity(),</span><br><span class="line">          <span class="string">"You cannot start a load on a fragment before it is attached or after it is destroyed"</span>);</span><br><span class="line">    <span class="keyword">if</span> (Util.isOnBackgroundThread()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">get</span>(fragment.getActivity().getApplicationContext());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      FragmentManager fm = fragment.getChildFragmentManager();</span><br><span class="line">      <span class="keyword">return</span> supportFragmentGet(fragment.getActivity(), fm, fragment, fragment.isVisible());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@SuppressWarnings(<span class="meta-string">"deprecation"</span>)</span></span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line">  <span class="keyword">public</span> RequestManager <span class="keyword">get</span>(<span class="meta">@NonNull</span> Activity activity) &#123;</span><br><span class="line">    <span class="keyword">if</span> (Util.isOnBackgroundThread()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">get</span>(activity.getApplicationContext());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      assertNotDestroyed(activity);</span><br><span class="line">      android.app.FragmentManager fm = activity.getFragmentManager();</span><br><span class="line">      <span class="keyword">return</span> fragmentGet(</span><br><span class="line">          activity, fm, <span class="comment">/*parentHint=*/</span> <span class="literal">null</span>, isActivityVisible(activity));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@SuppressWarnings(<span class="meta-string">"deprecation"</span>)</span></span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line">  <span class="keyword">public</span> RequestManager <span class="keyword">get</span>(<span class="meta">@NonNull</span> View view) &#123;</span><br><span class="line">    <span class="keyword">if</span> (Util.isOnBackgroundThread()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">get</span>(view.getContext().getApplicationContext());</span><br><span class="line">    &#125;</span><br><span class="line">    Preconditions.checkNotNull(view);</span><br><span class="line">    Preconditions.checkNotNull(view.getContext(),</span><br><span class="line">        <span class="string">"Unable to obtain a request manager for a view without a Context"</span>);</span><br><span class="line">    Activity activity = findActivity(view.getContext());</span><br><span class="line">    <span class="comment">// The view might be somewhere else, like a service.</span></span><br><span class="line">    <span class="keyword">if</span> (activity == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">get</span>(view.getContext().getApplicationContext());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Support Fragments.</span></span><br><span class="line">    <span class="comment">// Although the user might have non-support Fragments attached to FragmentActivity, searching</span></span><br><span class="line">    <span class="comment">// for non-support Fragments is so expensive pre O and that should be rare enough that we</span></span><br><span class="line">    <span class="comment">// prefer to just fall back to the Activity directly.</span></span><br><span class="line">    <span class="keyword">if</span> (activity instanceof FragmentActivity) &#123;</span><br><span class="line">      Fragment fragment = findSupportFragment(view, (FragmentActivity) activity);</span><br><span class="line">      <span class="keyword">return</span> fragment != <span class="literal">null</span> ? <span class="keyword">get</span>(fragment) : <span class="keyword">get</span>(activity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Standard Fragments.</span></span><br><span class="line">    android.app.Fragment fragment = findFragment(view, activity);</span><br><span class="line">    <span class="keyword">if</span> (fragment == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">get</span>(activity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">get</span>(fragment);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>同样，RequestManagerRetriever对象的get方法也有不同类型参数的重载，分别针对Application、Activity、Fragmenet、view做了不同的处理，先看Context参数的get方法，<strong>在该方法中它把Context的参数分成了两个类型，一个Application类型的Context，另一个是非Application类型的Context</strong>。如果是Application类型的Context，则创建的Glide的生命周期则跟随ApplicationContext的生命周期，也就是下面的getApplicationManager所做的事情。</p></li></ul><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** RequestManagerRetriever类的getApplicationManager()方法*/</span></span><br><span class="line">  <span class="keyword">@NonNull</span></span><br><span class="line">  <span class="keyword">private</span> RequestManager getApplicationManager(<span class="keyword">@NonNull</span> Context context) &#123;</span><br><span class="line">    <span class="comment">// Either an application context or we're on a background thread.</span></span><br><span class="line">    <span class="keyword">if</span> (applicationManager == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (applicationManager == <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="comment">// Normally pause/resume is taken care of by the fragment we add to the fragment or</span></span><br><span class="line">          <span class="comment">// activity. However, in this case since the manager attached to the application will not</span></span><br><span class="line">          <span class="comment">// receive lifecycle events, we must force the manager to start resumed using</span></span><br><span class="line">          <span class="comment">// ApplicationLifecycle.</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">// TODO(b/27524013): Factor out this Glide.get() call.</span></span><br><span class="line">          Glide glide = Glide.get(context.getApplicationContext());</span><br><span class="line">          applicationManager =</span><br><span class="line">              factory.build(</span><br><span class="line">                  glide,</span><br><span class="line">                  <span class="keyword">new</span> ApplicationLifecycle(),</span><br><span class="line">                  <span class="keyword">new</span> EmptyRequestManagerTreeNode(),</span><br><span class="line">                  context.getApplicationContext());</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> applicationManager;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>接着，如果是非Application类型的，Activity、Fragmenet属于非Application；如果是Activity类型的Context，当前不再主线程，则继续跟随Application生命周期，否则给当前Activity添加一个隐藏的Fragment，然后Glide生命周期跟随这个隐藏的Fragment，分析到这里，我们再看Fragmenet类型的Context，或者是View类型，也是添加了一个隐藏的Fragment。这是为什么呢？首先Fragment的生命周期是和Activity同步的，Activity销毁Fragment也会销毁，其次，这也方便Glide知道自己什么时候需要停止加载，如果我们打开一个Activity并关闭它，如果Glide生命周期跟随Application，则Activity虽然已经销毁，但是应用还没退出，则Glide还在继续加载图片，这显然是不合理的，而Glide很巧妙的用一个隐藏Fragment来解决生命周期的监听。</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** RequestManagerRetriever类的fragmentGet()方法*/</span></span><br><span class="line">  <span class="meta">@SuppressWarnings(&#123;<span class="meta-string">"deprecation"</span>, <span class="meta-string">"DeprecatedIsStillUsed"</span>&#125;)</span></span><br><span class="line">  <span class="meta">@Deprecated</span></span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line">  <span class="keyword">private</span> RequestManager fragmentGet(<span class="meta">@NonNull</span> Context context,</span><br><span class="line">      <span class="meta">@NonNull</span> android.app.FragmentManager fm,</span><br><span class="line">      <span class="meta">@Nullable</span> android.app.Fragment parentHint,</span><br><span class="line">      boolean isParentVisible) &#123;</span><br><span class="line">    RequestManagerFragment current = getRequestManagerFragment(fm, parentHint, isParentVisible);</span><br><span class="line">    RequestManager requestManager = current.getRequestManager();</span><br><span class="line">    <span class="keyword">if</span> (requestManager == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// TODO(b/27524013): Factor out this Glide.get() call.</span></span><br><span class="line">      Glide glide = Glide.<span class="keyword">get</span>(context);</span><br><span class="line">      requestManager =</span><br><span class="line">          factory.build(</span><br><span class="line">              glide, current.getGlideLifecycle(), current.getRequestManagerTreeNode(), context);</span><br><span class="line">      current.setRequestManager(requestManager);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> requestManager;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/** RequestManagerRetriever类的getRequestManagerFragment()方法*/</span></span><br><span class="line">  <span class="meta">@SuppressWarnings(<span class="meta-string">"deprecation"</span>)</span></span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line">  <span class="keyword">private</span> RequestManagerFragment getRequestManagerFragment(</span><br><span class="line">      <span class="meta">@NonNull</span> <span class="keyword">final</span> android.app.FragmentManager fm,</span><br><span class="line">      <span class="meta">@Nullable</span> android.app.Fragment parentHint,</span><br><span class="line">      boolean isParentVisible) &#123;</span><br><span class="line">    RequestManagerFragment current = (RequestManagerFragment) fm.findFragmentByTag(FRAGMENT_TAG);</span><br><span class="line">    <span class="keyword">if</span> (current == <span class="literal">null</span>) &#123;</span><br><span class="line">      current = pendingRequestManagerFragments.<span class="keyword">get</span>(fm);</span><br><span class="line">      <span class="keyword">if</span> (current == <span class="literal">null</span>) &#123;</span><br><span class="line">        current = new RequestManagerFragment();</span><br><span class="line">        current.setParentFragmentHint(parentHint);</span><br><span class="line">        <span class="keyword">if</span> (isParentVisible) &#123;</span><br><span class="line">          current.getGlideLifecycle().onStart();</span><br><span class="line">        &#125;</span><br><span class="line">        pendingRequestManagerFragments.put(fm, current);</span><br><span class="line">        fm.beginTransaction().add(current, FRAGMENT_TAG).commitAllowingStateLoss();</span><br><span class="line">        handler.obtainMessage(ID_REMOVE_FRAGMENT_MANAGER, fm).sendToTarget();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> current;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>经过对into方法的分析，最终获取的是跟随对应Context对象生命周期的<strong>RequestManager对象</strong>。</li></ul><h4 id="load方法"><a href="#load方法" class="headerlink" title="load方法"></a>load方法</h4><ul><li>经过上一小节的分析，Glide.with方法最终获取的是RequestManager对象，所以继续看RequestManager对象里面load方法，</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** RequestManager 类的as()方法*/</span></span><br><span class="line"> <span class="meta">@NonNull</span></span><br><span class="line">  <span class="meta">@CheckResult</span></span><br><span class="line">  <span class="keyword">public</span> &lt;ResourceType&gt; RequestBuilder&lt;ResourceType&gt; <span class="keyword">as</span>(</span><br><span class="line">      <span class="meta">@NonNull</span> Class&lt;ResourceType&gt; resourceClass) &#123;</span><br><span class="line">    <span class="keyword">return</span> new RequestBuilder&lt;&gt;(glide, <span class="keyword">this</span>, resourceClass, context);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/** RequestManager 类的as()方法*/</span></span><br><span class="line"> <span class="meta">@NonNull</span></span><br><span class="line">  <span class="meta">@CheckResult</span></span><br><span class="line">  <span class="keyword">public</span> RequestBuilder&lt;Drawable&gt; asDrawable() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">as</span>(Drawable.<span class="keyword">class</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/** RequestManager 类的部分load()方法*/</span></span><br><span class="line"> <span class="meta">@NonNull</span></span><br><span class="line">  <span class="meta">@CheckResult</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> RequestBuilder&lt;Drawable&gt; load(<span class="meta">@Nullable</span> Bitmap bitmap) &#123;</span><br><span class="line">    <span class="keyword">return</span> asDrawable().load(bitmap);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line">  <span class="meta">@CheckResult</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> RequestBuilder&lt;Drawable&gt; load(<span class="meta">@Nullable</span> Drawable drawable) &#123;</span><br><span class="line">    <span class="keyword">return</span> asDrawable().load(drawable);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line">  <span class="meta">@CheckResult</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> RequestBuilder&lt;Drawable&gt; load(<span class="meta">@Nullable</span> String string) &#123;</span><br><span class="line">    <span class="keyword">return</span> asDrawable().load(string);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//省略其他参数类型 load() 方法</span></span><br><span class="line"> .......</span><br></pre></td></tr></table></figure><ul><li>通过以上load方法，可以发现虽然RequestManager对象的load方法有多个类型参数的重载，但是不管load方法传递什么类型参数，该方法都是调用RequestBuilder对象的load方法</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** RequestBuilder 类的load()方法*/</span></span><br><span class="line"> <span class="meta">@NonNull</span></span><br><span class="line">  <span class="meta">@CheckResult</span></span><br><span class="line">  <span class="meta">@SuppressWarnings(<span class="meta-string">"unchecked"</span>)</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> RequestBuilder&lt;TranscodeType&gt; load(<span class="meta">@Nullable</span> Object model) &#123;</span><br><span class="line">    <span class="keyword">return</span> loadGeneric(model);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/** RequestBuilder对象 类的loadGeneric()方法*/</span></span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line">  <span class="keyword">private</span> RequestBuilder&lt;TranscodeType&gt; loadGeneric(<span class="meta">@Nullable</span> Object model) &#123;</span><br><span class="line">    <span class="keyword">this</span>.model = model;</span><br><span class="line">    isModelSet = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>通过以上RequestBuilder对象的load()方法，我们可以明白不管RequestManager对象的load方法方法传递什么类型的加载资源参数，RequestBuilder对象都把它看成时Object对象，并在loadGeneric方法中赋值给RequestBuilder对象的model对象。</li><li>通过查看RequestBuilder对象，我们还注意到apply(RequestOptions)这个方法，前面我们的例子中使用缓存，加载图像大小，设置加载占位符和错误占位符都需要新建RequestOptions对象，并设置我们的配置，现在我们分析的加载并没有apply一个RequestOptions对象，则Glide会使用requestOptions.clone()去加载默认配置，这里就先不进行展开了，先继续关注接下来的into方法。</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** RequestBuilder 类的apply方法*/</span></span><br><span class="line"> <span class="meta">@NonNull</span></span><br><span class="line">  <span class="meta">@CheckResult</span></span><br><span class="line">  <span class="keyword">public</span> RequestBuilder&lt;TranscodeType&gt; apply(<span class="meta">@NonNull</span> RequestOptions requestOptions) &#123;</span><br><span class="line">    Preconditions.checkNotNull(requestOptions);</span><br><span class="line">    <span class="keyword">this</span>.requestOptions = getMutableOptions().apply(requestOptions);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="meta">@SuppressWarnings(<span class="meta-string">"ReferenceEquality"</span>)</span></span><br><span class="line">  <span class="meta">@NonNull</span></span><br><span class="line">  <span class="keyword">protected</span> RequestOptions getMutableOptions() &#123;</span><br><span class="line">    <span class="keyword">return</span> defaultRequestOptions == <span class="keyword">this</span>.requestOptions</span><br><span class="line">        ? <span class="keyword">this</span>.requestOptions.clone() : <span class="keyword">this</span>.requestOptions;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>经过以上对with()方法和load方法的分析，经过这两步之后得到了<strong>RequestBuilder</strong>对象，也就说明真正的图片加载操作是在into方法来完成，也就是RequestBuilder对象的into方法。<h4 id="into方法"><a href="#into方法" class="headerlink" title="into方法"></a>into方法</h4></li><li><p>通过上一小节的分析，经过load方法之后获取的对象是RequestBuilder，并且我们将load方法的参数赋值给了RequestBuilder对象的model参数，接下来就到了Glide最核心的方法，也就是RequestBuilder对象的into方法</p><h5 id="获取DrawableImageViewTarget"><a href="#获取DrawableImageViewTarget" class="headerlink" title="获取DrawableImageViewTarget"></a>获取DrawableImageViewTarget</h5><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** RequestBuilder 类的into方法*/</span></span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line">  <span class="keyword">public</span> ViewTarget&lt;ImageView, TranscodeType&gt; into(<span class="meta">@NonNull</span> ImageView view) &#123;</span><br><span class="line">    Util.assertMainThread();</span><br><span class="line">    Preconditions.checkNotNull(view);</span><br><span class="line">    RequestOptions requestOptions = <span class="keyword">this</span>.requestOptions;</span><br><span class="line">    <span class="keyword">if</span> (!requestOptions.isTransformationSet()</span><br><span class="line">        &amp;&amp; requestOptions.isTransformationAllowed()</span><br><span class="line">        &amp;&amp; view.getScaleType() != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// Clone in this method so that if we use this RequestBuilder to load into a View and then</span></span><br><span class="line">      <span class="comment">// into a different target, we don't retain the transformation applied based on the previous</span></span><br><span class="line">      <span class="comment">// View's scale type.</span></span><br><span class="line">      <span class="keyword">switch</span> (view.getScaleType()) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">CENTER_CROP:</span></span><br><span class="line">          requestOptions = requestOptions.clone().optionalCenterCrop();</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">CENTER_INSIDE:</span></span><br><span class="line">          requestOptions = requestOptions.clone().optionalCenterInside();</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">FIT_CENTER:</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">FIT_START:</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">FIT_END:</span></span><br><span class="line">          requestOptions = requestOptions.clone().optionalFitCenter();</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">FIT_XY:</span></span><br><span class="line">          requestOptions = requestOptions.clone().optionalCenterInside();</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">CENTER:</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">MATRIX:</span></span><br><span class="line"><span class="symbol">        default:</span></span><br><span class="line">          <span class="comment">// Do nothing.</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> into(</span><br><span class="line">        glideContext.buildImageViewTarget(view, transcodeClass),</span><br><span class="line">        <span class="comment">/*targetListener=*/</span> <span class="literal">null</span>,</span><br><span class="line">        requestOptions);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>RequestBuilder 对象的into方法中首先获取传递进来的ImageView的ScaleType，让Glide加载出来的ImageView保持一样的ScaleType变化，然后我们看到最后一句话，该方法返回了RequestBuilder 对象的另一个into方法，先看glideContext.buildImageViewTarget()做了什么操作</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** GlideContext 类的 buildImageViewTarget方法*/</span></span><br><span class="line">  <span class="variable">@NonNull</span></span><br><span class="line">  public &lt;X&gt; ViewTarget&lt;ImageView, X&gt; buildImageViewTarget(</span><br><span class="line">      <span class="variable">@NonNull</span> ImageView imageView, <span class="variable">@NonNull</span> Class&lt;X&gt; transcodeClass) &#123;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">imageViewTargetFactory</span><span class="selector-class">.buildTarget</span>(imageView, transcodeClass);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">public</span> <span class="selector-tag">class</span> <span class="selector-tag">ImageViewTargetFactory</span> &#123;</span><br><span class="line">  <span class="variable">@NonNull</span></span><br><span class="line">  <span class="variable">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">  public &lt;Z&gt; ViewTarget&lt;ImageView, Z&gt; buildTarget(<span class="variable">@NonNull</span> ImageView view,</span><br><span class="line">      <span class="variable">@NonNull</span> Class&lt;Z&gt; clazz) &#123;</span><br><span class="line">    <span class="selector-tag">if</span> (Bitmap.class.equals(clazz)) &#123;</span><br><span class="line">      <span class="selector-tag">return</span> (ViewTarget&lt;ImageView, Z&gt;) <span class="selector-tag">new</span> <span class="selector-tag">BitmapImageViewTarget</span>(view);</span><br><span class="line">    &#125; <span class="selector-tag">else</span> <span class="selector-tag">if</span> (Drawable.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">      <span class="selector-tag">return</span> (ViewTarget&lt;ImageView, Z&gt;) <span class="selector-tag">new</span> <span class="selector-tag">DrawableImageViewTarget</span>(view);</span><br><span class="line">    &#125; <span class="selector-tag">else</span> &#123;</span><br><span class="line">      <span class="comment">//省略代码</span></span><br><span class="line">      .....</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过以上源码，之前我们看RequestBuilder源码中as方法传入的是Drawable.class，所以以上的buildImageViewTarget方法最终返回的是<strong>DrawableImageViewTarget对象</strong>，接着我们继续看第一步into方法返回into方法中做了什么操作</p><h5 id="构建Request"><a href="#构建Request" class="headerlink" title="构建Request"></a>构建Request</h5><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** RequestBuilder 类的into方法返回的into方法*/</span></span><br><span class="line"> <span class="keyword">private</span> &lt;Y <span class="keyword">extends</span> Target&lt;TranscodeType&gt;&gt; Y into(</span><br><span class="line">      <span class="meta">@NonNull</span> Y <span class="keyword">target</span>,</span><br><span class="line">      <span class="meta">@Nullable</span> RequestListener&lt;TranscodeType&gt; targetListener,</span><br><span class="line">      <span class="meta">@NonNull</span> RequestOptions options) &#123;</span><br><span class="line">    Util.assertMainThread();</span><br><span class="line">    Preconditions.checkNotNull(<span class="keyword">target</span>);</span><br><span class="line">    <span class="keyword">if</span> (!isModelSet) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"You must call #load() before calling #into()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    options = options.autoClone();</span><br><span class="line">    Request request = buildRequest(<span class="keyword">target</span>, targetListener, options);</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    ......</span><br><span class="line">    requestManager.clear(<span class="keyword">target</span>);</span><br><span class="line">    <span class="keyword">target</span>.setRequest(request);</span><br><span class="line">    requestManager.track(<span class="keyword">target</span>, request);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">target</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>通过以上源码，我们应该先明白<strong>Request类是一个接口，他抽象了Glide加载图片请求</strong>(Request类源码这里就不贴了)，它是一个非常重要的类，这里我们先看看buildRequest(target, targetListener, options)方法是如何创建Request对象的</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">private</span> Request buildRequest(</span><br><span class="line">      Target&lt;TranscodeType&gt; <span class="keyword">target</span>,</span><br><span class="line">      <span class="meta">@Nullable</span> RequestListener&lt;TranscodeType&gt; targetListener,</span><br><span class="line">      RequestOptions requestOptions) &#123;</span><br><span class="line">    <span class="keyword">return</span> buildRequestRecursive(</span><br><span class="line">        <span class="keyword">target</span>,</span><br><span class="line">        targetListener,</span><br><span class="line">        <span class="comment">/*parentCoordinator=*/</span> <span class="keyword">null</span>,</span><br><span class="line">        transitionOptions,</span><br><span class="line">        requestOptions.getPriority(),</span><br><span class="line">        requestOptions.getOverrideWidth(),</span><br><span class="line">        requestOptions.getOverrideHeight(),</span><br><span class="line">        requestOptions);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">private</span> Request buildRequestRecursive(</span><br><span class="line">      Target&lt;TranscodeType&gt; <span class="keyword">target</span>,</span><br><span class="line">      <span class="meta">@Nullable</span> RequestListener&lt;TranscodeType&gt; targetListener,</span><br><span class="line">      <span class="meta">@Nullable</span> RequestCoordinator parentCoordinator,</span><br><span class="line">      TransitionOptions&lt;?, ? <span class="keyword">super</span> TranscodeType&gt; transitionOptions,</span><br><span class="line">      Priority priority,</span><br><span class="line">      <span class="keyword">int</span> overrideWidth,</span><br><span class="line">      <span class="keyword">int</span> overrideHeight,</span><br><span class="line">      RequestOptions requestOptions) &#123;</span><br><span class="line">   <span class="comment">//省略部分代码 error Request build</span></span><br><span class="line">    ..... </span><br><span class="line">    Request mainRequest =</span><br><span class="line">        buildThumbnailRequestRecursive(</span><br><span class="line">            <span class="keyword">target</span>,</span><br><span class="line">            targetListener,</span><br><span class="line">            parentCoordinator,</span><br><span class="line">            transitionOptions,</span><br><span class="line">            priority,</span><br><span class="line">            overrideWidth,</span><br><span class="line">            overrideHeight,</span><br><span class="line">            requestOptions);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (errorRequestCoordinator == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> mainRequest;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略部分代码 error Request build</span></span><br><span class="line">    ..... </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> Request buildThumbnailRequestRecursive(</span><br><span class="line">      Target&lt;TranscodeType&gt; <span class="keyword">target</span>,</span><br><span class="line">      RequestListener&lt;TranscodeType&gt; targetListener,</span><br><span class="line">      <span class="meta">@Nullable</span> RequestCoordinator parentCoordinator,</span><br><span class="line">      TransitionOptions&lt;?, ? <span class="keyword">super</span> TranscodeType&gt; transitionOptions,</span><br><span class="line">      Priority priority,</span><br><span class="line">      <span class="keyword">int</span> overrideWidth,</span><br><span class="line">      <span class="keyword">int</span> overrideHeight,</span><br><span class="line">      RequestOptions requestOptions) &#123;</span><br><span class="line">    <span class="keyword">if</span> (thumbnailBuilder != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">//省略部分代码 缩略图操作</span></span><br><span class="line">    .....</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Base case: no thumbnail.</span></span><br><span class="line">      <span class="keyword">return</span> obtainRequest(</span><br><span class="line">          <span class="keyword">target</span>,</span><br><span class="line">          targetListener,</span><br><span class="line">          requestOptions,</span><br><span class="line">          parentCoordinator,</span><br><span class="line">          transitionOptions,</span><br><span class="line">          priority,</span><br><span class="line">          overrideWidth,</span><br><span class="line">          overrideHeight);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Request obtainRequest(</span><br><span class="line">      Target&lt;TranscodeType&gt; <span class="keyword">target</span>,</span><br><span class="line">      RequestListener&lt;TranscodeType&gt; targetListener,</span><br><span class="line">      RequestOptions requestOptions,</span><br><span class="line">      RequestCoordinator requestCoordinator,</span><br><span class="line">      TransitionOptions&lt;?, ? <span class="keyword">super</span> TranscodeType&gt; transitionOptions,</span><br><span class="line">      Priority priority,</span><br><span class="line">      <span class="keyword">int</span> overrideWidth,</span><br><span class="line">      <span class="keyword">int</span> overrideHeight) &#123;</span><br><span class="line">    <span class="keyword">return</span> SingleRequest.obtain(</span><br><span class="line">        context,</span><br><span class="line">        glideContext,</span><br><span class="line">        model,</span><br><span class="line">        transcodeClass,</span><br><span class="line">        requestOptions,</span><br><span class="line">        overrideWidth,</span><br><span class="line">        overrideHeight,</span><br><span class="line">        priority,</span><br><span class="line">        <span class="keyword">target</span>,</span><br><span class="line">        targetListener,</span><br><span class="line">        requestListeners,</span><br><span class="line">        requestCoordinator,</span><br><span class="line">        glideContext.getEngine(),</span><br><span class="line">        transitionOptions.getTransitionFactory());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>通过上面的源码，我们可以看到buildRequest方法调用了buildRequestRecursive方法，在buildRequestRecursive方法中大部分代码都在处理缩略图（thumbnail），我们主流程中没有设置缩略图，这里就不进行展开分析，接着buildRequestRecursive方法又调用了obtainRequest方法，obtainRequest方法传递了非常多参数，比如有我们熟悉的RequestOptions，设置图片尺寸的 overrideWidth， overrideHeight，还有第一步into方法中的target对象，也就是<strong>DrawableImageViewTarget对象</strong>，model也就是我们load传入的图片地址，也就说明不管load方法还是apply方法传入的参数最终都给到了这里传入SingleRequest.obtain方法，我们继续看看SingleRequest类</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleRequest</span>&lt;<span class="title">R</span>&gt; <span class="keyword">implements</span> <span class="title">Request</span>,</span></span><br><span class="line"><span class="class">    <span class="title">SizeReadyCallback</span>,</span></span><br><span class="line"><span class="class">    <span class="title">ResourceCallback</span>,</span></span><br><span class="line"><span class="class">    <span class="title">FactoryPools</span>.<span class="title">Poolable</span> </span>&#123;</span><br><span class="line"><span class="comment">//省略部分代码</span></span><br><span class="line">......</span><br><span class="line"><span class="comment">/**SingleRequest类的 obtain方法*/</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> &lt;R&gt; SingleRequest&lt;R&gt; obtain(</span><br><span class="line">      Context context,</span><br><span class="line">      GlideContext glideContext,</span><br><span class="line">      Object model,</span><br><span class="line">      Class&lt;R&gt; transcodeClass,</span><br><span class="line">      RequestOptions requestOptions,</span><br><span class="line">      <span class="keyword">int</span> overrideWidth,</span><br><span class="line">      <span class="keyword">int</span> overrideHeight,</span><br><span class="line">      Priority priority,</span><br><span class="line">      Target&lt;R&gt; <span class="keyword">target</span>,</span><br><span class="line">      RequestListener&lt;R&gt; targetListener,</span><br><span class="line">      <span class="meta">@Nullable</span> List&lt;RequestListener&lt;R&gt;&gt; requestListeners,</span><br><span class="line">      RequestCoordinator requestCoordinator,</span><br><span class="line">      Engine engine,</span><br><span class="line">      TransitionFactory&lt;? <span class="keyword">super</span> R&gt; animationFactory) &#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>) SingleRequest&lt;R&gt; request =</span><br><span class="line">        (SingleRequest&lt;R&gt;) POOL.acquire();</span><br><span class="line">    <span class="keyword">if</span> (request == <span class="keyword">null</span>) &#123;</span><br><span class="line">      request = <span class="keyword">new</span> SingleRequest&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    request.init(</span><br><span class="line">        context,</span><br><span class="line">        glideContext,</span><br><span class="line">        model,</span><br><span class="line">        transcodeClass,</span><br><span class="line">        requestOptions,</span><br><span class="line">        overrideWidth,</span><br><span class="line">        overrideHeight,</span><br><span class="line">        priority,</span><br><span class="line">        <span class="keyword">target</span>,</span><br><span class="line">        targetListener,</span><br><span class="line">        requestListeners,</span><br><span class="line">        requestCoordinator,</span><br><span class="line">        engine,</span><br><span class="line">        animationFactory);</span><br><span class="line">    <span class="keyword">return</span> request;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//省略部分代码</span></span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过SingleRequest对象的obtain方法，我们可以看到request = new SingleRequest&lt;&gt;()；也就是最终我们构建的Request是<strong>SingleRequest</strong>对象，并在init方法中将上一步obtainRequest方法传递进来的各种参数进行赋值。</p><h5 id="Request执行"><a href="#Request执行" class="headerlink" title="Request执行"></a>Request执行</h5></li><li><p>构建完成Request对象，接下来继续看刚刚的into方法下面的操作</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">requestManager.clear(<span class="keyword">target</span>);</span><br><span class="line"><span class="keyword">target</span>.setRequest(request);</span><br><span class="line">requestManager.track(<span class="keyword">target</span>, request);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">target</span></span><br></pre></td></tr></table></figure></li><li><p>首先RequestManager对象清除target，此时不懂你是否还记得RequestManager，该对象是第一步with方法之后得到的，接着是将我们上一步得到的SingleRequest对象设置给target，接着又执行了RequestManager.track方法，继续跟进该方法看看</p></li></ul><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/** RequestManager 类的track方法*/</span><br><span class="line">void track(@NonNull Target&lt;?&gt; target, @NonNull <span class="built_in">Request</span> <span class="built_in">request</span>) &#123;</span><br><span class="line">    targetTracker.track(target);</span><br><span class="line">    requestTracker.runRequest(<span class="built_in">request</span>);</span><br><span class="line">  &#125;</span><br><span class="line">/** RequestTracker 类的runRequest方法*/  </span><br><span class="line"><span class="keyword">private</span> final List&lt;<span class="built_in">Request</span>&gt; pendingRequests = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"> <span class="keyword">public</span> void runRequest(@NonNull <span class="built_in">Request</span> <span class="built_in">request</span>) &#123;</span><br><span class="line">    requests.add(<span class="built_in">request</span>);</span><br><span class="line">    <span class="keyword">if</span> (!isPaused) &#123;</span><br><span class="line">      <span class="built_in">request</span>.begin();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">request</span>.clear();</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">Log</span>.isLoggable(TAG, <span class="built_in">Log</span>.VERBOSE)) &#123;</span><br><span class="line">        <span class="built_in">Log</span>.v(TAG, <span class="string">"Paused, delaying request"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      pendingRequests.add(<span class="built_in">request</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>通过上面的源码，RequestManager对象的track方法中执行了RequestTracker 类的runRequest方法，该方法中简单判断当前Glide是否在暂停状态，不是暂停状态则执行Request的begin方法，否则将这个Request加入到请求队列List<request>pendingRequests中.<h5 id="后备回调符、加载占位符和错误占位符加载"><a href="#后备回调符、加载占位符和错误占位符加载" class="headerlink" title="后备回调符、加载占位符和错误占位符加载"></a>后备回调符、加载占位符和错误占位符加载</h5></request></li><li>接下来我们看看Request的begin方法到底干了啥，要找到begin方法实现，根据前面分析，我们则应该去看SingleRequest对象的begin方法</li></ul><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** SingleRequest 类的begin方法*/</span>  </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">begin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    assertNotCallingCallbacks();</span><br><span class="line">    stateVerifier.throwIfRecycled();</span><br><span class="line">    startTime = LogTime.getLogTime();</span><br><span class="line">    <span class="keyword">if</span> (model == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (Util.isValidDimensions(overrideWidth, overrideHeight)) &#123;</span><br><span class="line">        width = overrideWidth;</span><br><span class="line">        height = overrideHeight;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">int</span> logLevel = getFallbackDrawable() == <span class="keyword">null</span> ? Log.WARN : Log.DEBUG;</span><br><span class="line">      onLoadFailed(<span class="keyword">new</span> GlideException(<span class="string">"Received null model"</span>), logLevel);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (status == Status.RUNNING) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Cannot restart a running request"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (status == Status.COMPLETE) &#123;</span><br><span class="line">      onResourceReady(resource, DataSource.MEMORY_CACHE);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    status = Status.WAITING_FOR_SIZE;</span><br><span class="line">    <span class="keyword">if</span> (Util.isValidDimensions(overrideWidth, overrideHeight)) &#123;</span><br><span class="line">      onSizeReady(overrideWidth, overrideHeight);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">target</span>.getSize(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((status == Status.RUNNING || status == Status.WAITING_FOR_SIZE)</span><br><span class="line">        &amp;&amp; canNotifyStatusChanged()) &#123;</span><br><span class="line">      <span class="keyword">target</span>.onLoadStarted(getPlaceholderDrawable());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (IS_VERBOSE_LOGGABLE) &#123;</span><br><span class="line">      logV(<span class="string">"finished run method in "</span> + LogTime.getElapsedMillis(startTime));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">onLoadFailed</span><span class="params">(GlideException e, <span class="keyword">int</span> maxLogLevel)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//省略部分代码</span></span><br><span class="line">      .......</span><br><span class="line">      <span class="keyword">if</span> (!anyListenerHandledUpdatingTarget) &#123;</span><br><span class="line">        setErrorPlaceholder();</span><br><span class="line">      &#125;</span><br><span class="line">     <span class="comment">//省略部分代码</span></span><br><span class="line">     ....... </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><p>通过以上begin方法源码，如果model为空，也就是我们load传入的图片地址为空，则会调用onLoadFailed方法，而onLoadFailed方法又调用了setErrorPlaceholder方法，接着看看该方法中做了什么操作</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** SingleRequest 类的setErrorPlaceholder方法*/</span> </span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">setErrorPlaceholder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!canNotifyStatusChanged()) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Drawable <span class="keyword">error</span> = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (model == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">error</span> = getFallbackDrawable();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Either the model isn't null, or there was no fallback drawable set.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">error</span> == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">error</span> = getErrorDrawable();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// The model isn't null, no fallback drawable was set or no error drawable was set.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">error</span> == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">error</span> = getPlaceholderDrawable();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">target</span>.onLoadFailed(<span class="keyword">error</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="function">Drawable <span class="title">getErrorDrawable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (errorDrawable == <span class="keyword">null</span>) &#123;</span><br><span class="line">      errorDrawable = requestOptions.getErrorPlaceholder();</span><br><span class="line">      <span class="keyword">if</span> (errorDrawable == <span class="keyword">null</span> &amp;&amp; requestOptions.getErrorId() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        errorDrawable = loadDrawable(requestOptions.getErrorId());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> errorDrawable;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>通过以上源码，如果我们传入图片地址为空，则首先查看是否有后备回调符设置，然后是错误占位符，最后是加载占位符，最终调用target.onLoadFailed方法，也就是ImageViewTarget的onLoadFailed方法</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageViewTarget</span>&lt;<span class="title">Z</span>&gt; <span class="keyword">extends</span> <span class="title">ViewTarget</span>&lt;<span class="title">ImageView</span>, <span class="title">Z</span>&gt;<span class="keyword">implements</span> <span class="title">Transition</span>.<span class="title">ViewAdapter</span> </span>&#123;</span><br><span class="line">  <span class="comment">//省略部分代码</span></span><br><span class="line">  .......</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDrawable</span><span class="params">(Drawable drawable)</span> </span>&#123;</span><br><span class="line">    view.setImageDrawable(drawable);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadStarted</span><span class="params">(@Nullable Drawable placeholder)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onLoadStarted(placeholder);</span><br><span class="line">    setResourceInternal(<span class="keyword">null</span>);</span><br><span class="line">    setDrawable(placeholder);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadFailed</span><span class="params">(@Nullable Drawable errorDrawable)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onLoadFailed(errorDrawable);</span><br><span class="line">    setResourceInternal(<span class="keyword">null</span>);</span><br><span class="line">    setDrawable(errorDrawable);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//省略部分代码</span></span><br><span class="line">  .......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过以上源码，我想你应该已经明白了后备回调符、错误占位符加载，这里还有一个疑问，加载占位符呢？我们回到之前SingleRequest对象的begin方法，相信你会马上看到在加载状态为RUNNING的时候调用了target.onLoadStarted，也实现了加载中的占位符，到这里我们已经分析完了后备回调符、加载占位符和错误占位符加载底层实现逻辑。<h5 id="加载图片网络请求"><a href="#加载图片网络请求" class="headerlink" title="加载图片网络请求"></a>加载图片网络请求</h5></li><li><p>前面分析完各种占位符实现，我们再次回到SingleRequest对象的begin方法，我们可以注意到onSizeReady()和target.getSize()这两句就是加载图片的入口，如果我们在使用glide的时候设置图片加载的大小尺寸，则会调用target.getSize()</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** ViewTarget 类的etSize方法*/</span> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getSize</span><span class="params">(@NonNull SizeReadyCallback cb)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> currentWidth = getTargetWidth();</span><br><span class="line">      <span class="keyword">int</span> currentHeight = getTargetHeight();</span><br><span class="line">      <span class="keyword">if</span> (isViewStateAndSizeValid(currentWidth, currentHeight)) &#123;</span><br><span class="line">        cb.onSizeReady(currentWidth, currentHeight);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//省略部分代码</span></span><br><span class="line">      ......</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>通过以上源码，target.getSize()会根据ImageView的宽高来得出图片的加载宽高，最终target.getSize()还是会调用onSizeReady()方法，所以我们就直接来看看SingleRequest对象onSizeReady()方法中做了什么操作。</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** SingleRequest 类的onSizeReady方法*/</span></span><br><span class="line">@Override</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> onSizeReady(<span class="built_in">int</span> <span class="built_in">width</span>, <span class="built_in">int</span> <span class="built_in">height</span>) &#123;</span><br><span class="line">    stateVerifier.throwIfRecycled();</span><br><span class="line">    <span class="keyword">if</span> (IS_VERBOSE_LOGGABLE) &#123;</span><br><span class="line">      logV(<span class="string">"Got onSizeReady in "</span> + LogTime.getElapsedMillis(startTime));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (status != Status.WAITING_FOR_SIZE) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    status = Status.RUNNING;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">float</span> sizeMultiplier = requestOptions.getSizeMultiplier();</span><br><span class="line">    <span class="keyword">this</span>.<span class="built_in">width</span> = maybeApplySizeMultiplier(<span class="built_in">width</span>, sizeMultiplier);</span><br><span class="line">    <span class="keyword">this</span>.<span class="built_in">height</span> = maybeApplySizeMultiplier(<span class="built_in">height</span>, sizeMultiplier);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (IS_VERBOSE_LOGGABLE) &#123;</span><br><span class="line">      logV(<span class="string">"finished setup for calling load in "</span> + LogTime.getElapsedMillis(startTime));</span><br><span class="line">    &#125;</span><br><span class="line">    loadStatus = engine.load(</span><br><span class="line">        glideContext,</span><br><span class="line">        model,</span><br><span class="line">        requestOptions.getSignature(),</span><br><span class="line">        <span class="keyword">this</span>.<span class="built_in">width</span>,</span><br><span class="line">        <span class="keyword">this</span>.<span class="built_in">height</span>,</span><br><span class="line">        requestOptions.getResourceClass(),</span><br><span class="line">        transcodeClass,</span><br><span class="line">        priority,</span><br><span class="line">        requestOptions.getDiskCacheStrategy(),</span><br><span class="line">        requestOptions.getTransformations(),</span><br><span class="line">        requestOptions.isTransformationRequired(),</span><br><span class="line">        requestOptions.isScaleOnlyOrNoTransform(),</span><br><span class="line">        requestOptions.getOptions(),</span><br><span class="line">        requestOptions.isMemoryCacheable(),</span><br><span class="line">        requestOptions.getUseUnlimitedSourceGeneratorsPool(),</span><br><span class="line">        requestOptions.getUseAnimationPool(),</span><br><span class="line">        requestOptions.getOnlyRetrieveFromCache(),</span><br><span class="line">        <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This is a hack that's only useful for testing right now where loads complete synchronously</span></span><br><span class="line">    <span class="comment">// even though under any executor running on any thread but the main thread, the load would</span></span><br><span class="line">    <span class="comment">// have completed asynchronously.</span></span><br><span class="line">    <span class="keyword">if</span> (status != Status.RUNNING) &#123;</span><br><span class="line">      loadStatus = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (IS_VERBOSE_LOGGABLE) &#123;</span><br><span class="line">      logV(<span class="string">"finished onSizeReady in "</span> + LogTime.getElapsedMillis(startTime));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>在onSizeReady方法中，主要调用了engine.load()方法并返回加载状态，engine.load方法继续接收我们之前传入的各种参数，其中也有我们model对象，也就是之前load方法传入的图片地址。首先我们需要了解engine是什么，顾名思义，engine的英文意思是发动机，而在Glide框架中他就是负责启动图片加载的发动机，主要负责启动加载，我们在前面with方法获取glide对象中得到了engine对象（这里就不贴源码了），我们接着看engine.load()方法进行什么操作</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Engine 类的load方法*/</span></span><br><span class="line"><span class="keyword">public</span> &lt;R&gt; LoadStatus load(GlideContext glideContext, <span class="keyword">Object</span> model,Key signature,<span class="built_in">int</span> <span class="built_in">width</span>,<span class="built_in">int</span> <span class="built_in">height</span>,Class&lt;?&gt; resourceClass,Class&lt;R&gt; transcodeClass, Priority priority,DiskCacheStrategy diskCacheStrategy, Map&lt;Class&lt;?&gt;, Transformation&lt;?&gt;&gt; transformations,<span class="built_in">boolean</span> isTransformationRequired,<span class="built_in">boolean</span> isScaleOnlyOrNoTransform,Options options,<span class="built_in">boolean</span> isMemoryCacheable,<span class="built_in">boolean</span> useUnlimitedSourceExecutorPool,<span class="built_in">boolean</span> useAnimationPool,<span class="built_in">boolean</span> onlyRetrieveFromCache,ResourceCallback cb) &#123;</span><br><span class="line">    Util.assertMainThread();</span><br><span class="line">    <span class="keyword">long</span> startTime = VERBOSE_IS_LOGGABLE ? LogTime.getLogTime() : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    EngineKey <span class="built_in">key</span> = keyFactory.buildKey(model, signature, <span class="built_in">width</span>, <span class="built_in">height</span>, transformations,</span><br><span class="line">        resourceClass, transcodeClass, options);</span><br><span class="line"></span><br><span class="line">    EngineResource&lt;?&gt; active = loadFromActiveResources(<span class="built_in">key</span>, isMemoryCacheable);</span><br><span class="line">    <span class="keyword">if</span> (active != <span class="keyword">null</span>) &#123;</span><br><span class="line">      cb.onResourceReady(active, DataSource.MEMORY_CACHE);</span><br><span class="line">      <span class="keyword">if</span> (VERBOSE_IS_LOGGABLE) &#123;</span><br><span class="line">        logWithTimeAndKey(<span class="string">"Loaded resource from active resources"</span>, startTime, <span class="built_in">key</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    EngineResource&lt;?&gt; cached = loadFromCache(<span class="built_in">key</span>, isMemoryCacheable);</span><br><span class="line">    <span class="keyword">if</span> (cached != <span class="keyword">null</span>) &#123;</span><br><span class="line">      cb.onResourceReady(cached, DataSource.MEMORY_CACHE);</span><br><span class="line">      <span class="keyword">if</span> (VERBOSE_IS_LOGGABLE) &#123;</span><br><span class="line">        logWithTimeAndKey(<span class="string">"Loaded resource from cache"</span>, startTime, <span class="built_in">key</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    EngineJob&lt;?&gt; current = jobs.<span class="built_in">get</span>(<span class="built_in">key</span>, onlyRetrieveFromCache);</span><br><span class="line">    <span class="keyword">if</span> (current != <span class="keyword">null</span>) &#123;</span><br><span class="line">      current.addCallback(cb);</span><br><span class="line">      <span class="keyword">if</span> (VERBOSE_IS_LOGGABLE) &#123;</span><br><span class="line">        logWithTimeAndKey(<span class="string">"Added to existing load"</span>, startTime, <span class="built_in">key</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> LoadStatus(cb, current);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    EngineJob&lt;R&gt; engineJob =</span><br><span class="line">        engineJobFactory.build(</span><br><span class="line">            <span class="built_in">key</span>,</span><br><span class="line">            isMemoryCacheable,</span><br><span class="line">            useUnlimitedSourceExecutorPool,</span><br><span class="line">            useAnimationPool,</span><br><span class="line">            onlyRetrieveFromCache);</span><br><span class="line"></span><br><span class="line">    DecodeJob&lt;R&gt; decodeJob =</span><br><span class="line">        decodeJobFactory.build(</span><br><span class="line">            glideContext,</span><br><span class="line">            model,</span><br><span class="line">            <span class="built_in">key</span>,</span><br><span class="line">            signature,</span><br><span class="line">            <span class="built_in">width</span>,</span><br><span class="line">            <span class="built_in">height</span>,</span><br><span class="line">            resourceClass,</span><br><span class="line">            transcodeClass,</span><br><span class="line">            priority,</span><br><span class="line">            diskCacheStrategy,</span><br><span class="line">            transformations,</span><br><span class="line">            isTransformationRequired,</span><br><span class="line">            isScaleOnlyOrNoTransform,</span><br><span class="line">            onlyRetrieveFromCache,</span><br><span class="line">            options,</span><br><span class="line">            engineJob);</span><br><span class="line"></span><br><span class="line">    jobs.put(<span class="built_in">key</span>, engineJob);</span><br><span class="line"></span><br><span class="line">    engineJob.addCallback(cb);</span><br><span class="line">    engineJob.start(decodeJob);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (VERBOSE_IS_LOGGABLE) &#123;</span><br><span class="line">      logWithTimeAndKey(<span class="string">"Started new load"</span>, startTime, <span class="built_in">key</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LoadStatus(cb, engineJob);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/**  DecodeJob 类的继承关系*/</span>  </span><br><span class="line">class DecodeJob&lt;R&gt; implements DataFetcherGenerator.FetcherReadyCallback,</span><br><span class="line">    Runnable,</span><br><span class="line">    Comparable&lt;DecodeJob&lt;?&gt;&gt;,</span><br><span class="line">    Poolable</span><br></pre></td></tr></table></figure></li><li><p>通过以上源码，Engine对象的load方前面一段代码都是在处理缓存问题，这里先不进行展开，继续走我们加载图片的主线，往下看我们看到构建了一个EngineJob对象，还构建了一个DecodeJob对象，构建DecodeJob对象又继续接收我们之前传入的各种参数，由DecodeJob对象的继承关系我们可以知道它是Runnable对象，接着我们看到engineJob的start()方法，它直接传入了DecodeJob对象</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** EngineJob 类的start方法*/</span></span><br><span class="line"><span class="keyword">public</span> void start(DecodeJob&lt;R&gt; decodeJob) &#123;</span><br><span class="line">    <span class="built_in">this</span>.decodeJob = decodeJob;</span><br><span class="line">    GlideExecutor executor = decodeJob.willDecodeFromCache()</span><br><span class="line">        ? diskCacheExecutor</span><br><span class="line">        : <span class="type">getActiveSourceExecutor</span>();</span><br><span class="line">    executor.execute(decodeJob);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/** GlideExecutor 类的newSourceExecutor方法*/</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> GlideExecutor <span class="keyword">new</span><span class="type">SourceExecutor</span>(</span><br><span class="line">      int threadCount, <span class="keyword">String</span> name, UncaughtThrowableStrategy uncaughtThrowableStrategy) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">GlideExecutor</span>(</span><br><span class="line">        <span class="keyword">new</span> <span class="type">ThreadPoolExecutor</span>(</span><br><span class="line">            threadCount <span class="comment">/* corePoolSize */</span>,</span><br><span class="line">            threadCount <span class="comment">/* maximumPoolSize */</span>,</span><br><span class="line">            <span class="number">0</span> <span class="comment">/* keepAliveTime */</span>,</span><br><span class="line">            TimeUnit.MILLISECONDS,</span><br><span class="line">            <span class="keyword">new</span> <span class="type">PriorityBlockingQueue</span>&lt;Runnable&gt;(),</span><br><span class="line">            <span class="keyword">new</span> <span class="type">DefaultThreadFactory</span>(name, uncaughtThrowableStrategy, <span class="literal">false</span>)));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>通过以上源码，EngineJob对象的start方法首先还是判断缓存，最终获取的GlideExecutor就是一个线程池执行器（Executor），GlideExecutor中有各种方法获得缓存线程池，还有资源线程池（SourceExecutor），以上源码贴出资源<a href="https://www.maoqitian.com/2019/01/20/Java中的线程池/">线程池</a>。实际上EngineJob对象的start方法就是用来在线程池中启动DecodeJob这个Runnable对象，也就是说EngineJob的主要作用是开启线程来加载图片，接着我们来看看DecodeJob对象的run方法。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** DecodeJob 类的run方法*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    DataFetcher&lt;?&gt; localFetcher = currentFetcher;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (isCancelled) &#123;</span><br><span class="line">        notifyFailed();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      runWrapped();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">      <span class="comment">//省略部分代码</span></span><br><span class="line">      .......</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (localFetcher != <span class="literal">null</span>) &#123;</span><br><span class="line">        localFetcher.cleanup();</span><br><span class="line">      &#125;</span><br><span class="line">      GlideTrace.endSection();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/** DecodeJob 类的runWrapped方法*/</span>  </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">runWrapped</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (runReason) &#123;</span><br><span class="line">      <span class="keyword">case</span> INITIALIZE:</span><br><span class="line">        stage = getNextStage(Stage.INITIALIZE);</span><br><span class="line">        currentGenerator = getNextGenerator();</span><br><span class="line">        runGenerators();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> SWITCH_TO_SOURCE_SERVICE:</span><br><span class="line">        runGenerators();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> DECODE_DATA:</span><br><span class="line">        decodeFromRetrievedData();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unrecognized run reason: "</span> + runReason);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/** DecodeJob 类的getNextStage方法*/</span>   </span><br><span class="line"><span class="function"><span class="keyword">private</span> Stage <span class="title">getNextStage</span>(<span class="params">Stage current</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (current) &#123;</span><br><span class="line">      <span class="keyword">case</span> INITIALIZE:</span><br><span class="line">        <span class="keyword">return</span> diskCacheStrategy.decodeCachedResource()</span><br><span class="line">            ? Stage.RESOURCE_CACHE : getNextStage(Stage.RESOURCE_CACHE);</span><br><span class="line">      <span class="keyword">case</span> RESOURCE_CACHE:</span><br><span class="line">        <span class="keyword">return</span> diskCacheStrategy.decodeCachedData()</span><br><span class="line">            ? Stage.DATA_CACHE : getNextStage(Stage.DATA_CACHE);</span><br><span class="line">      <span class="keyword">case</span> DATA_CACHE:</span><br><span class="line">        <span class="comment">// Skip loading from source if the user opted to only retrieve the resource from cache.</span></span><br><span class="line">        <span class="keyword">return</span> onlyRetrieveFromCache ? Stage.FINISHED : Stage.SOURCE;</span><br><span class="line">      <span class="keyword">case</span> SOURCE:</span><br><span class="line">      <span class="keyword">case</span> FINISHED:</span><br><span class="line">        <span class="keyword">return</span> Stage.FINISHED;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unrecognized stage: "</span> + current);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="comment">/** DecodeJob 类的getNextGenerator方法*/</span>   </span><br><span class="line"><span class="function"><span class="keyword">private</span> DataFetcherGenerator <span class="title">getNextGenerator</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (stage) &#123;</span><br><span class="line">      <span class="keyword">case</span> RESOURCE_CACHE:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResourceCacheGenerator(decodeHelper, <span class="keyword">this</span>);</span><br><span class="line">      <span class="keyword">case</span> DATA_CACHE:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataCacheGenerator(decodeHelper, <span class="keyword">this</span>);</span><br><span class="line">      <span class="keyword">case</span> SOURCE:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SourceGenerator(decodeHelper, <span class="keyword">this</span>);</span><br><span class="line">      <span class="keyword">case</span> FINISHED:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unrecognized stage: "</span> + stage);</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">/** DecodeJob 类的runGenerators方法*/</span>       </span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">runGenerators</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    currentThread = Thread.currentThread();</span><br><span class="line">    startFetchTime = LogTime.getLogTime();</span><br><span class="line">    boolean isStarted = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> (!isCancelled &amp;&amp; currentGenerator != <span class="literal">null</span></span><br><span class="line">        &amp;&amp; !(isStarted = currentGenerator.startNext())) &#123;</span><br><span class="line">      stage = getNextStage(stage);</span><br><span class="line">      currentGenerator = getNextGenerator();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (stage == Stage.SOURCE) &#123;</span><br><span class="line">        reschedule();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">//省略部分代码</span></span><br><span class="line">      ....... </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>上面我们再次贴出了一堆代码，我们来好好梳理一下逻辑，DecodeJob对象的run方法中逻辑很简单，就是调用了自身的runWrapped方法，runWrapped方法中首先判断Stage枚举，前面在创建DecodeJob对象时候设置初始状态为Stage.INITIALIZE，然后接着调用getNextStage方法，这里我们还是继续跳过缓存，所以getNextStage方法最终返回的是Stage.SOURCE状态，接着在getNextGenerator()方法中我们获取就是SourceGenerator对象，也就是run方法中的第一句话DataFetcher&lt;?&gt; localFetcher = currentFetcher中localFetcher就是我们刚刚获得的<strong>SourceGenerator对象</strong>，接着继续执行runGenerators()方法，在该方法的while循环判断条件执行了currentGenerator.startNext()方法，也就是<strong>SourceGenerator对象</strong>的startNext()方法</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** SourceGenerator 类的startNext()方法*/</span> </span><br><span class="line">@Override</span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">boolean</span> startNext() &#123;</span><br><span class="line">    <span class="comment">//省略部分代码，跳过缓存部分判断</span></span><br><span class="line">    ........</span><br><span class="line">    loadData = <span class="keyword">null</span>;</span><br><span class="line">    <span class="built_in">boolean</span> started = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">while</span> (!started &amp;&amp; hasNextModelLoader()) &#123;</span><br><span class="line">      loadData = helper.getLoadData().<span class="built_in">get</span>(loadDataListIndex++);</span><br><span class="line">      <span class="keyword">if</span> (loadData != <span class="keyword">null</span></span><br><span class="line">          &amp;&amp; (helper.getDiskCacheStrategy().isDataCacheable(loadData.fetcher.getDataSource())</span><br><span class="line">          || helper.hasLoadPath(loadData.fetcher.getDataClass()))) &#123;</span><br><span class="line">        started = <span class="keyword">true</span>;</span><br><span class="line">        loadData.fetcher.loadData(helper.getPriority(), <span class="keyword">this</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> started;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/** DecodeHelper 类的getLoadData() 方法*/</span></span><br><span class="line">List&lt;LoadData&lt;?&gt;&gt; getLoadData() &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isLoadDataSet) &#123;</span><br><span class="line">      isLoadDataSet = <span class="keyword">true</span>;</span><br><span class="line">      loadData.<span class="built_in">clear</span>();</span><br><span class="line">      List&lt;ModelLoader&lt;<span class="keyword">Object</span>, ?&gt;&gt; modelLoaders = glideContext.getRegistry().getModelLoaders(model);</span><br><span class="line">      <span class="comment">//noinspection ForLoopReplaceableByForEach to improve perf</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>, <span class="built_in">size</span> = modelLoaders.<span class="built_in">size</span>(); i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">        ModelLoader&lt;<span class="keyword">Object</span>, ?&gt; modelLoader = modelLoaders.<span class="built_in">get</span>(i);</span><br><span class="line">        LoadData&lt;?&gt; current =</span><br><span class="line">            modelLoader.buildLoadData(model, <span class="built_in">width</span>, <span class="built_in">height</span>, options);</span><br><span class="line">        <span class="keyword">if</span> (current != <span class="keyword">null</span>) &#123;</span><br><span class="line">          loadData.<span class="built_in">add</span>(current);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> loadData;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/** HttpGlideUrlLoader 类的buildLoadData 方法*/</span> </span><br><span class="line"> @Override</span><br><span class="line">  <span class="keyword">public</span> LoadData&lt;InputStream&gt; buildLoadData(@NonNull GlideUrl model, <span class="built_in">int</span> <span class="built_in">width</span>, <span class="built_in">int</span> <span class="built_in">height</span>,</span><br><span class="line">      @NonNull Options options) &#123;</span><br><span class="line">    <span class="comment">// GlideUrls memoize parsed URLs so caching them saves a few object instantiations and time</span></span><br><span class="line">    <span class="comment">// spent parsing urls.</span></span><br><span class="line">    GlideUrl url = model;</span><br><span class="line">    <span class="keyword">if</span> (modelCache != <span class="keyword">null</span>) &#123;</span><br><span class="line">      url = modelCache.<span class="built_in">get</span>(model, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">      <span class="keyword">if</span> (url == <span class="keyword">null</span>) &#123;</span><br><span class="line">        modelCache.put(model, <span class="number">0</span>, <span class="number">0</span>, model);</span><br><span class="line">        url = model;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">int</span> timeout = options.<span class="built_in">get</span>(TIMEOUT);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LoadData&lt;&gt;(url, <span class="keyword">new</span> HttpUrlFetcher(url, timeout));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>通过上面源码，我们接着看到loadData=helper.getLoadData().get(loadDataListIndex++)这一句代码，helper就是DecodeHelper对象，在我们前面创建DecodeJob对象的时候已经把它创建，之前我们在load步骤中传入的model是图片url地址，所以经过DecodeHelper 类的getLoadData() 方法（更细的代码这里就不进行展开了），最终获取的ModelLoader&lt;Object, ?&gt; modelLoader对象则为<strong>HttpGlideUrlLoader对象</strong>，也就是laodData对象，所以modelLoader.buildLoadData创建则在HttpGlideUrlLoader对象的buildLoadData中实现，上方贴出的该方法源码中把我们model赋值给GlideUrl对象，也就是将其作为URL地址来进行处理，则经过modelLoader.buildLoadData获取的loadData.fetcher则对应<strong>HttpUrlFetcher对象</strong>，所以loadData.fetcher.loadData调用的就是HttpUrlFetcher对象loadData方法，</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/<span class="strong">**HttpUrlFetcher类的loadData方法 **</span>/</span></span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">  public <span class="keyword">void</span> loadData(<span class="meta">@NonNull</span> Priority priority,</span><br><span class="line">      <span class="meta">@NonNull</span> DataCallback&lt;? <span class="keyword">super</span> InputStream&gt; callback) &#123;</span><br><span class="line">    long startTime = LogTime.getLogTime();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      InputStream result = loadDataWithRedirects(glideUrl.toURL(), <span class="number">0</span>, <span class="keyword">null</span>, glideUrl.getHeaders());</span><br><span class="line">      callback.onDataReady(result);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      <span class="keyword">if</span> (Log.isLoggable(TAG, Log.DEBUG)) &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"Failed to load data for url"</span>, e);</span><br><span class="line">      &#125;</span><br><span class="line">      callback.onLoadFailed(e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</span><br><span class="line">        Log.v(TAG, <span class="string">"Finished http url fetcher fetch in "</span> + LogTime.getElapsedMillis(startTime));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment"><span class="markdown">/<span class="strong">**HttpUrlFetcher类的loadDataWithRedirects方法 **</span>/</span></span>  </span><br><span class="line">private InputStream loadDataWithRedirects(URL url, <span class="built_in">int</span> redirects, URL lastUrl,</span><br><span class="line">      <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; headers) throws IOException &#123;</span><br><span class="line">    <span class="keyword">if</span> (redirects &gt;= MAXIMUM_REDIRECTS) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(<span class="string">"Too many (&gt; "</span> + MAXIMUM_REDIRECTS + <span class="string">") redirects!"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// Comparing the URLs using .equals performs additional network I/O and is generally broken.</span></span><br><span class="line">      <span class="comment">// See http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html.</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (lastUrl != <span class="keyword">null</span> &amp;&amp; url.toURI().equals(lastUrl.toURI())) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(<span class="string">"In re-direct loop"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (URISyntaxException e) &#123;</span><br><span class="line">        <span class="comment">// Do nothing, this is best effort.</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    urlConnection = connectionFactory.build(url);</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">Map</span>.Entry&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; headerEntry : headers.entrySet()) &#123;</span><br><span class="line">      urlConnection.addRequestProperty(headerEntry.getKey(), headerEntry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">    urlConnection.setConnectTimeout(timeout);</span><br><span class="line">    urlConnection.setReadTimeout(timeout);</span><br><span class="line">    urlConnection.setUseCaches(<span class="keyword">false</span>);</span><br><span class="line">    urlConnection.setDoInput(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Stop the urlConnection instance of HttpUrlConnection from following redirects so that</span></span><br><span class="line">    <span class="comment">// redirects will be handled by recursive calls to this method, loadDataWithRedirects.</span></span><br><span class="line">    urlConnection.setInstanceFollowRedirects(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Connect explicitly to avoid errors in decoders if connection fails.</span></span><br><span class="line">    urlConnection.connect();</span><br><span class="line">    <span class="comment">// Set the stream so that it's closed in cleanup to avoid resource leaks. See #2352.</span></span><br><span class="line">    stream = urlConnection.getInputStream();</span><br><span class="line">    <span class="keyword">if</span> (isCancelled) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">int</span> statusCode = urlConnection.getResponseCode();</span><br><span class="line">    <span class="keyword">if</span> (isHttpOk(statusCode)) &#123;</span><br><span class="line">      <span class="keyword">return</span> getStreamForSuccessfulRequest(urlConnection);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isHttpRedirect(statusCode)) &#123;</span><br><span class="line">      <span class="built_in">String</span> redirectUrlString = urlConnection.getHeaderField(<span class="string">"Location"</span>);</span><br><span class="line">      <span class="keyword">if</span> (TextUtils.isEmpty(redirectUrlString)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(<span class="string">"Received empty or null redirect url"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      URL redirectUrl = <span class="keyword">new</span> URL(url, redirectUrlString);</span><br><span class="line">      <span class="comment">// Closing the stream specifically is required to avoid leaking ResponseBodys in addition</span></span><br><span class="line">      <span class="comment">// to disconnecting the url connection below. See #2352.</span></span><br><span class="line">      cleanup();</span><br><span class="line">      <span class="keyword">return</span> loadDataWithRedirects(redirectUrl, redirects + <span class="number">1</span>, url, headers);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (statusCode == INVALID_STATUS_CODE) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(statusCode);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> HttpException(urlConnection.getResponseMessage(), statusCode);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>通过以上源码，HttpUrlFetcher对象的loadData方法首先调用自身loadDataWithRedirects方法，接着我们看到该方法源码，这里使用了HttpURLConnection来执行了网络请求，看到这里内心还是有点开心的，前面看了这么多源码，终于看到Glide的网络请求了，开心之后还没完呢，还得接着往下看，执行完网络请求成功，loadDataWithRedirects方法中网络请求成功调用getStreamForSuccessfulRequest返回了一个<strong>InputStream流</strong>(记住这个InputStream，很关键)，然后执行了一个callback回调，而这个回调对象就是我们之前在SourceGenerator对象中调用loadData方法传入SourceGenerator对象本身，所以callback.onDataReady()调用的就是SourceGenerator对象的onDataReady方法</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**SourceGenerator类的onDataReady方法 **/</span>  </span><br><span class="line">  @Override</span><br><span class="line">  <span class="keyword">public</span> <span class="literal">void</span> onDataReady(Object <span class="built_in">data</span>) &#123;</span><br><span class="line">    DiskCacheStrategy diskCacheStrategy = helper.getDiskCacheStrategy();</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">data</span> != <span class="built_in">null</span> &amp;&amp; diskCacheStrategy.isDataCacheable(loadData.fetcher.getDataSource())) &#123;</span><br><span class="line">      dataToCache = <span class="built_in">data</span>;</span><br><span class="line">      <span class="comment">// We might be being called back on someone else's thread. Before doing anything, we should</span></span><br><span class="line">      <span class="comment">// reschedule to get back onto Glide's thread.</span></span><br><span class="line">      cb.reschedule();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      cb.onDataFetcherReady(loadData.sourceKey, <span class="built_in">data</span>, loadData.fetcher,</span><br><span class="line">          loadData.fetcher.getDataSource(), originalKey);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>通过以上源码，不走缓存的情况下则调用cb.onDataFetcherReady，这个cb也就是前面我们new SourceGenerator对象传入的 DecodeJob对象，也就是调用DecodeJob对象onDataFetcherReady方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**DecodeJob类的onDataFetcherReady方法 **/</span> </span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> void onDataFetcherReady(Key sourceKey, Object <span class="keyword">data</span>, DataFetcher&lt;?&gt; fetcher,</span><br><span class="line">      DataSource dataSource, Key attemptedKey) &#123;</span><br><span class="line">    <span class="keyword">this</span>.currentSourceKey = sourceKey;</span><br><span class="line">    <span class="keyword">this</span>.currentData = <span class="keyword">data</span>;</span><br><span class="line">    <span class="keyword">this</span>.currentFetcher = fetcher;</span><br><span class="line">    <span class="keyword">this</span>.currentDataSource = dataSource;</span><br><span class="line">    <span class="keyword">this</span>.currentAttemptingKey = attemptedKey;</span><br><span class="line">    <span class="keyword">if</span> (Thread.currentThread() != currentThread) &#123;</span><br><span class="line">      runReason = RunReason.DECODE_DATA;</span><br><span class="line">      callback.reschedule(<span class="keyword">this</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      GlideTrace.beginSection(<span class="string">"DecodeJob.decodeFromRetrievedData"</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        decodeFromRetrievedData();</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        GlideTrace.endSection();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>通过以上源码，onDataFetcherReady方法中将之前网络请求得到的流赋值给当前的DecodeJob对象的currentData，其他数据都赋值给对应字段，最终调用的是<strong>decodeFromRetrievedData方法</strong></p><h5 id="加载图片（解码，转码）"><a href="#加载图片（解码，转码）" class="headerlink" title="加载图片（解码，转码）"></a>加载图片（解码，转码）</h5><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**DecodeJob类的decodeFromRetrievedData方法 **/</span> </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">decodeFromRetrievedData</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</span><br><span class="line">      logWithTimeAndKey(<span class="string">"Retrieved data"</span>, startFetchTime,</span><br><span class="line">          <span class="string">"data: "</span> + currentData</span><br><span class="line">              + <span class="string">", cache key: "</span> + currentSourceKey</span><br><span class="line">              + <span class="string">", fetcher: "</span> + currentFetcher);</span><br><span class="line">    &#125;</span><br><span class="line">    Resource&lt;R&gt; resource = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      resource = decodeFromData(currentFetcher, currentData, currentDataSource);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (GlideException e) &#123;</span><br><span class="line">      e.setLoggingDetails(currentAttemptingKey, currentDataSource);</span><br><span class="line">      throwables.<span class="keyword">add</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (resource != <span class="literal">null</span>) &#123;</span><br><span class="line">      notifyEncodeAndRelease(resource, currentDataSource);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      runGenerators();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/**DecodeJob类的decodeFromData方法 **/</span>   </span><br><span class="line"><span class="keyword">private</span> &lt;Data&gt; <span class="function">Resource&lt;R&gt; <span class="title">decodeFromData</span>(<span class="params">DataFetcher&lt;?&gt; fetcher, Data data,</span></span></span><br><span class="line"><span class="function"><span class="params">      DataSource dataSource</span>) throws GlideException</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (data == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">long</span> startTime = LogTime.getLogTime();</span><br><span class="line">      Resource&lt;R&gt; result = decodeFromFetcher(data, dataSource);</span><br><span class="line">      <span class="keyword">if</span> (Log.isLoggable(TAG, Log.VERBOSE)) &#123;</span><br><span class="line">        logWithTimeAndKey(<span class="string">"Decoded result "</span> + result, startTime);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      fetcher.cleanup();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/**DecodeJob类的decodeFromFetcher方法 **/</span>  </span><br><span class="line"> <span class="keyword">private</span> &lt;Data&gt; <span class="function">Resource&lt;R&gt; <span class="title">decodeFromFetcher</span>(<span class="params">Data data, DataSource dataSource</span>)</span></span><br><span class="line"><span class="function">      throws GlideException</span> &#123;</span><br><span class="line">    LoadPath&lt;Data, ?, R&gt; path = decodeHelper.getLoadPath((Class&lt;Data&gt;) data.getClass());</span><br><span class="line">    <span class="keyword">return</span> runLoadPath(data, dataSource, path);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>通过以上源码，decodeFromRetrievedData方法调用了decodeFromFetcher方法，在该方法中首先通过decodeHelper.getLoadPath获取LoadPath对象，LoadPath对象其实是根据我们传入的处理数据来返回特定的数据解码转码处理器，我们跟进decodeHelper.getLoadPath看看</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** DecodeHelper类的getLoadPath方法*/</span></span><br><span class="line">&lt;Data&gt; LoadPath&lt;Data, ?, Transcode&gt; getLoadPath(<span class="class"><span class="keyword">Class</span>&lt;<span class="title">Data</span>&gt; <span class="title">dataClass</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> glideContext.getRegistry().getLoadPath(dataClass, resourceClass, transcodeClass);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/** Registry类的getLoadPath方法*/</span></span><br><span class="line"> @Nullable</span><br><span class="line">  <span class="keyword">public</span> &lt;Data, TResource, Transcode&gt; LoadPath&lt;Data, TResource, Transcode&gt; getLoadPath(</span><br><span class="line">      @NonNull <span class="class"><span class="keyword">Class</span>&lt;<span class="title">Data</span>&gt; <span class="title">dataClass</span>, @<span class="title">NonNull</span> <span class="title">Class</span>&lt;<span class="title">TResource</span>&gt; <span class="title">resourceClass</span>,</span></span><br><span class="line"><span class="class">      @<span class="title">NonNull</span> <span class="title">Class</span>&lt;<span class="title">Transcode</span>&gt; <span class="title">transcodeClass</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    .......</span><br><span class="line">     <span class="keyword">List</span>&lt;DecodePath&lt;Data, TResource, Transcode&gt;&gt; decodePaths =</span><br><span class="line">          getDecodePaths(dataClass, resourceClass, transcodeClass);</span><br><span class="line">      <span class="keyword">if</span> (decodePaths.isEmpty()) &#123;</span><br><span class="line">        result = <span class="keyword">null</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result =</span><br><span class="line">            <span class="keyword">new</span> LoadPath&lt;&gt;(</span><br><span class="line">                dataClass, resourceClass, transcodeClass, decodePaths, throwableListPool);</span><br><span class="line">      &#125;</span><br><span class="line">      loadPathCache.put(dataClass, resourceClass, transcodeClass, result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125; </span><br><span class="line"><span class="comment">/** Registry类的getDecodePaths方法*/</span> </span><br><span class="line">@NonNull</span><br><span class="line">  <span class="keyword">private</span> &lt;Data, TResource, Transcode&gt; <span class="keyword">List</span>&lt;DecodePath&lt;Data, TResource, Transcode&gt;&gt; getDecodePaths(</span><br><span class="line">      @NonNull <span class="class"><span class="keyword">Class</span>&lt;<span class="title">Data</span>&gt; <span class="title">dataClass</span>, @<span class="title">NonNull</span> <span class="title">Class</span>&lt;<span class="title">TResource</span>&gt; <span class="title">resourceClass</span>,</span></span><br><span class="line"><span class="class">      @<span class="title">NonNull</span> <span class="title">Class</span>&lt;<span class="title">Transcode</span>&gt; <span class="title">transcodeClass</span>) </span>&#123;</span><br><span class="line">      <span class="comment">//省略部分代码，去除干扰</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">List</span>&lt;ResourceDecoder&lt;Data, TResource&gt;&gt; decoders =</span><br><span class="line">            decoderRegistry.getDecoders(dataClass, registeredResourceClass);</span><br><span class="line">        ResourceTranscoder&lt;TResource, Transcode&gt; transcoder =</span><br><span class="line">            transcoderRegistry.get(registeredResourceClass, registeredTranscodeClass);</span><br><span class="line">        @SuppressWarnings(<span class="string">"PMD.AvoidInstantiatingObjectsInLoops"</span>)</span><br><span class="line">        DecodePath&lt;Data, TResource, Transcode&gt; path =</span><br><span class="line">            <span class="keyword">new</span> DecodePath&lt;&gt;(dataClass, registeredResourceClass, registeredTranscodeClass,</span><br><span class="line">                decoders, transcoder, throwableListPool);</span><br><span class="line">        decodePaths.add(path);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> decodePaths;</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="comment">/** Registry类的getDecoders方法*/</span>  </span><br><span class="line"> <span class="keyword">public</span> synchronized &lt;T, R&gt; <span class="keyword">List</span>&lt;ResourceDecoder&lt;T, R&gt;&gt; getDecoders(@NonNull <span class="class"><span class="keyword">Class</span>&lt;<span class="title">T</span>&gt; <span class="title">dataClass</span>,</span></span><br><span class="line"><span class="class">      @<span class="title">NonNull</span> <span class="title">Class</span>&lt;<span class="title">R</span>&gt; <span class="title">resourceClass</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">List</span>&lt;ResourceDecoder&lt;T, R&gt;&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String bucket : bucketPriorityList) &#123;</span><br><span class="line">      <span class="keyword">List</span>&lt;Entry<span class="meta">&lt;?</span>, <span class="meta">?&gt;</span>&gt; entries = decoders.get(bucket);</span><br><span class="line">      <span class="keyword">if</span> (entries == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (Entry<span class="meta">&lt;?</span>, <span class="meta">?&gt;</span> entry : entries) &#123;</span><br><span class="line">        <span class="keyword">if</span> (entry.handles(dataClass, resourceClass)) &#123;</span><br><span class="line">          result.add((ResourceDecoder&lt;T, R&gt;) entry.decoder);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> cache result list.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>通过以上源码，我们接着前面跟进DecodeHelper.getLoadPath方法，它调用了Registry对象的getLoadPath方法，Registry对象的getLoadPath方法又调用了自身的getDecodePaths方法，现在我前面提到过得我们网络请求获取的是<strong>InputStream流</strong>，所以上面源码getDecodePaths方法中Data泛型就是InputStream，在根据getDecoders方法遍历得到解码器ResourceDecoder能处理InputStream流的有StreamBitmapDecoder和StreamGifDecoder，StreamGifDecoder处理的是Gif，我们这里处理图片就之能是<strong>StreamBitmapDecoder</strong>，它将InputStream流解码成bitmap，然后能将bitmap转换成Drawable的转码器ResourceTranscoder对象则是<strong>BitmapDrawableTranscoder</strong>，最后getDecodePaths将我们刚刚分析得到的解码器和转码器传递给了新建的<strong>DecodePath对象</strong>，DecodePath对象就是用来帮助我们进行解码和转码的。</p></li><li>接着我们继续上一步的decodeFromFetcher方法，该方法返回的runLoadPath最终调用了上面获得的DecodePath对象的decode方法</li></ul><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**DecodePath类的decode方法**/</span></span><br><span class="line"><span class="keyword">public</span> Resource&lt;Transcode&gt; decode(DataRewinder&lt;DataType&gt; rewinder, <span class="built_in">int</span> <span class="built_in">width</span>, <span class="built_in">int</span> <span class="built_in">height</span>,</span><br><span class="line">      @NonNull Options options, DecodeCallback&lt;ResourceType&gt; callback) <span class="keyword">throws</span> GlideException &#123;</span><br><span class="line">    Resource&lt;ResourceType&gt; decoded = decodeResource(rewinder, <span class="built_in">width</span>, <span class="built_in">height</span>, options);</span><br><span class="line">    Resource&lt;ResourceType&gt; transformed = callback.onResourceDecoded(decoded);</span><br><span class="line">    <span class="keyword">return</span> transcoder.transcode(transformed, options);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/**DecodePath类的decodeResource方法**/</span></span><br><span class="line">@NonNull</span><br><span class="line">  <span class="keyword">private</span> Resource&lt;ResourceType&gt; decodeResource(DataRewinder&lt;DataType&gt; rewinder, <span class="built_in">int</span> <span class="built_in">width</span>,</span><br><span class="line">      <span class="built_in">int</span> <span class="built_in">height</span>, @NonNull Options options) <span class="keyword">throws</span> GlideException &#123;</span><br><span class="line">    List&lt;Throwable&gt; exceptions = Preconditions.checkNotNull(listPool.acquire());</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> decodeResourceWithList(rewinder, <span class="built_in">width</span>, <span class="built_in">height</span>, options, exceptions);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      listPool.release(exceptions);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/**DecodePath类的decodeResourceWithList方法**/</span></span><br><span class="line">  @NonNull</span><br><span class="line">  <span class="keyword">private</span> Resource&lt;ResourceType&gt; decodeResourceWithList(DataRewinder&lt;DataType&gt; rewinder, <span class="built_in">int</span> <span class="built_in">width</span>,</span><br><span class="line">      <span class="built_in">int</span> <span class="built_in">height</span>, @NonNull Options options, List&lt;Throwable&gt; exceptions) <span class="keyword">throws</span> GlideException &#123;</span><br><span class="line">    Resource&lt;ResourceType&gt; result = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    ........</span><br><span class="line">      ResourceDecoder&lt;DataType, ResourceType&gt; decoder = decoders.<span class="built_in">get</span>(i);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        DataType data = rewinder.rewindAndGet();</span><br><span class="line">        <span class="keyword">if</span> (decoder.handles(data, options)) &#123;</span><br><span class="line">          data = rewinder.rewindAndGet();</span><br><span class="line">          result = decoder.decode(data, <span class="built_in">width</span>, <span class="built_in">height</span>, options);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    ........</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><p>通过以上源码，DecodePath对象的decode方法调用了decodeResource方法，decodeResource又调用了decodeResourceWithList方法，经过前面分析，decodeResourceWithList方法中获得的decoder就是前面提到的解码器StreamBitmapDecoder对象，所以我们接着看StreamBitmapDecoder的decode方法</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**StreamBitmapDecoder类的decode方法**/</span></span><br><span class="line">@Override</span><br><span class="line">  <span class="keyword">public</span> Resource&lt;Bitmap&gt; decode(@NonNull InputStream <span class="keyword">source</span>, <span class="keyword">int</span> width, <span class="keyword">int</span> height,</span><br><span class="line">      @NonNull <span class="keyword">Options</span> <span class="keyword">options</span>)</span><br><span class="line">      <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use to fix the mark limit to avoid allocating buffers that fit entire images.</span></span><br><span class="line">    <span class="keyword">final</span> RecyclableBufferedInputStream bufferedStream;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> ownsBufferedStream;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">source</span> <span class="keyword">instanceof</span> RecyclableBufferedInputStream) &#123;</span><br><span class="line">      bufferedStream = (RecyclableBufferedInputStream) <span class="keyword">source</span>;</span><br><span class="line">      ownsBufferedStream = <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      bufferedStream = <span class="keyword">new</span> RecyclableBufferedInputStream(<span class="keyword">source</span>, byteArrayPool);</span><br><span class="line">      ownsBufferedStream = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ExceptionCatchingInputStream exceptionStream =</span><br><span class="line">        ExceptionCatchingInputStream.obtain(bufferedStream);</span><br><span class="line">    MarkEnforcingInputStream invalidatingStream = <span class="keyword">new</span> MarkEnforcingInputStream(exceptionStream);</span><br><span class="line">    UntrustedCallbacks callbacks = <span class="keyword">new</span> UntrustedCallbacks(bufferedStream, exceptionStream);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> downsampler.decode(invalidatingStream, width, height, <span class="keyword">options</span>, callbacks);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      exceptionStream.release();</span><br><span class="line">      <span class="keyword">if</span> (ownsBufferedStream) &#123;</span><br><span class="line">        bufferedStream.release();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>通过以上源码，StreamBitmapDecoder的decode方法中只是对InputStream进行包装（<strong>装饰模式</strong>），可以让Glide进行更多操作，最终调用了downsampler.decode，这个downsampler对象则是Downsampler对象（英文注释：Downsamples, decodes, and rotates images according to their exif orientation.），英文注释大致意思是对图像exif格式进行采样、解码和旋转。而我们这里调用了它的decode方法，也就是对我们前面包装的流进行解码</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**Downsampler类的decode方法**/</span></span><br><span class="line"><span class="keyword">public</span> Resource&lt;Bitmap&gt; decode(InputStream is, <span class="keyword">int</span> requestedWidth, <span class="keyword">int</span> requestedHeight,</span><br><span class="line">      <span class="keyword">Options</span> <span class="keyword">options</span>, DecodeCallbacks callbacks) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Bitmap result = decodeFromWrappedStreams(is, bitmapFactoryOptions,</span><br><span class="line">          downsampleStrategy, decodeFormat, isHardwareConfigAllowed, requestedWidth,</span><br><span class="line">          requestedHeight, fixBitmapToRequestedDimensions, callbacks);</span><br><span class="line">      <span class="keyword">return</span> BitmapResource.obtain(result, bitmapPool);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      releaseOptions(bitmapFactoryOptions);</span><br><span class="line">      byteArrayPool.put(bytesForOptions);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/**Downsampler类的decodeFromWrappedStreams方法**/</span>  </span><br><span class="line"><span class="keyword">private</span> Bitmap decodeFromWrappedStreams(InputStream is,</span><br><span class="line">      BitmapFactory.<span class="keyword">Options</span> <span class="keyword">options</span>, DownsampleStrategy downsampleStrategy,</span><br><span class="line">      DecodeFormat decodeFormat, <span class="keyword">boolean</span> isHardwareConfigAllowed, <span class="keyword">int</span> requestedWidth,</span><br><span class="line">      <span class="keyword">int</span> requestedHeight, <span class="keyword">boolean</span> fixBitmapToRequestedDimensions,</span><br><span class="line">      DecodeCallbacks callbacks) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    .........</span><br><span class="line">    Bitmap downsampled = decodeStream(is, <span class="keyword">options</span>, callbacks, bitmapPool);</span><br><span class="line">    callbacks.onDecodeComplete(bitmapPool, downsampled);</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    .........</span><br><span class="line">    Bitmap rotated = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (downsampled != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">//缩放效正处理</span></span><br><span class="line">      downsampled.setDensity(displayMetrics.densityDpi);</span><br><span class="line">      rotated = TransformationUtils.rotateImageExif(bitmapPool, downsampled, orientation);</span><br><span class="line">      <span class="keyword">if</span> (!downsampled.equals(rotated)) &#123;</span><br><span class="line">        bitmapPool.put(downsampled);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rotated;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/**Downsampler类的decodeStream方法**/</span>  </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Bitmap decodeStream(InputStream is, BitmapFactory.<span class="keyword">Options</span> <span class="keyword">options</span>,</span><br><span class="line">      DecodeCallbacks callbacks, BitmapPool bitmapPool) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">options</span>.inJustDecodeBounds) &#123;</span><br><span class="line">      is.mark(MARK_POSITION);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      callbacks.onObtainBounds();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> sourceWidth = <span class="keyword">options</span>.outWidth;</span><br><span class="line">    <span class="keyword">int</span> sourceHeight = <span class="keyword">options</span>.outHeight;</span><br><span class="line">    String outMimeType = <span class="keyword">options</span>.outMimeType;</span><br><span class="line">    <span class="keyword">final</span> Bitmap result;</span><br><span class="line">    TransformationUtils.getBitmapDrawableLock().lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      result = BitmapFactory.decodeStream(is, <span class="keyword">null</span>, <span class="keyword">options</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">      <span class="comment">//省略部分代码</span></span><br><span class="line">    .........</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>通过以上源码，Downsampler对象的decode方法首先调用了decodeFromWrappedStreams方法，在decodeFromWrappedStreams方法中又调用了decodeStream方法，在该方法中调用用了BitmapFactory.decodeStream，到这里我们终于看到了Glide将InputStream流解析成了bitmap，而最终Downsampler对象的decode方法返回的Resource对象就是BitmapResource对象</p></li><li><p>经过前面的分析，Glide已经将InputStream<strong>解码完成</strong>，这时我们还得再次回到DecodePath对象的decode方法，解码完成还需转码，这里再次贴一下ecodePath对象的decode方法，前面已经分析了转码器为BitmapDrawableTranscoder对象，所以我们继续看BitmapDrawableTranscoder对象transcode做了什么操作</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**DecodePath类的decode方法**/</span>  </span><br><span class="line"><span class="keyword">public</span> Resource&lt;Transcode&gt; decode(DataRewinder&lt;DataType&gt; rewinder, <span class="keyword">int</span> width, <span class="keyword">int</span> height,</span><br><span class="line">      @NonNull <span class="keyword">Options</span> <span class="keyword">options</span>, DecodeCallback&lt;ResourceType&gt; callback) <span class="keyword">throws</span> GlideException &#123;</span><br><span class="line">    Resource&lt;ResourceType&gt; decoded = decodeResource(rewinder, width, height, <span class="keyword">options</span>);</span><br><span class="line">    Resource&lt;ResourceType&gt; transformed = callback.onResourceDecoded(decoded);</span><br><span class="line">    <span class="keyword">return</span> transcoder.transcode(transformed, <span class="keyword">options</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/**BitmapDrawableTranscoder类的transcode方法**/</span>  </span><br><span class="line"><span class="keyword">public</span> Resource&lt;BitmapDrawable&gt; transcode(@NonNull Resource&lt;Bitmap&gt; toTranscode,</span><br><span class="line">      @NonNull <span class="keyword">Options</span> <span class="keyword">options</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> LazyBitmapDrawableResource.obtain(resources, toTranscode);</span><br><span class="line">  &#125; </span><br><span class="line"><span class="comment">/**LazyBitmapDrawableResource类的obtain方法**/</span>  </span><br><span class="line">@Nullable</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Resource&lt;BitmapDrawable&gt; obtain(</span><br><span class="line">      @NonNull Resources resources, @Nullable Resource&lt;Bitmap&gt; bitmapResource) &#123;</span><br><span class="line">    <span class="keyword">if</span> (bitmapResource == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LazyBitmapDrawableResource(resources, bitmapResource);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>通过以上源码，BitmapDrawableTranscoder对象transcode方法最终返回了<strong>LazyBitmapDrawableResource</strong>对象，也就是将我们解码拿到的BitmapResource对象转换成了<strong>LazyBitmapDrawableResource</strong>对象</p><blockquote><p>到此，Glide整个图片解码转码已近完成，接着我们再回到DecodeJob对象的decodeFromRetrievedData方法</p></blockquote></li></ul><h5 id="图片显示"><a href="#图片显示" class="headerlink" title="图片显示"></a>图片显示</h5><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**DecodeJob类的decodeFromRetrievedData方法**/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">decodeFromRetrievedData</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    Resource&lt;R&gt; resource = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      resource = decodeFromData(currentFetcher, currentData, currentDataSource);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (GlideException e) &#123;</span><br><span class="line">      e.setLoggingDetails(currentAttemptingKey, currentDataSource);</span><br><span class="line">      throwables.<span class="keyword">add</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (resource != <span class="literal">null</span>) &#123;</span><br><span class="line">      notifyEncodeAndRelease(resource, currentDataSource);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      runGenerators();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/**DecodeJob类的notifyEncodeAndRelease方法**/</span>  </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifyEncodeAndRelease</span>(<span class="params">Resource&lt;R&gt; resource, DataSource dataSource</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    .....</span><br><span class="line">    Resource&lt;R&gt; result = resource;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    .....</span><br><span class="line">    notifyComplete(result, dataSource);</span><br><span class="line">    stage = Stage.ENCODE;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    .....</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/**DecodeJob类的notifyComplete方法**/</span>    </span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifyComplete</span>(<span class="params">Resource&lt;R&gt; resource, DataSource dataSource</span>)</span> &#123;</span><br><span class="line">    setNotifiedOrThrow();</span><br><span class="line">    callback.onResourceReady(resource, dataSource);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><p>通过以上源码，DecodeJob对象的decodeFromRetrievedData方法调用notifyEncodeAndRelease方法，将我们上一步获取的LazyBitmapDrawableResource传入notifyComplete方法中，在notifyComplete调用了callback.onResourceReady，而这个callback对象就是EngineJob对象（它实现了DecodeJob.Callback接口），也许到这里你已经忘了EngineJob对象是什么，前面我们开启线程执行加载的start方法就在EngineJob对象中，所以我们去看看EngineJob对象的onResourceReady方法</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Handler MAIN_THREAD_HANDLER =</span><br><span class="line">      <span class="keyword">new</span> Handler(Looper.getMainLooper(), <span class="keyword">new</span> MainThreadCallback());</span><br><span class="line"><span class="comment">/**EngineJob类的onResourceReady方法**/</span></span><br><span class="line">@Override</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> onResourceReady(Resource&lt;R&gt; resource, DataSource dataSource) &#123;</span><br><span class="line">    <span class="keyword">this</span>.resource = resource;</span><br><span class="line">    <span class="keyword">this</span>.dataSource = dataSource;</span><br><span class="line">    MAIN_THREAD_HANDLER.obtainMessage(MSG_COMPLETE, <span class="keyword">this</span>).sendToTarget();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/**EngineJob类的handleMessage方法**/</span></span><br><span class="line"> @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> handleMessage(Message message) &#123;</span><br><span class="line">      EngineJob&lt;?&gt; job = (EngineJob&lt;?&gt;) message.obj;</span><br><span class="line">      <span class="keyword">switch</span> (message.what) &#123;</span><br><span class="line">        <span class="keyword">case</span> MSG_COMPLETE:</span><br><span class="line">          job.handleResultOnMainThread();</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MSG_EXCEPTION:</span><br><span class="line">          job.handleExceptionOnMainThread();</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> MSG_CANCELLED:</span><br><span class="line">          job.handleCancelledOnMainThread();</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unrecognized message: "</span> + message.what);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; </span><br><span class="line"><span class="comment">/**EngineJob类的handleResultOnMainThread方法**/</span>    </span><br><span class="line"> @Synthetic</span><br><span class="line">  <span class="keyword">void</span> handleResultOnMainThread() &#123;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    ......</span><br><span class="line">    engineResource = engineResourceFactory.build(resource, isCacheable);</span><br><span class="line">    hasResource = <span class="keyword">true</span>;</span><br><span class="line">   <span class="comment">//省略部分代码</span></span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>, <span class="built_in">size</span> = cbs.<span class="built_in">size</span>(); i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">      ResourceCallback cb = cbs.<span class="built_in">get</span>(i);</span><br><span class="line">      <span class="keyword">if</span> (!isInIgnoredCallbacks(cb)) &#123;</span><br><span class="line">        engineResource.acquire();</span><br><span class="line">        cb.onResourceReady(engineResource, dataSource);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    ......</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/**EngineJob类的addCallback方法**/</span> </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;ResourceCallback&gt; cbs = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">void</span> addCallback(ResourceCallback cb) &#123;</span><br><span class="line">    Util.assertMainThread();</span><br><span class="line">    stateVerifier.throwIfRecycled();</span><br><span class="line">    <span class="keyword">if</span> (hasResource) &#123;</span><br><span class="line">      cb.onResourceReady(engineResource, dataSource);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hasLoadFailed) &#123;</span><br><span class="line">      cb.onLoadFailed(exception);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      cbs.<span class="built_in">add</span>(cb);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>通过以上源码，前面我们在Engine类的Load方法中已经将SingleRequest这个对象通过EngineJob对象的addCallback方法加入到了cbs这个List当中，EngineJob对象的onResourceReady方法中将我们加载好的图片对象通过Hanlder将数据又传递到了主线程（主线程更新UI），也就是handleResultOnMainThread方法中根据我们刚刚的分析通过cb.onResourceReady将数据回调通知，cb对象就是SingleRequest对象，我们接着看SingleRequest对象的onResourceReady回调方法</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**SingleRequest类的onResourceReady回调方法**/</span></span><br><span class="line">@SuppressWarnings(<span class="string">"unchecked"</span>)</span><br><span class="line">@Override</span><br><span class="line">public void onResourceReady(Resource&lt;?&gt; resource, DataSource dataSource) &#123;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    .......</span><br><span class="line">    Object received = resource.get();</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    .......</span><br><span class="line">    onResourceReady((Resource&lt;R&gt;) resource, (R) received, dataSource);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/**SingleRequest类的onResourceReady方法**/</span>  </span><br><span class="line">private void onResourceReady(Resource&lt;R&gt; resource, R result, DataSource dataSource) &#123;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    .......</span><br><span class="line">    status = Status.COMPLETE;</span><br><span class="line">    this.resource = resource;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    .......</span><br><span class="line">      <span class="keyword">if</span> (!anyListenerHandledUpdatingTarget) &#123;</span><br><span class="line">        Transition&lt;? super R&gt; animation =</span><br><span class="line">            animationFactory.build(dataSource, isFirstResource);</span><br><span class="line">        target.onResourceReady(result, animation);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    .......</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><p>通过以上源码，这时候我们已经可以看到长征胜利的曙光了，SingleRequest对象的onResourceReady回调方法中调用了resource.get()，而这个resource就是前面我们经过解码、转码获取的<strong>LazyBitmapDrawableResource对象</strong>，然后又调用了SingleRequest对象的onResourceReady私有方法，在该方法中又调用了target.onResourceReady方法，在我们最开始进入into方法的时候我们已经分析过创建的target对象就是<strong>DrawableImageViewTarget对象</strong>，它继承了抽象类<strong>ImageViewTarget</strong>，所以我们看看抽象类ImageViewTarget的onResourceReady方法<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** LazyBitmapDrawableResource类的get()方法**/</span></span><br><span class="line"><span class="variable">@NonNull</span></span><br><span class="line">  <span class="variable">@Override</span></span><br><span class="line">  public BitmapDrawable get() &#123;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">new</span> <span class="selector-tag">BitmapDrawable</span>(resources, bitmapResource.get());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** ImageViewTarget类的onResourceReady方法**/</span></span><br><span class="line"> @<span class="selector-tag">Override</span></span><br><span class="line">  <span class="selector-tag">public</span> <span class="selector-tag">void</span> <span class="selector-tag">onResourceReady</span>(<span class="variable">@NonNull</span> Z resource, <span class="variable">@Nullable</span> Transition&lt;? super Z&gt; transition) &#123;</span><br><span class="line">    <span class="selector-tag">if</span> (transition == null || !transition.transition(resource, this)) &#123;</span><br><span class="line">      <span class="selector-tag">setResourceInternal</span>(resource);</span><br><span class="line">    &#125; <span class="selector-tag">else</span> &#123;</span><br><span class="line">      <span class="selector-tag">maybeUpdateAnimatable</span>(resource);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">/** ImageViewTarget类的setResourceInternal方法**/</span>  </span><br><span class="line"> <span class="selector-tag">private</span> <span class="selector-tag">void</span> <span class="selector-tag">setResourceInternal</span>(<span class="variable">@Nullable</span> Z resource) &#123;</span><br><span class="line">    <span class="comment">// Order matters here. Set the resource first to make sure that the Drawable has a valid and</span></span><br><span class="line">    <span class="comment">// non-null Callback before starting it.</span></span><br><span class="line">    <span class="selector-tag">setResource</span>(resource);</span><br><span class="line">    <span class="selector-tag">maybeUpdateAnimatable</span>(resource);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">protected</span> <span class="selector-tag">abstract</span> <span class="selector-tag">void</span> <span class="selector-tag">setResource</span>(<span class="variable">@Nullable</span> Z resource);</span><br></pre></td></tr></table></figure></p><ul><li>通过以上源码，LazyBitmapDrawableResource对象的get()方法获取了BitmapDrawable（实际就是Drawable对象），ImageViewTarget对象的onResourceReady方法通过前面分析被调用，然后该方法再调用了ImageViewTarget对象setResourceInternal方法，setResourceInternal方法最终setResource方法，setResource在ImageViewTarget对象是抽象方法，它在DrawableImageViewTarget对象中实现，最后我们看看DrawableImageViewTarget对象setResource方法<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Override</span></span><br><span class="line"> protected void setResource(<span class="variable">@Nullable</span> Drawable resource) &#123;</span><br><span class="line">   <span class="selector-tag">view</span><span class="selector-class">.setImageDrawable</span>(resource);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>到此，我们的万里长征终于结束了一半，Glide的简单加载图片流程已经分析完了。</p></blockquote><h2 id="最后说点"><a href="#最后说点" class="headerlink" title="最后说点"></a>最后说点</h2><ul><li><p>最后我还是想要把那句简单的代码给贴出来</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Glide</span><span class="selector-class">.with</span>(<span class="selector-tag">Context</span>)<span class="selector-class">.load</span>(<span class="selector-tag">IMAGE_URL</span>)<span class="selector-class">.into</span>(<span class="selector-tag">mImageView</span>);</span><br></pre></td></tr></table></figure></li><li><p>就是这样一句简单的代码，它背后所走的逻辑却让人头皮发麻，此时我只想说一句话“read the fuck source code”。前面我们只是分析了Glide简单的加载图片流程，它的缓存使用，各种变换，回调和各种功能原理还没分析到，这只能等到下篇文章了。文章中如果有错误，请大家给我提出来，大家一起学习进步，如果觉得我的文章给予你帮助，也请给我一个喜欢和关注，同时也欢迎访问我的<a href="https://www.maoqitian.com"><strong>个人博客</strong></a>。</p></li><li>对本文感兴趣的朋友请继续阅读<a href="https://www.maoqitian.com/2019/02/19/%E4%BB%8E%E6%BA%90%E7%A0%81%E8%A7%92%E5%BA%A6%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3glide%EF%BC%88%E4%B8%8B%EF%BC%89/">从源码角度深入理解Glide（下）</a></li><li><p>参考链接</p><ul><li><a href="http://bumptech.github.io/glide/" target="_blank" rel="noopener">Gldie文档</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/bumptech/glide/master/static/glide_logo.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;谈到Glide，从英文字面意思有滑行、滑动的意思；而Android从开发的角度我们知道它是一款图片加载框架，这里引用官方文档的一句话“Glide是一个快速高效的Android图片加载库，注重于平滑的滚动”，从官方文档介绍我们了解到用Glide框架来加载图片是快速并且高效的，接下来就来通过简单使用Glide和源码理解两个方面看看Glide是否是快速和高效（文中代码基于Glide 4.8版本）。&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android热门框架解析" scheme="https://www.maoqitian.com/categories/Android%E7%83%AD%E9%97%A8%E6%A1%86%E6%9E%B6%E8%A7%A3%E6%9E%90/"/>
    
    
      <category term="Android" scheme="https://www.maoqitian.com/tags/Android/"/>
    
      <category term="源码分析" scheme="https://www.maoqitian.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="Glide" scheme="https://www.maoqitian.com/tags/Glide/"/>
    
      <category term="图片加载" scheme="https://www.maoqitian.com/tags/%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
</feed>
