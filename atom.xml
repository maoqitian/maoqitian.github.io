<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>maoqitian</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.maoqitian.com/"/>
  <updated>2019-01-30T12:52:04.475Z</updated>
  <id>https://www.maoqitian.com/</id>
  
  <author>
    <name>maoqitian</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深入理解Android事件分发机制</title>
    <link href="https://www.maoqitian.com/2019/01/30/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Android%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/"/>
    <id>https://www.maoqitian.com/2019/01/30/深入理解Android事件分发机制/</id>
    <published>2019-01-30T12:46:12.000Z</published>
    <updated>2019-01-30T12:52:04.475Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在理解事件分发机制之前，我们先要明白，事件分发机制是为View服务的，而View是Android中所有控件的基类，View可以是单个的，而多个View组成可以叫做ViewGroup。不管什么View控件，他们基类都是View，在Android多个View的叠加有点像Web中的DOM树形结构，所以当我们点击一个区域有多个View的情况下，<strong>到底这时候该哪个View来响应我们的点击事件呢？事件分发机制就是为了解决这个问题而产生的。</strong><br><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/ViewGroup%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.png" alt="ViewGroup官方文档集成关系"><br><a id="more"></a></p></blockquote><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><ul><li>理解事件分发机制，首先我们要了解事件是什么，这里事件主要指我们操作手机的触摸事件。在Android中所有的输入事件都放在了MotionEvent中。</li><li>MotionEvent是个很庞大的东西，有单点触控、多点触控、鼠标事件等等，这里简单列出基本的单点事件，不做更多深入讨论。</li></ul><table><thead><tr><th>事件</th><th>简介 </th></tr></thead><tbody><tr><td>ACTION_DOWN</td><td>手指<strong>初次接触到屏幕</strong>时触发  </td></tr><tr><td>ACTION_MOVE</td><td>手指在<strong>屏幕上滑动</strong>时触发，会会多次触发</td></tr><tr><td>ACTION_UP</td><td>手指<strong>离开屏幕</strong>时触发</td></tr><tr><td>ACTION_CANCEL</td><td>事件<strong>被上层拦截</strong>时触发</td></tr></tbody></table><ul><li>正常情况下触摸一次屏幕触发事件序列为ACTION_DOWN–&gt;ACTION_UP</li><li>有滑动动作的单点序列为ACTION_DOWN–&gt;ACTION_MOVE ….. ACTION_MOVE–&gt;ACTION_UP</li></ul><h2 id="点击事件分发流程"><a href="#点击事件分发流程" class="headerlink" title="点击事件分发流程"></a>点击事件分发流程</h2><h3 id="事件分发机制场景例子"><a href="#事件分发机制场景例子" class="headerlink" title="事件分发机制场景例子"></a>事件分发机制场景例子</h3><ul><li><p>首先我们来看一个比较有意思的例子来带入，我们定义一个公司的几个角色</p></li><li><p>老板（Activity）</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by maoqitian on 2018/5/10 0010.</span></span><br><span class="line"><span class="comment"> * 事件分发机制测试 老板</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatchTouchEventTestActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = Action.TAG1;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">protected</span> <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">  setContentView(R.layout.activity_dispatch_touch_event_test);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//Actiivty 只有 dispatchTouchEvent 和 onTouchEvent 方法</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (ev.getAction() == MotionEvent.ACTION_DOWN)&#123;</span><br><span class="line">      Log.i(TAG,Action.dispatchTouchEvent+<span class="string">"经理,现在项目做到什么程度了?"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">dispatchTouchEvent</span><span class="params">(ev)</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (event.getAction() == MotionEvent.ACTION_DOWN)&#123;</span><br><span class="line">      Log.i(TAG, Action.onTouchEvent);</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onTouchEvent</span><span class="params">(event)</span></span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>经理（RootView）</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 经理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RootView</span> <span class="keyword">extends</span> <span class="title">RelativeLayout</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = Action.TAG2;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">RootView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>(context);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">RootView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>(context, attrs);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">RootView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (ev.getAction() == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">      Log.i(TAG, Action.dispatchTouchEvent + <span class="string">"技术部,你们的app快做完了么?"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">dispatchTouchEvent</span><span class="params">(ev)</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (ev.getAction() == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">       Action.onInterceptTouchEvent+<span class="string">"老板问项目进度"</span> );</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onInterceptTouchEvent</span><span class="params">(ev)</span></span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (event.getAction() == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">      Log.i(TAG, Action.onTouchEvent +<span class="string">"....."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onTouchEvent</span><span class="params">(event)</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>组长（ViewGroup）</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 组长</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewGroupA</span> <span class="keyword">extends</span> <span class="title">RelativeLayout</span> </span>&#123;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = Action.TAG3;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ViewGroupA</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>(context);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ViewGroupA</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>(context, attrs);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ViewGroupA</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (ev.getAction() == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">      Log.i(TAG, Action.dispatchTouchEvent + <span class="string">"项目进度?"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">dispatchTouchEvent</span><span class="params">(ev)</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (ev.getAction() == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">      Log.i(TAG, Action.onInterceptTouchEvent + <span class="string">"我问问程序员"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onInterceptTouchEvent</span><span class="params">(ev)</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (event.getAction() == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">      Log.i(TAG, Action.onTouchEvent);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onTouchEvent</span><span class="params">(event)</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>程序员（View1）</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 码农</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">View1</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = Action.TAG4;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">View1</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">super</span>(context);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">View1</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>(context, attrs);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">View1</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//View最为事件传递的最末端，要么消费掉事件，要么不处理进行回传，根本没必要进行事件拦截</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (event.getAction() == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">      Log.i(TAG, Action.dispatchTouchEvent+<span class="string">"app完成进度么？"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">dispatchTouchEvent</span><span class="params">(event)</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (event.getAction() == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">      Log.i(TAG, Action.onTouchEvent+<span class="string">"做好了."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>扫地阿姨（View2）</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 扫地阿姨</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">View2</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = Action.TAG5;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">View2</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>(context);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">View2</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>(context, attrs);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">View2</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(event.getAction() == MotionEvent.ACTION_DOWN)&#123;</span><br><span class="line">      Log.i(TAG, Action.dispatchTouchEvent+<span class="string">"我只是个扫地阿姨，我不懂你说什么"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">dispatchTouchEvent</span><span class="params">(event)</span></span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (event.getAction() == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">      Log.i(TAG, Action.onTouchEvent+<span class="string">"经理你问错人了，去问老板吧"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onTouchEvent</span><span class="params">(event)</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/Demo%E6%88%AA%E5%9B%BE.png" alt="Demo界面截图"></p><ul><li><strong>场景一</strong>：老板询问App项目进度，事件经过每个领导传递到达程序员处，程序员完成了项目（点击事件被View1消费了）</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/%E5%9C%BA%E6%99%AF%E4%B8%80%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt="场景一运行结果"></p><ul><li><strong>场景二</strong> ：老板异想天开，想造宇宙飞船，事件经过每个领导传递到达程序员处，程序员表示做不了，反馈给老板（事件没有被消费）<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.getAction() == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">        Log.i(TAG, Action.onTouchEvent+<span class="string">"这个真心做不了啊，把我做了吧"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">return</span> <span class="keyword">super</span>.<span class="title">onTouchEvent</span><span class="params">(event)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/%E5%9C%BA%E6%99%AF%E4%BA%8C%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt="场景二运行截图"></p><ul><li><strong>场景三</strong>：老板询问技术部本月表现，只需要组长汇报就行，不需要通知程序员（ViewGroup 拦截并消费了事件）<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ev.getAction() == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">        Log.i(TAG, Action.onInterceptTouchEvent + <span class="string">"我看看组员绩效情况"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">//return super.onInterceptTouchEvent(ev);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">//拦截事件 onTouchEvent 中进行处理</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.getAction() == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">         Action.onTouchEvent+<span class="string">"技术部组员最近表现都很好,项目按时完成，没有迟到早退"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">//消费事件 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/%E5%9C%BA%E6%99%AF%E4%B8%89%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt="场景三运行截图"></p><h3 id="事件分发机制的三个重要方法"><a href="#事件分发机制的三个重要方法" class="headerlink" title="事件分发机制的三个重要方法"></a>事件分发机制的三个重要方法</h3><ul><li>从这三个场景我们可看出事件分发机制主要有三个方法来处理<h4 id="public-boolean-dispatchTouchEvent-MotionEvent-ev"><a href="#public-boolean-dispatchTouchEvent-MotionEvent-ev" class="headerlink" title="public boolean dispatchTouchEvent(MotionEvent ev)"></a>public boolean dispatchTouchEvent(MotionEvent ev)</h4><ul><li>该方法的作用是事件的分发，返回结果表示是否消耗事件，消耗则会调用当前View的onTouchEvent，否则传递事件，调用子View的dispatchTouchEvent方法，只要时间传递到该View，dispatchTouchEvent方法必定是会被首先调用的。<h4 id="public-boolean-onInterceptTouchEvent-MotionEvent-ev"><a href="#public-boolean-onInterceptTouchEvent-MotionEvent-ev" class="headerlink" title="public boolean onInterceptTouchEvent(MotionEvent ev)"></a>public boolean onInterceptTouchEvent(MotionEvent ev)</h4></li></ul></li><li>该方法表示是否对分发的事件进行拦截，如果进行了拦截，则该方法在这一次的时间传递序列中奖不会被再调用，该方法在dispatchTouchEvent被调用，我们需要注意一点，View是没有该方法的，View是单个的，我们可以理解它为事件传递的终点，终点要么消费事件，要么不消费事件把事件进行回传，而ViewGroup则包含不止一个View，所以他可以把时间传递给子View，也可以拦截事件自己处理不传递给子View。</li></ul><h4 id="public-boolean-onTouchEvent-MotionEvent-event"><a href="#public-boolean-onTouchEvent-MotionEvent-event" class="headerlink" title="public boolean onTouchEvent(MotionEvent event)"></a>public boolean onTouchEvent(MotionEvent event)</h4><ul><li>该方法表示处理拦截的事件，如果不进行处理（事件消耗），也就是不反回true，则当前View不会再次接收到该事件</li></ul><h4 id="三个方法之间的关系"><a href="#三个方法之间的关系" class="headerlink" title="三个方法之间的关系"></a>三个方法之间的关系</h4><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">boolean</span> isDispatch;</span><br><span class="line"> <span class="keyword">if</span>(onInterceptTouchEvent(ev))&#123;</span><br><span class="line">    isDispatch=onTouchEvent(ev);</span><br><span class="line"> &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    isDispatch=childView.dispatchTouchEvent(ev);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> isDispatch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结合这段伪代码和前面的例子的场景三，我们可以发现ViewGroup的事件分发规则是这样的，时间传递到ViewGroup首先调用它的dispatchTouchEvent方法，接下来是调用onInterceptTouchEvent方法，如果该方法但会true，则说明当前ViewGroup要拦截该事件，拦截之后则调用当前ViewGroup的onTouchEvent方法，如果不进行拦截则调用子View的dispatchTouchEvent方法，结合场景二，如果到最后事件都没有被消费掉，则最后返回Activity，Activity不处理则事件消失。</li><li>结合场景一、场景二，View接收到事件，如果进行处理，则直接在onTouchEvent进行处理返回true就表示事件被消费了，不进行处理则调用父类onTouchEvent方法或者返回false表示不消费该事件，然后事件再原路返回向上传递。<h3 id="Activity-传递事件"><a href="#Activity-传递事件" class="headerlink" title="Activity 传递事件"></a>Activity 传递事件</h3></li><li>前面我们只是描述了ViewGroup和View之间的时间传递，我们看到例子中的场景事件都是从老板（Activity）开始的，而Activity本身并不是继承View，所以我们需要了解Activity是如何把事件传递到View的，从源码的角度来看是比较清晰的，下面一起来看看。</li><li><p>Activity 本身并不是View，那他去哪里加载View呢？setContentView()这个方法相信大家都不陌生，他加载我们的布局，布局中包括控件，也就是加载我们的View，</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Set the activity content from a layout resource.  The resource will be</span></span><br><span class="line"><span class="comment">  * inflated, adding all top-level views to the activity.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * @param layoutResID Resource ID to be inflated.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * @see #setContentView(android.view.View)</span></span><br><span class="line"><span class="comment">  * @see #setContentView(android.view.View, android.view.ViewGroup.LayoutParams)</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="selector-tag">public</span> <span class="selector-tag">void</span> <span class="selector-tag">setContentView</span>(<span class="variable">@LayoutRes</span> int layoutResID) &#123;</span><br><span class="line">     <span class="selector-tag">getWindow</span>()<span class="selector-class">.setContentView</span>(layoutResID);</span><br><span class="line">     <span class="selector-tag">initWindowDecorActionBar</span>();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>我们可以看到调用的是 getWindow().setContentView(layoutResID)这个方法，继续找getWindow()</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  * Retrieve <span class="keyword">the</span> current &#123;@link android.view.Window&#125; <span class="keyword">for</span> <span class="keyword">the</span> activity.</span><br><span class="line">  * This can be used <span class="keyword">to</span> directly access parts <span class="keyword">of</span> <span class="keyword">the</span> Window API <span class="keyword">that</span></span><br><span class="line">  * are <span class="keyword">not</span> available <span class="keyword">through</span> Activity/Screen.</span><br><span class="line">  *</span><br><span class="line">  * @<span class="literal">return</span> Window The current window, <span class="keyword">or</span> null <span class="keyword">if</span> <span class="keyword">the</span> activity <span class="keyword">is</span> <span class="keyword">not</span></span><br><span class="line">  *         visual.</span><br><span class="line">  */</span><br><span class="line"> public Window getWindow() &#123;</span><br><span class="line"><span class="built_in">     return</span> mWindow;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>getWindow()方法返回的是mWindow，继续找mWindow对象，发现在Activity中定义的是Window对象</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private Window mWindow<span class="comment">;</span></span><br></pre></td></tr></table></figure></li><li><p>查看Window源码，注释说得非常清楚，Window的唯一实现类是PhoneWindow</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The only existing implementation of this abstract class is</span></span><br><span class="line"><span class="comment"> * android.view.PhoneWindow, which you should instantiate when needing a</span></span><br><span class="line"><span class="comment"> * Window.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Window</span> </span>&#123;</span><br><span class="line"> <span class="comment">//省略部分代码</span></span><br><span class="line"> ...</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>在Activity源码的attch()方法中我们也看到 mWindow 的实例对象确实是PhoneWindow</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> attach(Context context, ActivityThread aThread,</span><br><span class="line">       Instrumentation instr, IBinder token, <span class="built_in">int</span> ident,</span><br><span class="line">       Application application, Intent intent, ActivityInfo info,</span><br><span class="line">       CharSequence title, Activity parent, <span class="built_in">String</span> id,</span><br><span class="line">       NonConfigurationInstances lastNonConfigurationInstances,</span><br><span class="line">       Configuration config, <span class="built_in">String</span> referrer, IVoiceInteractor voiceInteractor,</span><br><span class="line">       Window <span class="built_in">window</span>, ActivityConfigCallback activityConfigCallback) &#123;</span><br><span class="line">   .....</span><br><span class="line">   mWindow = <span class="keyword">new</span> PhoneWindow(<span class="keyword">this</span>, <span class="built_in">window</span>, activityConfigCallback);</span><br><span class="line">   ......&#125;</span><br></pre></td></tr></table></figure></li><li><p>所以我们继续看PhoneWindow，这时必须要记住，我们还在找setContentView()方法，PhoneWindow的setContentView()方法</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(<span class="keyword">int</span> layoutResID)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Note: FEATURE_CONTENT_TRANSITIONS may be set in the process of installing the window</span></span><br><span class="line">    <span class="comment">// decor, when theme attributes and the like are crystalized. Do not check the feature</span></span><br><span class="line">    <span class="comment">// before this happens.</span></span><br><span class="line">    <span class="keyword">if</span> (mContentParent == <span class="keyword">null</span>) &#123;</span><br><span class="line">        installDecor();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</span><br><span class="line">        mContentParent.removeAllViews();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</span><br><span class="line">        <span class="keyword">final</span> Scene newScene = Scene.getSceneForLayout(mContentParent, layoutResID,</span><br><span class="line">                getContext());</span><br><span class="line">        transitionTo(newScene);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mLayoutInflater.inflate(layoutResID, mContentParent);</span><br><span class="line">    &#125;</span><br><span class="line">    mContentParent.requestApplyInsets();</span><br><span class="line">    <span class="keyword">final</span> Callback cb = getCallback();</span><br><span class="line">    <span class="keyword">if</span> (cb != <span class="keyword">null</span> &amp;&amp; !isDestroyed()) &#123;</span><br><span class="line">        cb.onContentChanged();</span><br><span class="line">    &#125;</span><br><span class="line">    mContentParentExplicitlySet = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>该方法中我们重点看installDecor()方法</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="literal">void</span> installDecor() &#123;</span><br><span class="line">    mForceDecorInstall = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (mDecor == <span class="built_in">null</span>) &#123;</span><br><span class="line">        mDecor = generateDecor(<span class="number">-1</span>);</span><br><span class="line">        mDecor.setDescendantFocusability(ViewGroup.FOCUS_AFTER_DESCENDANTS);</span><br><span class="line">        mDecor.setIsRootNamespace(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (!mInvalidatePanelMenuPosted &amp;&amp; mInvalidatePanelMenuFeatures != <span class="number">0</span>) &#123;</span><br><span class="line">            mDecor.postOnAnimation(mInvalidatePanelMenuRunnable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mDecor.setWindow(this);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mContentParent == <span class="built_in">null</span>) &#123;</span><br><span class="line">        mContentParent = generateLayout(mDecor);</span><br><span class="line">        <span class="params">...</span><span class="params">...</span>.</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="params">...</span><span class="params">...</span>.</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>好像没发现什么，继续看generateDecor(int featureId)方法</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> DecorView generateDecor(<span class="keyword">int</span> featureId) &#123;</span><br><span class="line">    <span class="comment">// System process doesn't have application context and in that case we need to directly use</span></span><br><span class="line">    <span class="comment">// the context we have. Otherwise we want the application context, so we don't cling to the</span></span><br><span class="line">    <span class="comment">// activity.</span></span><br><span class="line">    Context <span class="keyword">context</span>;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DecorView(<span class="keyword">context</span>, featureId, <span class="keyword">this</span>, getAttributes());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>到此我们发现，他返回的是DecorView，DecorView是PhoneWindow的内部类，我们再看generateLayout(mDecor)方法</p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">protected ViewGroup generateLayout(DecorView decor)&#123;</span><br><span class="line">....</span><br><span class="line"><span class="comment">// Inflate the window decor.</span></span><br><span class="line">    <span class="type">int</span> layoutResource;</span><br><span class="line">    <span class="type">int</span> features = getLocalFeatures();</span><br><span class="line">    <span class="comment">// System.out.println("Features: 0x" + Integer.toHexString(features));</span></span><br><span class="line">    <span class="keyword">if</span> ((features &amp; (<span class="number">1</span> &lt;&lt; FEATURE_SWIPE_TO_DISMISS)) != <span class="number">0</span>) &#123;</span><br><span class="line">        layoutResource = R.<span class="keyword">layout</span>.screen_swipe_dismiss;</span><br><span class="line">        setCloseOnSwipeEnabled(<span class="literal">true</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((features &amp; ((<span class="number">1</span> &lt;&lt; FEATURE_LEFT_ICON) | (<span class="number">1</span> &lt;&lt; FEATURE_RIGHT_ICON))) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mIsFloating) &#123;</span><br><span class="line">            TypedValue res = new TypedValue();</span><br><span class="line">            getContext().getTheme().resolveAttribute(</span><br><span class="line">                    R.attr.dialogTitleIconsDecorLayout, res, <span class="literal">true</span>);</span><br><span class="line">            layoutResource = res.resourceId;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            layoutResource = R.<span class="keyword">layout</span>.screen_title_icons;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// XXX Remove this once action bar supports these features.</span></span><br><span class="line">        removeFeature(FEATURE_ACTION_BAR);</span><br><span class="line">        <span class="comment">// System.out.println("Title Icons!");</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((features &amp; ((<span class="number">1</span> &lt;&lt; FEATURE_PROGRESS) | (<span class="number">1</span> &lt;&lt; FEATURE_INDETERMINATE_PROGRESS))) != <span class="number">0</span></span><br><span class="line">            &amp;&amp; (features &amp; (<span class="number">1</span> &lt;&lt; FEATURE_ACTION_BAR)) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// Special case for a window with only a progress bar (and title).</span></span><br><span class="line">        <span class="comment">// XXX Need to have a no-title version of embedded windows.</span></span><br><span class="line">        layoutResource = R.<span class="keyword">layout</span>.screen_progress;</span><br><span class="line">        <span class="comment">// System.out.println("Progress!");</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((features &amp; (<span class="number">1</span> &lt;&lt; FEATURE_CUSTOM_TITLE)) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// Special case for a window with a custom title.</span></span><br><span class="line">        <span class="comment">// If the window is floating, we need a dialog layout</span></span><br><span class="line">        <span class="keyword">if</span> (mIsFloating) &#123;</span><br><span class="line">            TypedValue res = new TypedValue();</span><br><span class="line">            getContext().getTheme().resolveAttribute(</span><br><span class="line">                    R.attr.dialogCustomTitleDecorLayout, res, <span class="literal">true</span>);</span><br><span class="line">            layoutResource = res.resourceId;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            layoutResource = R.<span class="keyword">layout</span>.screen_custom_title;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// XXX Remove this once action bar supports these features.</span></span><br><span class="line">        removeFeature(FEATURE_ACTION_BAR);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((features &amp; (<span class="number">1</span> &lt;&lt; FEATURE_NO_TITLE)) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// If no other features and not embedded, only need a title.</span></span><br><span class="line">        <span class="comment">// If the window is floating, we need a dialog layout</span></span><br><span class="line">        <span class="keyword">if</span> (mIsFloating) &#123;</span><br><span class="line">            TypedValue res = new TypedValue();</span><br><span class="line">            getContext().getTheme().resolveAttribute(</span><br><span class="line">                    R.attr.dialogTitleDecorLayout, res, <span class="literal">true</span>);</span><br><span class="line">            layoutResource = res.resourceId;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((features &amp; (<span class="number">1</span> &lt;&lt; FEATURE_ACTION_BAR)) != <span class="number">0</span>) &#123;</span><br><span class="line">            layoutResource = a.getResourceId(</span><br><span class="line">                    R.styleable.Window_windowActionBarFullscreenDecorLayout,</span><br><span class="line">                    R.<span class="keyword">layout</span>.screen_action_bar);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            layoutResource = R.<span class="keyword">layout</span>.screen_title;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// System.out.println("Title!");</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((features &amp; (<span class="number">1</span> &lt;&lt; FEATURE_ACTION_MODE_OVERLAY)) != <span class="number">0</span>) &#123;</span><br><span class="line">        layoutResource = R.<span class="keyword">layout</span>.screen_simple_overlay_action_mode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Embedded, so no decoration is needed.</span></span><br><span class="line">        layoutResource = R.<span class="keyword">layout</span>.screen_simple;</span><br><span class="line">        <span class="comment">// System.out.println("Simple!");</span></span><br><span class="line">    &#125;</span><br><span class="line">    .......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>该方法比较长，只截取一部分，方法根据不同的情况加载不同的布局给layoutResource，看其中一个layout.screen_title布局</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Popout bar for action modes --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ViewStub</span> <span class="attr">android:id</span>=<span class="string">"@+id/action_mode_bar_stub"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:inflatedId</span>=<span class="string">"@+id/action_mode_bar"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:layout</span>=<span class="string">"@layout/action_mode_bar"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:theme</span>=<span class="string">"?attr/actionBarTheme"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"?android:attr/windowTitleSize"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">"?android:attr/windowTitleBackgroundStyle"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span> <span class="attr">android:id</span>=<span class="string">"@android:id/title"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">"?android:attr/windowTitleStyle"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@null"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fadingEdge</span>=<span class="string">"horizontal"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">"center_vertical"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">android:id</span>=<span class="string">"@android:id/content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"0dip"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:foregroundGravity</span>=<span class="string">"fill_horizontal|top"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:foreground</span>=<span class="string">"?android:attr/windowContentOverlay"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>这时我们只是了解了Activity的setContentView方法，我们看看Activity的dispatchTouchEvent方法</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Called <span class="keyword">to</span> process touch screen events.  You can override this <span class="keyword">to</span></span><br><span class="line"> * intercept all touch screen events <span class="keyword">before</span> they are dispatched <span class="keyword">to</span> <span class="keyword">the</span></span><br><span class="line"> * window.  Be sure <span class="keyword">to</span> call this implementation <span class="keyword">for</span> touch screen events</span><br><span class="line"> * <span class="keyword">that</span> should be handled normally.</span><br><span class="line"> *</span><br><span class="line"> * @param ev The touch screen event.</span><br><span class="line"> *</span><br><span class="line"> * @<span class="literal">return</span> <span class="built_in">boolean</span> Return <span class="literal">true</span> <span class="keyword">if</span> this event was consumed.</span><br><span class="line"> */</span><br><span class="line">public <span class="built_in">boolean</span> dispatchTouchEvent(MotionEvent ev) &#123;</span><br><span class="line">    <span class="keyword">if</span> (ev.getAction() == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">        onUserInteraction();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (getWindow().superDispatchTouchEvent(ev)) &#123;</span><br><span class="line"><span class="built_in">        return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">    return</span> onTouchEvent(ev);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>显然调用getWindow().superDispatchTouchEvent(ev)，根据前面的分析也就是PhoneWindow的dispatchTouchEvent方法</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This is the top-level view of the window, containing the window decor.</span></span><br><span class="line"><span class="keyword">private</span> DecorView mDecor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">superDispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">return</span> mDecor.<span class="title">superDispatchTouchEvent</span><span class="params">(event)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This is the view in which the window contents are placed. It is either</span></span><br><span class="line"><span class="comment">// mDecor itself, or a child of mDecor where the contents go.</span></span><br><span class="line">ViewGroup mContentParent;</span><br></pre></td></tr></table></figure></li><li><p>可以看到PhoneWindow的superDispatchTouchEvent调用的是DecorView的superDispatchTouchEvent方法，前面我们知道DecorView其实是ViewGroup（上述generateLayout(mDecor)返回值），到此我们可以串联起来，<strong>Activity的setContentView其实是Window对象的实现是其唯一实现类PhoneWindown的内部类DecorView来作为Activity的根View，也就是说从Activity开始传递的是从PhoneWindow开始</strong>，也就是源码中的installDecor得到的DecorView充当了Activity传递事件的View，DecorView可以理解为当前页面的底层容器，底层容器DecorView在根据自己是ViewGroup把事件再向他的子View传递，也就是我们平时写的界面最上层View，也就是setContentView加载的布局根布局View，下图结合实例很清晰的可以表示出Activity的构成。</p></li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/Activity%E6%9E%84%E6%88%90%E5%AF%B9%E6%AF%94%E5%9B%BE.png" alt="Activity构成对比图"></p><ul><li><p>到此我们可以写出一个事件传递的流程为</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Activity －&gt; PhoneWindow －&gt; DecorView －&gt; ViewGroup －&gt; ... －&gt; View</span><br></pre></td></tr></table></figure></li><li><p>总结一下每个传递者具有的方法，我们注意到Activity没有onInterceptTouchEvent方法，其实很容易理解，Activity作为事件的初始传递者如果拦截了事件，也就是我们点击界面无响应，这也就使得我们用户的点击没什么意义，肯定是我们点击界面中的某个view响应才符合操作。(PhoneWindow在Android都是隐藏的，不做记录)</p></li></ul><table><thead><tr><th>类型</th><th>相关方法</th><th>Activity</th><th>ViewGroup</th><th>View</th></tr></thead><tbody><tr><td>事件分发</td><td>dispatchTouchEvent</td><td>有</td><td>有</td><td>有</td></tr><tr><td>事件拦截</td><td>onInterceptTouchEvent</td><td>无</td><td>有</td><td>无</td></tr><tr><td>事件消费</td><td>onTouchEvent</td><td>有</td><td>有</td><td>有 </td></tr></tbody></table><h4 id="点击事件分发原则"><a href="#点击事件分发原则" class="headerlink" title="点击事件分发原则"></a>点击事件分发原则</h4><ul><li>onInterceptTouchEvent拦截事件，该View的onTouchEvent方法才会被调用，只有onTouchEvent返回true才表示该事件被消费，否则回传到上层View的onTouchEvent方法。</li><li>如果事件一直不被消费，则最终回传给Activity，Activity不消费则事件消失。</li><li>事件是否被消费是根据返回值，true表示消费，false表示不消费。<h3 id="从源码角度继续分析ViewGroup和View事件传递流程"><a href="#从源码角度继续分析ViewGroup和View事件传递流程" class="headerlink" title="从源码角度继续分析ViewGroup和View事件传递流程"></a>从源码角度继续分析ViewGroup和View事件传递流程</h3><blockquote><p>经过前面的研究，我们回顾一下,一个点击事件用MotionEvent表示，事件最先传递到Activity，调用Activity的dispatchTouchEvent方法，事件处理工作交给PhoneWindow，PhoneWindow在把事件传递给DecorView，最后DecorView作为我们界面底层容器装载我们setContentView的布局，我们写布局一般都是啥layout作为根布局，也就是ViewGroup，DecorView把事件传递到ViewGroup的dispatchTouchEvent方法，我们就从ViewGroup的dispatchTouchEvent源码开始分析</p></blockquote><h4 id="ViewGroup事件传递流程"><a href="#ViewGroup事件传递流程" class="headerlink" title="ViewGroup事件传递流程"></a>ViewGroup事件传递流程</h4></li><li><p>ViewGroup方法比较长，我们一段一段来</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * When set, this ViewGroup should not intercept touch events.</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@hide</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@UnsupportedAppUsage</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FLAG_DISALLOW_INTERCEPT = <span class="number">0x80000</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">......</span><br><span class="line"><span class="comment">// Handle an initial down.</span></span><br><span class="line">        <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN) &#123;</span><br><span class="line">            <span class="comment">// Throw away all previous state when starting a new touch gesture.</span></span><br><span class="line">            <span class="comment">// The framework may have dropped the up or cancel event for the previous gesture</span></span><br><span class="line">            <span class="comment">// due to an app switch, ANR, or some other state change.</span></span><br><span class="line">            cancelAndClearTouchTargets(ev);</span><br><span class="line">            resetTouchState();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// Check for interception.</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> intercepted;</span><br><span class="line">        <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN</span><br><span class="line">                || mFirstTouchTarget != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">boolean</span> disallowIntercept = (mGroupFlags &amp; FLAG_DISALLOW_INTERCEPT) != <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (!disallowIntercept) &#123;</span><br><span class="line">                intercepted = onInterceptTouchEvent(ev);</span><br><span class="line">                ev.setAction(action); <span class="comment">// restore action in case it was changed</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                intercepted = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// There are no touch targets and this action is not an initial down</span></span><br><span class="line">            <span class="comment">// so this view group continues to intercept touches.</span></span><br><span class="line">            intercepted = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    .....&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Resets all touch state in preparation for a new cycle.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">resetTouchState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    clearTouchTargets();</span><br><span class="line">    .....</span><br><span class="line">    mGroupFlags &amp;= ~FLAG_DISALLOW_INTERCEPT;</span><br><span class="line">    ......</span><br><span class="line">&#125;        </span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Clears all touch targets.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">clearTouchTargets</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">        mFirstTouchTarget = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>一上来首先判断了事件是否为ACTION_DOWN，如果是ACTION_DOWN事件，则调用resetTouchState()方法，resetTouchState()钟调用了clearTouchTargets()使mFirstTouchTarget=null，而前面我们了解事件的时候也说过一个事件是ACTION_DOWN开始到ACTION_UP结束，也就是说ACTION_DOWN出现表示一个新的事件的开始；接下来再次判断为ACTION_DOWN和mFirstTouchTarget！=null，我们看到条件成立之后才能调用onInterceptTouchEvent方法，也就是说mFirstTouchTarget！=null成立说明此时不拦截事件，而mFirstTouchTarget==null成立则说明事件已经被拦截，并且不会再有ACTION_DOWN，因为此时这个一个事件还没结束，此时不管ACTION_MOVE还是ACTION_UP动作，都交由现在拦截了事件的ViewGroup来处理，<strong>并且不会再次调用onInterceptTouchEvent方法</strong>（说明该方法并不是每次都会调用的）。</p></li><li><p>我们还看到一个标记位FLAG_DISALLOW_INTERCEPT，它一般是由子View的requestDisallowInterceptTouchEvent方法设置的，表示ViewGroup无法拦截除了ACTION_DOWN以外的其他动作，我们看到源码第一个判断就会明白，只要是ACTION_DOWN动作，这个标记位都会被重置，并且ViewGroup会调用自己onInterceptTouchEvent方法表达是否需要拦截这新一轮的点击事件。</p></li><li><p>接着看dispatchTouchEvent方法剩下的其他代码段</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">.......</span><br><span class="line"><span class="keyword">if</span> (newTouchTarget == <span class="keyword">null</span> &amp;&amp; childrenCount != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">float</span> x = ev.getX(actionIndex);</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">float</span> y = ev.getY(actionIndex);</span><br><span class="line">                    <span class="comment">// Find a child that can receive the event.</span></span><br><span class="line">                    <span class="comment">// Scan children from front to back.</span></span><br><span class="line">                    <span class="keyword">final</span> ArrayList&lt;View&gt; preorderedList = buildTouchDispatchChildList();</span><br><span class="line">                    <span class="keyword">final</span> <span class="keyword">boolean</span> customOrder = preorderedList == <span class="keyword">null</span></span><br><span class="line">                            &amp;&amp; isChildrenDrawingOrderEnabled();</span><br><span class="line">                    <span class="keyword">final</span> View[] children = mChildren;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = childrenCount - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                        <span class="keyword">final</span> <span class="keyword">int</span> childIndex = getAndVerifyPreorderedIndex(</span><br><span class="line">                                childrenCount, i, customOrder);</span><br><span class="line">                        <span class="keyword">final</span> View child = getAndVerifyPreorderedView(</span><br><span class="line">                                preorderedList, children, childIndex);</span><br><span class="line">                        <span class="comment">// If there is a view that has accessibility focus we want it</span></span><br><span class="line">                        <span class="comment">// to get the event first and if not handled we will perform a</span></span><br><span class="line">                        <span class="comment">// normal dispatch. We may do a double iteration but this is</span></span><br><span class="line">                        <span class="comment">// safer given the timeframe.</span></span><br><span class="line">                        <span class="keyword">if</span> (childWithAccessibilityFocus != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (childWithAccessibilityFocus != child) &#123;</span><br><span class="line">                                <span class="keyword">continue</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            childWithAccessibilityFocus = <span class="keyword">null</span>;</span><br><span class="line">                            i = childrenCount - <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (!canViewReceivePointerEvents(child)</span><br><span class="line">                                || !isTransformedTouchPointInView(x, y, child, <span class="keyword">null</span>)) &#123;</span><br><span class="line">                            ev.setTargetAccessibilityFocus(<span class="keyword">false</span>);</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        newTouchTarget = getTouchTarget(child);</span><br><span class="line">                        <span class="keyword">if</span> (newTouchTarget != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="comment">// Child is already receiving touch within its bounds.</span></span><br><span class="line">                            <span class="comment">// Give it the new pointer in addition to the ones it is handling.</span></span><br><span class="line">                            newTouchTarget.pointerIdBits |= idBitsToAssign;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        resetCancelNextUpFlag(child);</span><br><span class="line">                        <span class="keyword">if</span> (dispatchTransformedTouchEvent(ev, <span class="keyword">false</span>, child, idBitsToAssign)) &#123;</span><br><span class="line">                            <span class="comment">// Child wants to receive touch within its bounds.</span></span><br><span class="line">                            mLastTouchDownTime = ev.getDownTime();</span><br><span class="line">                            <span class="keyword">if</span> (preorderedList != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                <span class="comment">// childIndex points into presorted list, find original index</span></span><br><span class="line">                                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; childrenCount; j++) &#123;</span><br><span class="line">                                    <span class="keyword">if</span> (children[childIndex] == mChildren[j]) &#123;</span><br><span class="line">                                        mLastTouchDownIndex = j;</span><br><span class="line">                                        <span class="keyword">break</span>;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                mLastTouchDownIndex = childIndex;</span><br><span class="line">                            &#125;</span><br><span class="line">                            mLastTouchDownX = ev.getX();</span><br><span class="line">                            mLastTouchDownY = ev.getY();</span><br><span class="line">                            newTouchTarget = addTouchTarget(child, idBitsToAssign);</span><br><span class="line">                            alreadyDispatchedToNewTouchTarget = <span class="keyword">true</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">    ......                    </span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * Transforms a motion event into the coordinate space of a particular child view,</span></span><br><span class="line"><span class="comment">      * filters out irrelevant pointer ids, and overrides its action if necessary.</span></span><br><span class="line"><span class="comment">      * If child is null, assumes the MotionEvent will be sent to this ViewGroup instead.</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> dispatchTransformedTouchEvent(MotionEvent event, <span class="keyword">boolean</span> cancel,</span><br><span class="line">        View child, <span class="keyword">int</span> desiredPointerIdBits) &#123;</span><br><span class="line">   .......</span><br><span class="line">        <span class="keyword">if</span> (child == <span class="keyword">null</span>) &#123;</span><br><span class="line">            handled = <span class="keyword">super</span>.dispatchTouchEvent(event);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            handled = child.dispatchTouchEvent(event);</span><br><span class="line">    .......</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>这里显示的逻辑还是非常清晰的，如果ViewGroup不拦截点击事件，则首先遍历子View的最外层，获取点击事件的X坐标和Y坐标判断是否和当前子View的坐标相匹配，而dispatchTransformedTouchEvent方法实际上就是调用子View的dispatchTouchEvent方法，这样就完成了ViewGroup到子View的事件分发。</p></li><li><p>ViewGroup默认不拦截任何事件，他的onInterceptTouchEvent方法默认返回false</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public boolean onInterceptTouchEvent(MotionEvent <span class="built_in">ev</span>) &#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">ev</span>.isFromSource(InputDevice.SOURCE_MOUSE)</span><br><span class="line">   //鼠标点击处理</span><br><span class="line">           &amp;&amp; <span class="built_in">ev</span>.getAction() == MotionEvent.ACTION_DOWN</span><br><span class="line">           &amp;&amp; <span class="built_in">ev</span>.isButtonPressed(MotionEvent.BUTTON_PRIMARY)</span><br><span class="line">           &amp;&amp; isOnScrollbarThumb(<span class="built_in">ev</span>.getX(), <span class="built_in">ev</span>.getY())) &#123;</span><br><span class="line">       <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>如下源码，如果ViewGroup将事件传递到子View，则会调用addTouchTarget(child, idBitsToAssign)方法，并退出遍历子View的循环</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">.......</span><br><span class="line">newTouchTarget = addTouchTarget(child, idBitsToAssign);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">.....</span><br><span class="line"> <span class="comment">// Dispatch to touch targets.</span></span><br><span class="line">        <span class="keyword">if</span> (mFirstTouchTarget == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// No touch targets so treat this as an ordinary view.</span></span><br><span class="line">            handled = dispatchTransformedTouchEvent(ev, canceled, <span class="keyword">null</span>,</span><br><span class="line">                    TouchTarget.ALL_POINTER_IDS);</span><br><span class="line">        &#125; </span><br><span class="line">   .....     </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Adds a touch target for specified child to the beginning of the list.</span></span><br><span class="line"><span class="comment"> * Assumes the target child is not already present.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="function">TouchTarget <span class="title">addTouchTarget</span><span class="params">(@NonNull View child, <span class="keyword">int</span> pointerIdBits)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> TouchTarget <span class="keyword">target</span> = TouchTarget.obtain(child, pointerIdBits);</span><br><span class="line">    <span class="keyword">target</span>.next = mFirstTouchTarget;</span><br><span class="line">    mFirstTouchTarget = <span class="keyword">target</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">target</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如上源码，调用addTouchTarget方法，会给mFirstTouchTarget赋值，也就是说mFirstTouchTarget！=null，前面我们已经讨论过，mFirstTouchTarget==null则拦截所有的事件给该ViewGroup处理，可见mFirstTouchTarget是否赋值对于ViewGroup的事件拦截起了关键的作用。</p></li><li>接着往下看，如果子View遍历结束后事件还是没有进行处理，这样的情况有两种可能，一个就是上面提到的例子场景二，ViewGroup的子View没有消费事件，也就是子View的onTouchEvent返回了false，另一个情况则是则是ViewGroup子View，也就不存在事件传递子View的情况。我们看如下代码，是在上面分析的代码之后出现，第三个参数子View为null，也就是调用super.dispatchTouchEvent(event)方法，ViewGroup是继承View，也就是说不管是否拦截，ViewGropu最终还是将点击事件交由到View来处理了，只是child.dispatchTouchEvent还是super.dispatchTouchEvent的问题。 ViewGroup的源码事件分发就到这里，接下来我们分析一下View的事件分发流程。<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">boolean</span> dispatchTouchEvent(MotionEvent ev) &#123;</span><br><span class="line"><span class="params">...</span>..</span><br><span class="line"> <span class="comment">// Dispatch to touch targets.</span></span><br><span class="line">        <span class="keyword">if</span> (mFirstTouchTarget == <span class="built_in">null</span>) &#123;</span><br><span class="line">            <span class="comment">// No touch targets so treat this as an ordinary view.</span></span><br><span class="line">            handled = dispatchTransformedTouchEvent(ev, canceled, <span class="built_in">null</span>,</span><br><span class="line">                    TouchTarget.ALL_POINTER_IDS);</span><br><span class="line">        &#125; </span><br><span class="line">   <span class="params">...</span>..     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="View的事件分发流程"><a href="#View的事件分发流程" class="headerlink" title="View的事件分发流程"></a>View的事件分发流程</h4><ul><li><p>首先我们看View的dispatchTouchEvent方法</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Pass the touch screen motion event down to the target view, or this</span></span><br><span class="line"><span class="comment"> * view if it is the target.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param event The motion event to be dispatched.</span></span><br><span class="line"><span class="comment"> * @return True if the event was handled by the view, false otherwise.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> boolean <span class="title">dispatchTouchEvent</span>(<span class="params">MotionEvent <span class="keyword">event</span></span>)</span> &#123;</span><br><span class="line">boolean result = <span class="literal">false</span>;</span><br><span class="line">....</span><br><span class="line"><span class="keyword">if</span> (onFilterTouchEventForSecurity(<span class="keyword">event</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((mViewFlags &amp; ENABLED_MASK) == ENABLED &amp;&amp; handleScrollBarDragging(<span class="keyword">event</span>)) &#123;</span><br><span class="line">            result = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//noinspection SimplifiableIfStatement</span></span><br><span class="line">        ListenerInfo li = mListenerInfo;</span><br><span class="line">        <span class="keyword">if</span> (li != <span class="literal">null</span> &amp;&amp; li.mOnTouchListener != <span class="literal">null</span></span><br><span class="line">                &amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED</span><br><span class="line">                &amp;&amp; li.mOnTouchListener.onTouch(<span class="keyword">this</span>, <span class="keyword">event</span>)) &#123;</span><br><span class="line">            result = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!result &amp;&amp; onTouchEvent(<span class="keyword">event</span>)) &#123;</span><br><span class="line">            result = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">.....  </span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>我们看到上面的源码中，View对于点击的事件的处理首先是判断是注册OnTouchListener，并且如果OnTouchListener的onTouch放回true，则整个dispatchTouchEvent返回true，已经拦截了事件，则不会执行下面的onTouchEvent方法的调用，也就是说事件拦截了，但是不调用onTouchEvent方法，这里其实很好理解，如果开发者注册了OnTouchListener并在onTouch放回true，说明开发者是想自己来处理触摸事件，而onTouchEvent是属于Android的事件传递机制方法，是系统帮我们处理的，所以当我们自己处理了点击事件，就不需要系统来再次处理了。所以OnTouchListener的调用有先级高于onTouchEvent。</p></li><li><p>如果Ciew没有注册OnTouchListener方法，接下来事件传递到onTouchEvent方法，我们接着看onTouchEvent源码</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implement this method to handle touch screen motion events.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * If this method is used to detect click actions, it is recommended that</span></span><br><span class="line"><span class="comment"> * the actions be performed by implementing and calling</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #performClick()&#125;. This will ensure consistent system behavior,</span></span><br><span class="line"><span class="comment"> * including:</span></span><br><span class="line"><span class="comment"> * &lt;ul&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;obeying click sound preferences</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;dispatching OnClickListener calls</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;handling &#123;<span class="doctag">@link</span> AccessibilityNodeInfo#ACTION_CLICK ACTION_CLICK&#125; when</span></span><br><span class="line"><span class="comment"> * accessibility features are enabled</span></span><br><span class="line"><span class="comment"> * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> event The motion event.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> True if the event was handled, false otherwise.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">boolean</span> onTouchEvent(MotionEvent event) &#123;</span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> clickable = ((viewFlags &amp; CLICKABLE) == CLICKABLE</span><br><span class="line">            || (viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE)</span><br><span class="line">            || (viewFlags &amp; CONTEXT_CLICKABLE) == CONTEXT_CLICKABLE;</span><br><span class="line">    <span class="keyword">if</span> ((viewFlags &amp; ENABLED_MASK) == DISABLED) &#123;</span><br><span class="line">        <span class="keyword">if</span> (action == MotionEvent.ACTION_UP &amp;&amp; (mPrivateFlags &amp; PFLAG_PRESSED) != <span class="number">0</span>) &#123;</span><br><span class="line">            setPressed(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mPrivateFlags3 &amp;= ~PFLAG3_FINGER_DOWN;</span><br><span class="line">        <span class="comment">// A disabled view that is clickable still consumes the touch</span></span><br><span class="line">        <span class="comment">// events, it just doesn't respond to them.</span></span><br><span class="line">        <span class="keyword">return</span> clickable;</span><br><span class="line">    &#125;</span><br><span class="line">  ....</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>通过上面源码和注释，我们可以知道，View即使是处于不可用状态，他还是会消费(consumes)点击事件，只是他不会响应点击事件，也就是返回各种点击的状态（点击，长按）。</p></li><li><p>接着看看剩下源码对点击事件的处理</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">boolean</span> onTouchEvent(MotionEvent event) &#123;</span><br><span class="line"><span class="keyword">if</span> (clickable || (viewFlags &amp; TOOLTIP) == TOOLTIP) &#123;</span><br><span class="line">        switch (action) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">               <span class="params">...</span><span class="params">...</span></span><br><span class="line">                <span class="keyword">if</span> (!clickable) &#123;</span><br><span class="line">                    removeTapCallback();</span><br><span class="line">                    removeLongPressCallback();</span><br><span class="line">                    mInContextButtonPress = <span class="literal">false</span>;</span><br><span class="line">                    mHasPerformedLongPress = <span class="literal">false</span>;</span><br><span class="line">                    mIgnoreNextUpEvent = <span class="literal">false</span>;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">boolean</span> prepressed = (mPrivateFlags &amp; PFLAG_PREPRESSED) != <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> ((mPrivateFlags &amp; PFLAG_PRESSED) != <span class="number">0</span> || prepressed) &#123;</span><br><span class="line">                <span class="params">...</span><span class="params">...</span>.</span><br><span class="line">                    <span class="keyword">if</span> (!mHasPerformedLongPress &amp;&amp; !mIgnoreNextUpEvent) &#123;</span><br><span class="line">                        <span class="comment">// This is a tap, so remove the longpress check</span></span><br><span class="line">                        removeLongPressCallback();</span><br><span class="line">                        <span class="comment">// Only perform take click actions if we were in the pressed state</span></span><br><span class="line">                        <span class="keyword">if</span> (!focusTaken) &#123;</span><br><span class="line">                            <span class="comment">// Use a Runnable and post this rather than calling</span></span><br><span class="line">                            <span class="comment">// performClick directly. This lets other visual state</span></span><br><span class="line">                            <span class="comment">// of the view update before click actions start.</span></span><br><span class="line">                            <span class="keyword">if</span> (mPerformClick == <span class="built_in">null</span>) &#123;</span><br><span class="line">                                mPerformClick = <span class="literal">new</span> PerformClick();</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (!post(mPerformClick)) &#123;</span><br><span class="line">                                performClickInternal();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                <span class="params">...</span>..</span><br><span class="line">                &#125;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="params">...</span>.</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>触摸事件结束，也就是ACTION_UP，所以这里我们看对于ACTION_UP的处理就可以了。我们看到对于ACTION_UP，，如果没有!clickable，也就是没有View的CLICKABLE、LONG_CLICKABLE和CONTEXT_CLICKABLE都不存在，则清除所有的状态回调等，如果其中一个存在，则直接消费这个时间，我们看到方法后面有个retrun true存在，也证实事件被消费了，也就是onTouchEvent方法返回了true。而如果ACTION_UP没有消费事件，最终onTouchEvent方法是返回false。</p></li><li><p>到这里，我们还看到ACTION_UP事件会触发performClickInternal();方法，我们看看他做了什么</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">private</span> <span class="function"><span class="keyword">boolean</span> <span class="title">performClickInternal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Must notify autofill manager before performing the click actions to avoid scenarios where</span></span><br><span class="line">    <span class="comment">// the app has a click listener that changes the state of views the autofill service might</span></span><br><span class="line">    <span class="comment">// be interested on.</span></span><br><span class="line">    notifyAutofillManagerOnClick();</span><br><span class="line">    <span class="function"><span class="keyword">return</span> <span class="title">performClick</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">performClick</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// We still need to call this method to handle the cases where performClick() was called</span></span><br><span class="line">    <span class="comment">// externally, instead of through performClickInternal()</span></span><br><span class="line">    notifyAutofillManagerOnClick();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> result;</span><br><span class="line">    <span class="keyword">final</span> ListenerInfo li = mListenerInfo;</span><br><span class="line">    <span class="keyword">if</span> (li != <span class="keyword">null</span> &amp;&amp; li.mOnClickListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">        playSoundEffect(SoundEffectConstants.CLICK);</span><br><span class="line">        li.mOnClickListener.onClick(<span class="keyword">this</span>);</span><br><span class="line">        result = <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);</span><br><span class="line">    notifyEnterOrExitForAutoFillIfNeeded(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>可以从源码看到他最终调用的是performClick()方法，如果View设置了OnClickListener，则会调用onClick方法。我们知道View默认的LONG_CLICKABLE是false，而CLICKABLE需要根据具体View才能知道，比如Button是可点击的，则CLICKABLE为true，而ImageView默认是不可点击的，所以CLICKABLE为false，但是开发中我们也发现，不管View是否可以点击，只要我们设置setOnClickListener()或者setOnLongClickListener()方法，则该View就是可以被点击或者长按的，也就是LONG_CLICKABLE或者CLICKABLE为true。我们从源码可以看出。到此，从源码角度分析事件分发机制的流程我们已经走完。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Register a callback to be invoked when this view is clicked. If this view is not</span></span><br><span class="line"><span class="comment"> * clickable, it becomes clickable.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> l The callback that will run</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #setClickable(boolean)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setOnClickListener</span><span class="params">(@Nullable OnClickListener l)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isClickable()) &#123;</span><br><span class="line">        setClickable(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    getListenerInfo().mOnClickListener = l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setOnLongClickListener</span><span class="params">(@Nullable OnLongClickListener l)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isLongClickable()) &#123;</span><br><span class="line">        setLongClickable(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    getListenerInfo().mOnLongClickListener = l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>经过前面的分析，我们还可以排出与View相关的事件调度优先顺序为onTouchListener&gt;onTouchEvent &gt; onLongClickListener &gt; onClickListener </p><blockquote><p>最后，总结事件分发机制的核心知识点</p></blockquote></li><li>正常情况下触摸一次屏幕触发事件序列为ACTION_DOWN–&gt;ACTION_UP</li><li>当一个View决定拦截，那么这一个事件序列只能由这个View来处理，onInterceptTouchEvent方法并不是每次产生动作都会被调用到，当我们需要提前出来想要拦截的动作需要在事件必须传递到该ViewGroup的前提下在dispatchTouchEvent方法中进程操作。</li><li>一个View开始处理事件，但是它不消耗ACTION_DOWN，也就是onTouchEvent返回false，则这个事件会交由他的父元素的onTouchEvent方法来进行处理，而这个事件序列的其他剩余ACACTION_MOVE，ACTION_UP也不会再给该View来处理。</li><li>View没有onInterceptTouchEvent方法，View一旦接收到事件就调用onTouchEvent方法</li><li>ViewGroup默认不拦截任何事件（onInterceptTouchEvent方法默认返回false）。</li><li>View的onTouchEvent方法默认是处理点击事件的，除非他是不可点击的（clickable和longClickable同时为false）</li><li>事件分发机制的核心原理就是责任链模式，事件层层传递，直到被消费。<h3 id="最后说点"><a href="#最后说点" class="headerlink" title="最后说点"></a>最后说点</h3></li><li>终于，把事件分发机制给回顾了一遍，其实五月份的时候我就复习过一次事件分发机制，但是当时没有记录，所以这次在回头看以前记得有些知识点感觉还是模糊，所以记录下来才能在以后忘记的时候去回顾再总结。如果文章中有写得不对的地方，请给我留言指出，大家一起学习进步。如果觉得我的文章给予你帮助，也请给我一个喜欢和关注。</li><li><p>参考链接</p><ul><li><a href="https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/app/Activity.java" target="_blank" rel="noopener">Android 源码 Activity</a> </li><li><a href="https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/view/Window.java" target="_blank" rel="noopener">Android 源码 Window</a></li><li><a href="https://android.googlesource.com/platform/frameworks/base/+/master/core/java/com/android/internal/policy/PhoneWindow.java" target="_blank" rel="noopener">Android 源码 PhoneWindow</a></li><li><a href="https://android.googlesource.com/platform/frameworks/base/+/master/core/res/res/layout/screen_title.xml" target="_blank" rel="noopener">Android 源码 screen_title.xml</a></li><li><a href="https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/view/ViewGroup.java" target="_blank" rel="noopener">Android 源码 ViewGroup</a></li><li><a href="https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/view/View.java" target="_blank" rel="noopener">Android 源码 View</a></li><li><a href="http://wuxiaolong.me/2015/12/19/MotionEvent/" target="_blank" rel="noopener">Android事件传递机制分析</a></li></ul></li><li><p>参考书籍</p><ul><li>《Android开发艺术探索》</li><li>《Android进阶之光》</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在理解事件分发机制之前，我们先要明白，事件分发机制是为View服务的，而View是Android中所有控件的基类，View可以是单个的，而多个View组成可以叫做ViewGroup。不管什么View控件，他们基类都是View，在Android多个View的叠加有点像Web中的DOM树形结构，所以当我们点击一个区域有多个View的情况下，&lt;strong&gt;到底这时候该哪个View来响应我们的点击事件呢？事件分发机制就是为了解决这个问题而产生的。&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;https://github.com/maoqitian/MaoMdPhoto/raw/master/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/ViewGroup%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.png&quot; alt=&quot;ViewGroup官方文档集成关系&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android进阶" scheme="https://www.maoqitian.com/categories/Android%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Android" scheme="https://www.maoqitian.com/tags/Android/"/>
    
      <category term="事件分发机制" scheme="https://www.maoqitian.com/tags/%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/"/>
    
      <category term="View" scheme="https://www.maoqitian.com/tags/View/"/>
    
      <category term="ViewGroup" scheme="https://www.maoqitian.com/tags/ViewGroup/"/>
    
  </entry>
  
  <entry>
    <title>从源码角度深入理解OKHttp3</title>
    <link href="https://www.maoqitian.com/2019/01/27/%E4%BB%8E%E6%BA%90%E7%A0%81%E8%A7%92%E5%BA%A6%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3OKHttp3/"/>
    <id>https://www.maoqitian.com/2019/01/27/从源码角度深入理解OKHttp3/</id>
    <published>2019-01-27T14:17:21.000Z</published>
    <updated>2019-01-27T14:32:22.383Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3OKhttp/OKHttp-logo.png" width="100%"></p><blockquote><p>在日常开发中网络请求是很常见的功能。OkHttp作为Android开发中最常用的网络请求框架，在Android开发中我们经常结合retrofit一起使用，俗话说得好：“知其然知其所以然”，所以这篇文章我们通过源码来深入理解OKHttp3（基于3.12版本）<br><a id="more"></a></p></blockquote><h3 id="常规使用"><a href="#常规使用" class="headerlink" title="常规使用"></a>常规使用</h3><ul><li><p>在了解源码前，我们先了解如何使用OKHttp这个框架（<a href="https://github.com/square/okhttp" target="_blank" rel="noopener">框架地址</a>）</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//框架引入项目</span></span><br><span class="line">implementation(<span class="string">"com.squareup.okhttp3:okhttp:3.12.0"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//引用官方Demo的例子</span></span><br><span class="line">@Override</span><br><span class="line">  protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">      <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">      setContentView(R.layout.activity_main);</span><br><span class="line">      <span class="comment">//主线程不能进行耗时操作</span></span><br><span class="line">       <span class="keyword">new</span> <span class="type">Thread</span>()&#123;</span><br><span class="line">          @Override</span><br><span class="line">          <span class="keyword">public</span> void run() &#123;</span><br><span class="line">              <span class="keyword">super</span>.run();</span><br><span class="line">              <span class="comment">/**</span></span><br><span class="line"><span class="comment">               * 同步请求</span></span><br><span class="line"><span class="comment">               */</span></span><br><span class="line">              GetExample getexample = <span class="keyword">new</span> <span class="type">GetExample</span>();</span><br><span class="line">              <span class="keyword">String</span> syncresponse = <span class="literal">null</span>;</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                  syncresponse = getexample.run(<span class="string">"https://raw.github.com/square/okhttp/master/README.md"</span>);</span><br><span class="line">                  Log.i(<span class="string">"maoqitian"</span>,<span class="string">"异步请求返回参数"</span>+syncresponse);</span><br><span class="line">              &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                  e.printStackTrace();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;.start();</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 异步请求</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      PostExample postexample = <span class="keyword">new</span> <span class="type">PostExample</span>();</span><br><span class="line">      <span class="keyword">String</span> json = postexample.bowlingJson(<span class="string">"Jesse"</span>, <span class="string">"Jake"</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          postexample.post(<span class="string">"http://www.roundsapp.com/post"</span>, json);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 异步请求</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">PostExample</span> </span>&#123;</span><br><span class="line">       final MediaType JSON = MediaType.<span class="keyword">get</span>(<span class="string">"application/json; charset=utf-8"</span>);</span><br><span class="line">       <span class="comment">//获取 OkHttpClient 对象</span></span><br><span class="line">       OkHttpClient client = <span class="keyword">new</span> <span class="type">OkHttpClient</span>();</span><br><span class="line"></span><br><span class="line">       void post(<span class="keyword">String</span> url, <span class="keyword">String</span> json) throws IOException &#123;</span><br><span class="line">           RequestBody body = RequestBody.create(JSON, json);</span><br><span class="line">           Request request = <span class="keyword">new</span> <span class="type">Request</span>.Builder()</span><br><span class="line">                   .url(url)</span><br><span class="line">                   .post(body)</span><br><span class="line">                   .build();</span><br><span class="line">           client.<span class="keyword">new</span><span class="type">Call</span>(request).enqueue(<span class="keyword">new</span> <span class="type">Callback</span>() &#123;</span><br><span class="line">              @Override</span><br><span class="line">              <span class="keyword">public</span> void onFailure(Call call, IOException e) &#123;</span><br><span class="line">                Log.i(<span class="string">"maoqitian"</span>,<span class="string">"异步请求返回参数"</span>+e.toString());</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              @Override</span><br><span class="line">              <span class="keyword">public</span> void onResponse(Call call, Response response) throws IOException &#123;</span><br><span class="line">                  <span class="keyword">String</span> asynresponse= response.body().string();</span><br><span class="line">                  Log.i(<span class="string">"maoqitian"</span>,<span class="string">"异步请求返回参数"</span>+asynresponse);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">String</span> bowlingJson(<span class="keyword">String</span> player1, <span class="keyword">String</span> player2) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">"&#123;'winCondition':'HIGH_SCORE',"</span></span><br><span class="line">                   + <span class="string">"'name':'Bowling',"</span></span><br><span class="line">                   + <span class="string">"'round':4,"</span></span><br><span class="line">                   + <span class="string">"'lastSaved':1367702411696,"</span></span><br><span class="line">                   + <span class="string">"'dateStarted':1367702378785,"</span></span><br><span class="line">                   + <span class="string">"'players':["</span></span><br><span class="line">                   + <span class="string">"&#123;'name':'"</span> + player1 + <span class="string">"','history':[10,8,6,7,8],'color':-13388315,'total':39&#125;,"</span></span><br><span class="line">                   + <span class="string">"&#123;'name':'"</span> + player2 + <span class="string">"','history':[6,10,5,10,10],'color':-48060,'total':41&#125;"</span></span><br><span class="line">                   + <span class="string">"]&#125;"</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 同步请求</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">GetExample</span> </span>&#123;</span><br><span class="line">      OkHttpClient client = <span class="keyword">new</span> <span class="type">OkHttpClient</span>();</span><br><span class="line">      <span class="keyword">String</span> run(<span class="keyword">String</span> url) throws IOException &#123;</span><br><span class="line">          Request request = <span class="keyword">new</span> <span class="type">Request</span>.Builder()</span><br><span class="line">                  .url(url)</span><br><span class="line">                  .build();</span><br><span class="line">          <span class="keyword">try</span> (Response response = client.<span class="keyword">new</span><span class="type">Call</span>(request).execute()) &#123;</span><br><span class="line">              <span class="keyword">return</span> response.body().string();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>由例子我们可以看到，client.newCall(request).execute()执行的是异步请求，我们可以加入Callback来异步获取返回值，Response response = client.newCall(request).execute()执行的是同步请求，更多post请求方式例子可以查看官方<a href="https://github.com/square/okhttp/tree/master/samples/guide/src/main/java/okhttp3/recipes" target="_blank" rel="noopener">sample项目</a></p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><h4 id="OKHttp网络请求流程图"><a href="#OKHttp网络请求流程图" class="headerlink" title="OKHttp网络请求流程图"></a>OKHttp网络请求流程图</h4></li><li>首先看一个流程图，对于接下来的源码分析有个大体印象<br><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3OKhttp/OKHttp%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="OKHttp网络请求流程图"><h4 id="RealCall"><a href="#RealCall" class="headerlink" title="RealCall"></a>RealCall</h4></li><li><p>通过上面的例子可以看到，不管是同步请求还是异步请求，首先调用的OkHttpClient的newCall(request)方法，先来看看这个方法</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Prepares the &#123;@code request&#125; to be executed at some point in the future.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> @Override <span class="keyword">public</span> Call <span class="keyword">new</span><span class="type">Call</span>(Request request) &#123;</span><br><span class="line"> <span class="keyword">return</span> RealCall.<span class="keyword">new</span><span class="type">RealCall</span>(<span class="built_in">this</span>, request, <span class="literal">false</span> <span class="comment">/* for web socket */</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过newCall方法的源码可以看到该方法返回值是Call，Call是一个接口，他的实现类是RealCall，所以我们执行的同步execute()方法或者异步enqueue()方法都是RealCall的方法。newCall方法接收了的网络请求参数，接下来我们看看execute()和enqueue()方法</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同步请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="meta">@Override</span> <span class="keyword">public</span> <span class="function">Response <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (executed) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Already Executed"</span>);</span><br><span class="line">  executed = <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  captureCallStackTrace();</span><br><span class="line">  timeout.enter();</span><br><span class="line">  eventListener.callStart(<span class="keyword">this</span>);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    client.dispatcher().executed(<span class="keyword">this</span>);</span><br><span class="line">    Response result = getResponseWithInterceptorChain();</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Canceled"</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e = timeoutExit(e);</span><br><span class="line">    eventListener.callFailed(<span class="keyword">this</span>, e);</span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    client.dispatcher().finished(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 异步请求</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Override</span> <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Callback responseCallback)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (executed) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Already Executed"</span>);</span><br><span class="line">  executed = <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  captureCallStackTrace();</span><br><span class="line">  eventListener.callStart(<span class="keyword">this</span>);</span><br><span class="line">  client.dispatcher().enqueue(<span class="keyword">new</span> AsyncCall(responseCallback));</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>这里先看异步的enqueue方法，很直观可以看到真正执行网络请求的是最后一句代码，而它是怎么做的呢，我们还得先弄明白dispatcher，<strong>Dispatcher的本质是异步请求的调度器</strong>，它内部持有一个线程池，结合线程池调配并发请求。官方文档描述也说了这一点。</p></li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3OKhttp/OKhttp%20Dispatcher%E6%96%87%E6%A1%A3%E6%8F%8F%E8%BF%B0.png" alt="OKhttp Dispatcher文档描述"><br><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**最大并发请求数*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxRequests = <span class="number">64</span>;</span><br><span class="line"><span class="comment">/**每个主机最大请求数*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxRequestsPerHost = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Ready async calls in the order they'll be run. 准备要执行的异步请求队列*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Deque&lt;AsyncCall&gt; readyAsyncCalls = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Running asynchronous calls. Includes canceled calls that haven't finished yet.</span></span><br><span class="line"><span class="comment">正在执行的异步请求队列*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Deque&lt;AsyncCall&gt; runningAsyncCalls = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Running synchronous calls. Includes canceled calls that haven't finished yet. </span></span><br><span class="line"><span class="comment">正在执行的同步请求队列*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Deque&lt;RealCall&gt; runningSyncCalls = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Dispatcher 构造方法 */</span></span><br><span class="line"><span class="keyword">public</span> Dispatcher(ExecutorService executorService) &#123;</span><br><span class="line"><span class="keyword">this</span>.executorService = executorService;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> Dispatcher() &#123;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> ExecutorService  executorService() &#123;</span><br><span class="line"> <span class="keyword">if</span> (executorService == <span class="literal">null</span>) &#123;</span><br><span class="line"> executorService = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE, <span class="number">60</span>, TimeUnit.SECONDS,</span><br><span class="line">     <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;(), Util.threadFactory(<span class="string">"OkHttp Dispatcher"</span>, <span class="literal">false</span>));</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> executorService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Dispatcher"><a href="#Dispatcher" class="headerlink" title="Dispatcher"></a>Dispatcher</h4><ul><li>通过Dispatcher的构造方法我们知道我们可以使用自己的线程池，也可以使用Dispatcher默认的线程池，默认的线程池相当于CachedThreadPool线程池，这个线程池比较适合执行大量的耗时较少的任务（<a href="https://www.jianshu.com/p/c1ed876c17fe" target="_blank" rel="noopener">线程池介绍</a>）。</li><li><p>了解了Dispatcher之后，我们继续探究Dispatcher的enqueue方法</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> enqueue(AsyncCall call) &#123;</span><br><span class="line">  <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">  readyAsyncCalls.<span class="built_in">add</span>(call);</span><br><span class="line"> &#125;</span><br><span class="line"> promoteAndExecute();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Promotes eligible calls from &#123;@link #readyAsyncCalls&#125; to &#123;@link #runningAsyncCalls&#125; and runs</span></span><br><span class="line"><span class="comment">  * them on the executor service. Must not be called with synchronization because executing calls</span></span><br><span class="line"><span class="comment">  * can call into user code.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * @return true if the dispatcher is currently running calls.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="built_in">boolean</span> promoteAndExecute() &#123;</span><br><span class="line">  <span class="keyword">assert</span> (!Thread.holdsLock(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">  List&lt;AsyncCall&gt; executableCalls = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  <span class="built_in">boolean</span> isRunning;</span><br><span class="line">  <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (Iterator&lt;AsyncCall&gt; i = readyAsyncCalls.iterator(); i.hasNext(); ) &#123;</span><br><span class="line">    AsyncCall asyncCall = i.next();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (runningAsyncCalls.<span class="built_in">size</span>() &gt;= maxRequests) <span class="keyword">break</span>; <span class="comment">// Max capacity.</span></span><br><span class="line">    <span class="keyword">if</span> (runningCallsForHost(asyncCall) &gt;= maxRequestsPerHost) <span class="keyword">continue</span>; <span class="comment">// Host max capacity.</span></span><br><span class="line"></span><br><span class="line">    i.remove();</span><br><span class="line">    executableCalls.<span class="built_in">add</span>(asyncCall);</span><br><span class="line">    runningAsyncCalls.<span class="built_in">add</span>(asyncCall);</span><br><span class="line">    &#125;</span><br><span class="line">    isRunning = runningCallsCount() &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>, <span class="built_in">size</span> = executableCalls.<span class="built_in">size</span>(); i &lt; <span class="built_in">size</span>; i++) &#123;</span><br><span class="line">    AsyncCall asyncCall = executableCalls.<span class="built_in">get</span>(i);</span><br><span class="line">    asyncCall.executeOn(executorService());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> isRunning;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>这里分三步走，<strong>首先</strong>将传入的AsyncCall（这其实是一个Runnable对象）加入准备要执行的异步请求队列，<strong>其次</strong>调用promoteAndExecute()方法，变量准备要执行的异步请求队列，如果队列任务数超过最大并发请求数，则直接退出遍历，则不会进行下面的操作；如果超过每个主机最大请求数，则跳过这次循环，继续下一次遍历，否则将异步任务加入到正在执行的异步请求队列，<strong>最后</strong>遍历保存异步任务的队列，执行AsyncCall.executeOn(executorService())方法，并且传入了Dispatcher的默认线程池。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Attempt to enqueue this async call on &#123;<span class="doctag">@code</span> executorService&#125;. This will attempt to clean up</span></span><br><span class="line"><span class="comment"> * if the executor has been shut down by reporting the call as failed.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">executeOn</span><span class="params">(ExecutorService executorService)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">assert</span> (!Thread.holdsLock(client.dispatcher()));</span><br><span class="line">  <span class="keyword">boolean</span> success = <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    executorService.execute(<span class="keyword">this</span>);</span><br><span class="line">    success = <span class="keyword">true</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (RejectedExecutionException e) &#123;</span><br><span class="line">    InterruptedIOException ioException = <span class="keyword">new</span> InterruptedIOException(<span class="string">"executor rejected"</span>);</span><br><span class="line">    ioException.initCause(e);</span><br><span class="line">    eventListener.callFailed(RealCall.<span class="keyword">this</span>, ioException);</span><br><span class="line">    responseCallback.onFailure(RealCall.<span class="keyword">this</span>, ioException);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">      client.dispatcher().finished(<span class="keyword">this</span>); <span class="comment">// This call is no longer running!</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过执行AsyncCall.executeOn()方法的源码，我们看到Dispatcher的线程池执行了execute(this)方法，<strong>执行异步任务</strong>，并且指向的是this，也就是当前的<strong>AsyncCall</strong>对象（RealCall的内部类），而AsyncCall实现了抽象类<strong>NamedRunnable</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Runnable implementation which always sets its thread name.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">NamedRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NamedRunnable</span><span class="params">(String format, Object... args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = Util.format(format, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  String oldName = Thread.currentThread().getName();</span><br><span class="line">  Thread.currentThread().setName(name);</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line">  execute();</span><br><span class="line"> &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  Thread.currentThread().setName(oldName);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>可以看到NamedRunnable中run()方法调用了抽象方法execute()，也就说明execute()的实现在AsyncCall对象中，而上面线程池执行的异步任务也是调用这个execute()方法，我们看看AsyncCall对象中execute()方法的实现</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">@Override <span class="keyword">protected</span> <span class="keyword">void</span> execute() &#123;</span><br><span class="line"> <span class="keyword">boolean</span> signalledCallback = <span class="keyword">false</span>;</span><br><span class="line"> timeout.enter();</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line">   Response response = getResponseWithInterceptorChain();</span><br><span class="line">   <span class="keyword">if</span> (retryAndFollowUpInterceptor.isCanceled()) &#123;</span><br><span class="line">     signalledCallback = <span class="keyword">true</span>;</span><br><span class="line">     responseCallback.onFailure(RealCall.<span class="keyword">this</span>, <span class="keyword">new</span> IOException(<span class="string">"Canceled"</span>));</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     signalledCallback = <span class="keyword">true</span>;</span><br><span class="line">     responseCallback.onResponse(RealCall.<span class="keyword">this</span>, response);</span><br><span class="line">   &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">   e = timeoutExit(e);</span><br><span class="line">   <span class="keyword">if</span> (signalledCallback) &#123;</span><br><span class="line">     <span class="comment">// Do not signal the callback twice!</span></span><br><span class="line">     Platform.get().log(INFO, <span class="string">"Callback failure for "</span> + toLoggableString(), e);</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     eventListener.callFailed(RealCall.<span class="keyword">this</span>, e);</span><br><span class="line">     responseCallback.onFailure(RealCall.<span class="keyword">this</span>, e);</span><br><span class="line">   &#125;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">   client.dispatcher().finished(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">/**Dispatcher的finished方法*/</span></span><br><span class="line">   <span class="comment">/** Used by &#123;@code AsyncCall#run&#125; to signal completion. */</span></span><br><span class="line">   <span class="keyword">void</span> finished(AsyncCall <span class="keyword">call</span>) &#123;</span><br><span class="line">   finished(runningAsyncCalls, <span class="keyword">call</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/** Used by &#123;@code Call#execute&#125; to signal completion. */</span></span><br><span class="line">    <span class="keyword">void</span> finished(RealCall <span class="keyword">call</span>) &#123;</span><br><span class="line">    finished(runningSyncCalls, <span class="keyword">call</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> &lt;T&gt; <span class="keyword">void</span> finished(Deque&lt;T&gt; calls, T <span class="keyword">call</span>) &#123;</span><br><span class="line">     Runnable idleCallback;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!calls.remove(<span class="keyword">call</span>)) <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(<span class="string">"Call wasn't in-flight!"</span>);</span><br><span class="line">    idleCallback = <span class="keyword">this</span>.idleCallback;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">boolean</span> isRunning = promoteAndExecute();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (!isRunning &amp;&amp; idleCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">    idleCallback.run();</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>我们可以先关注最后一行，不管前面请求如何，最后finally代码块中都执行了Dispatcher的finished方法，要是要将当前任务从runningAsyncCalls或runningSyncCalls 中移除， 同时把readyAsyncCalls的任务调度到runningAsyncCalls中并执行而finished方法中执行了promoteAndExecute()方法，经过前面对该方法分析，说明不管当前执行的任务如何，都会OkHttp都会去readyAsyncCalls（准备要执行的异步请求队列）取出下一个请求继续执行。接下来我们继续回到AsyncCall对象中的execute()方法，可以发现getResponseWithInterceptorChain()的方法返回了Response，说明在该方法中执行了我们的网络请求。而不管同步还是异步请求，都是通过getResponseWithInterceptorChain()完成网络请求。</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Response getResponseWithInterceptorChain() throws IOException &#123;</span><br><span class="line"><span class="comment">// Build a full stack of interceptors.</span></span><br><span class="line">List&lt;Interceptor&gt; interceptors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">interceptors.addAll(<span class="keyword">client</span>.interceptors());</span><br><span class="line">interceptors.add(retryAndFollowUpInterceptor);</span><br><span class="line">interceptors.add(<span class="keyword">new</span> BridgeInterceptor(<span class="keyword">client</span>.cookieJar()));</span><br><span class="line">interceptors.add(<span class="keyword">new</span> CacheInterceptor(<span class="keyword">client</span>.internalCache()));</span><br><span class="line">interceptors.add(<span class="keyword">new</span> ConnectInterceptor(<span class="keyword">client</span>));</span><br><span class="line"><span class="keyword">if</span> (!forWebSocket) &#123;</span><br><span class="line"> interceptors.addAll(<span class="keyword">client</span>.networkInterceptors());</span><br><span class="line"> &#125;</span><br><span class="line">interceptors.add(<span class="keyword">new</span> CallServerInterceptor(forWebSocket));</span><br><span class="line"></span><br><span class="line"> Interceptor.Chain chain = <span class="keyword">new</span> RealInterceptorChain(interceptors, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="number">0</span>,</span><br><span class="line"> originalRequest, <span class="keyword">this</span>, eventListener, <span class="keyword">client</span>.connectTimeoutMillis(),</span><br><span class="line"> <span class="keyword">client</span>.readTimeoutMillis(), <span class="keyword">client</span>.writeTimeoutMillis());</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> chain.proceed(originalRequest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="拦截器（Interceptor）"><a href="#拦截器（Interceptor）" class="headerlink" title="拦截器（Interceptor）"></a>拦截器（Interceptor）</h4><ul><li>由getResponseWithInterceptorChain()方法我们看到添加了很多Interceptor（拦截器），首先要了解每个Interceptor的作用，也能大致了解OKHttp完成网络请求的过程。</li><li>1.首先加入我们自定义的interceptors</li><li>2.通过RetryAndFollowUpInterceptor处理网络请求重试</li><li>3.通过BridgeInterceptor处理请求对象转换，应用层到网络层</li><li>4.通过CacheInterceptor处理缓存</li><li>5.通过ConnectInterceptor处理网络请求链接</li><li><p>6.通过CallServerInterceptor处理读写，和服务器通信，进行真正的网络请求</p><h4 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h4></li><li><p>在阅读接下来源码之前，我们先要了解责任链模式。通俗化的讲<strong>在责任链模式中有很多对象，这些对象可以理解为上面列出的拦截器，而每个对象之间都通过一条链子连接，网络请求在这条链子上传递，直到某一个对象处理了这个网络请求，也就是完成了网络请求</strong>。使用这个模式的好处就是不管你用多少拦截器处理什么操作，最终都不会影响我们的发出请求的目的，就是完成网络请求，拦截过程你可以任意添加分配责任。</p></li><li><p>接着继续看Interceptor.Chain，他是Interceptor的内部接口，前面添加的每一个拦截器都实现了Interceptor接口，而RealInterceptorChain是Interceptor.Chain接口的实现类。先看RealInterceptorChain的proceed方法源码</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Response proceed(Request request, StreamAllocation streamAllocation, HttpCodec httpCodec,</span><br><span class="line">RealConnection connection) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="keyword">if</span> (index &gt;= interceptors.<span class="keyword">size</span>()) <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line"></span><br><span class="line"> calls++;</span><br><span class="line"> ......</span><br><span class="line"> <span class="comment">// Call the next interceptor in the chain.</span></span><br><span class="line">  RealInterceptorChain <span class="keyword">next</span> = <span class="keyword">new</span> RealInterceptorChain(interceptors, streamAllocation, httpCodec,</span><br><span class="line">  connection, index + <span class="number">1</span>, request, <span class="keyword">call</span>, eventListener, connectTimeout, readTimeout,</span><br><span class="line">  writeTimeout);</span><br><span class="line">  Interceptor interceptor = interceptors.get(index);</span><br><span class="line">  Response response = interceptor.intercept(<span class="keyword">next</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Confirm that the next interceptor made its required call to chain.proceed().</span></span><br><span class="line">  <span class="keyword">if</span> (httpCodec != <span class="keyword">null</span> &amp;&amp; index + <span class="number">1</span> &lt; interceptors.<span class="keyword">size</span>() &amp;&amp; <span class="keyword">next</span>.calls != <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"network interceptor "</span> + interceptor</span><br><span class="line">    + <span class="string">" must call proceed() exactly once"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  .....</span><br><span class="line">  <span class="keyword">return</span> response;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>通过源码可以注意到interceptor.intercept(next)，RetryAndFollowUpInterceptor作为默认拦截器的第一个拦截器，也就是执行了它的intercept方法</p><h4 id="RetryAndFollowUpInterceptor"><a href="#RetryAndFollowUpInterceptor" class="headerlink" title="RetryAndFollowUpInterceptor"></a>RetryAndFollowUpInterceptor</h4></li><li><p>前面说过RetryAndFollowUpInterceptor拦截器执行OKHttp网络重试，先看它的intercept方法</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**RetryAndFollowUpInterceptor的intercept方法 **/</span></span><br><span class="line">   @Override <span class="keyword">public</span> Response intercept(Chain chain) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">Request request = chain.request();</span><br><span class="line">RealInterceptorChain realChain = (RealInterceptorChain) chain;</span><br><span class="line"><span class="keyword">Call</span> <span class="keyword">call</span> = realChain.<span class="keyword">call</span>();</span><br><span class="line">EventListener eventListener = realChain.eventListener();</span><br><span class="line"></span><br><span class="line">StreamAllocation streamAllocation = <span class="keyword">new</span> StreamAllocation(client.connectionPool(),</span><br><span class="line">    createAddress(request.url()), <span class="keyword">call</span>, eventListener, callStackTrace);</span><br><span class="line"><span class="keyword">this</span>.streamAllocation = streamAllocation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> followUpCount = <span class="number">0</span>;</span><br><span class="line">Response priorResponse = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (canceled) &#123;</span><br><span class="line">    streamAllocation.release();</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Canceled"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="comment">//将请求通过链子chain传递到下一个拦截器</span></span><br><span class="line">  Response response;</span><br><span class="line">  <span class="keyword">boolean</span> releaseConnection = <span class="keyword">true</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    response = realChain.proceed(request, streamAllocation, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    releaseConnection = <span class="keyword">false</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (RouteException e) &#123;</span><br><span class="line">    <span class="comment">// 线路异常，连接失败，检查是否可以重新连接</span></span><br><span class="line">    <span class="keyword">if</span> (!recover(e.getLastConnectException(), streamAllocation, <span class="keyword">false</span>, request)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> e.getFirstConnectException();</span><br><span class="line">    &#125;</span><br><span class="line">    releaseConnection = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    <span class="comment">// An attempt to communicate with a server failed. The request may have been sent.</span></span><br><span class="line">    <span class="comment">// IO异常，连接失败，检查是否可以重新连接</span></span><br><span class="line">    <span class="keyword">boolean</span> requestSendStarted = !(e <span class="keyword">instanceof</span> ConnectionShutdownException);</span><br><span class="line">    <span class="keyword">if</span> (!recover(e, streamAllocation, requestSendStarted, request)) <span class="keyword">throw</span> e;</span><br><span class="line">    releaseConnection = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// We're throwing an unchecked exception. Release any resources. 释放资源</span></span><br><span class="line">    <span class="keyword">if</span> (releaseConnection) &#123;</span><br><span class="line">      streamAllocation.streamFailed(<span class="keyword">null</span>);</span><br><span class="line">      streamAllocation.release();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Attach the prior response if it exists. Such responses never have a body.</span></span><br><span class="line">  <span class="keyword">if</span> (priorResponse != <span class="keyword">null</span>) &#123;</span><br><span class="line">    response = response.newBuilder()</span><br><span class="line">        .priorResponse(priorResponse.newBuilder()</span><br><span class="line">                .body(<span class="keyword">null</span>)</span><br><span class="line">                .build())</span><br><span class="line">        .build();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Request followUp;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//效验状态码、身份验证头信息、跟踪重定向或处理客户端请求超时</span></span><br><span class="line">    followUp = followUpRequest(response, streamAllocation.route());</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    streamAllocation.release();</span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (followUp == <span class="keyword">null</span>) &#123;</span><br><span class="line">    streamAllocation.release();</span><br><span class="line">     <span class="comment">// 不需要重定向，正常返回结果</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  closeQuietly(response.body());</span><br><span class="line">  <span class="comment">//超过重试次数</span></span><br><span class="line">  <span class="keyword">if</span> (++followUpCount &gt; MAX_FOLLOW_UPS) &#123;</span><br><span class="line">    streamAllocation.release();</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ProtocolException(<span class="string">"Too many follow-up requests: "</span> + followUpCount);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (followUp.body() <span class="keyword">instanceof</span> UnrepeatableRequestBody) &#123;</span><br><span class="line">    streamAllocation.release();</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> HttpRetryException(<span class="string">"Cannot retry streamed HTTP body"</span>, response.code());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!sameConnection(response, followUp.url())) &#123;</span><br><span class="line">    streamAllocation.release();</span><br><span class="line">    streamAllocation = <span class="keyword">new</span> StreamAllocation(client.connectionPool(),</span><br><span class="line">        createAddress(followUp.url()), <span class="keyword">call</span>, eventListener, callStackTrace);</span><br><span class="line">    <span class="keyword">this</span>.streamAllocation = streamAllocation;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (streamAllocation.codec() != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Closing the body of "</span> + response</span><br><span class="line">        + <span class="string">" didn't close its backing stream. Bad interceptor?"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  request = followUp;</span><br><span class="line">  priorResponse = response;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>通过RetryAndFollowUpInterceptor拦截器intercept方法源码，能够理解到OKHttp的重试机制</p></li><li>1.首先创建StreamAllocation对象（稍后分析），在一个死循环中将通过链子chain传递到下一个拦截器，如果捕获异常，则判断异常是否恢复连接，不能连接则抛出异常，跳出循环并是否创建的连接池资源</li><li>2.第一步没有异常，还要返回值效验状态码、头部信息、是否需要重定向、连接超时等信息，捕获异常则抛出并退出循环</li><li>3.如果如果重定向，循环超出RetryAndFollowUpInterceptor拦截器的最大重试次数，也抛出异常，退出循环<br><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3OKhttp/RetryAndFollowUpInterceptor%E6%8B%A6%E6%88%AA%E5%99%A8%E9%87%8D%E8%AF%95%E6%9C%BA%E5%88%B6%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="RetryAndFollowUpInterceptor拦截器重试机制流程图">  </li><li><p>通过拦截器RetryAndFollowUpInterceptor调用(RealInterceptorChain) chain.proceed()方法，又再次回到了我们刚刚分析proceed()方法，而该方法继续调用下一个拦截器的intercept()方法，这个拦截器就是默认的第二个拦截器BridgeInterceptor</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Bridges from application code <span class="keyword">to</span> network code. First it builds a network <span class="built_in">request</span> from a user</span><br><span class="line"> * <span class="built_in">request</span>. <span class="keyword">Then</span> it proceeds <span class="keyword">to</span> <span class="keyword">call</span> the network. Finally it builds a user <span class="built_in">response</span> from the network</span><br><span class="line"> * <span class="built_in">response</span>.</span><br><span class="line"> * BridgeInterceptor的intercept方法</span><br><span class="line"> */</span><br><span class="line">@Override <span class="keyword">public</span> <span class="built_in">Response</span> intercept(Chain chain) throws IOException &#123;</span><br><span class="line"> <span class="built_in">Request</span> userRequest = chain.<span class="built_in">request</span>();</span><br><span class="line"> <span class="built_in">Request</span>.Builder requestBuilder = userRequest.newBuilder();</span><br><span class="line"></span><br><span class="line"> RequestBody body = userRequest.body();</span><br><span class="line"> ......</span><br><span class="line"> <span class="built_in">Response</span> networkResponse = chain.proceed(requestBuilder.build());</span><br><span class="line"> ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>该拦截器主要实现了网络请求中应用层到网络层之间的数据编码桥梁。根据用户请求建立网络连接，根据网络响应建立网络响应，也可以看到该方法 继续调用了chain.proceed()方法，同理，根据前面分析会调用第三个默认拦截器CacheInterceptor的intercept方法。</p><h4 id="CacheInterceptor"><a href="#CacheInterceptor" class="headerlink" title="CacheInterceptor"></a>CacheInterceptor</h4></li><li><p>前面我们说过这个拦截器是处理缓存的，接下来看看源码是如何实现的</p><figure class="highlight pony"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拦截器CacheInterceptor的intercept方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@<span class="type">Override</span> public <span class="type">Response</span> intercept(<span class="type">Chain</span> chain) throws <span class="type">IOException</span> &#123;</span><br><span class="line"><span class="type">Response</span> cacheCandidate = cache != null</span><br><span class="line">   ? cache.get(chain.request())</span><br><span class="line">   : null;</span><br><span class="line"></span><br><span class="line">long now = <span class="type">System</span>.currentTimeMillis();</span><br><span class="line"><span class="comment">//获取策略，假设当前可以使用网络</span></span><br><span class="line"><span class="type">CacheStrategy</span> strategy = <span class="function"><span class="keyword">new</span> <span class="title">CacheStrategy</span>.<span class="title">Factory</span>(now, chain.request(), <span class="title">cacheCandidate</span>).<span class="title">get</span>();</span></span><br><span class="line"><span class="function"><span class="title">Request</span> <span class="title">networkRequest</span> = <span class="title">strategy</span>.<span class="title">networkRequest</span>;</span></span><br><span class="line"><span class="function"><span class="title">Response</span> <span class="title">cacheResponse</span> = <span class="title">strategy</span>.<span class="title">cacheResponse</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">if</span> (cache != null) &#123;</span></span><br><span class="line"><span class="function"> <span class="title">cache</span>.<span class="title">trackResponse</span>(strategy);</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">if</span> (cacheCandidate != null &amp;&amp; cacheResponse == null) &#123;</span></span><br><span class="line"><span class="function"> <span class="title">closeQuietly</span>(cacheCandidate.body()); <span class="comment">// The cache candidate wasn't applicable. Close it.</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> <span class="comment">// If we're forbidden from using the network and the cache is insufficient, fail. 如果网络被禁止使用并且没有缓存，则请求失败</span></span></span><br><span class="line"><span class="function"> <span class="title">if</span> (networkRequest == null &amp;&amp; cacheResponse == null) &#123;</span></span><br><span class="line"><span class="function">     <span class="title">return</span> <span class="title">new</span> <span class="title">Response</span>.<span class="title">Builder</span>()</span></span><br><span class="line"><span class="function">     .<span class="title">request</span>(chain.request())</span></span><br><span class="line"><span class="function">     .<span class="title">protocol</span>(<span class="type">Protocol</span>.<span class="type">HTTP_1_1</span>)</span></span><br><span class="line"><span class="function">     .<span class="title">code</span>(<span class="number">504</span>)</span></span><br><span class="line"><span class="function">     .<span class="title">message</span>("<span class="type">Unsatisfiable</span> <span class="type">Request</span> (only-if-cached)")</span></span><br><span class="line"><span class="function">     .<span class="title">body</span>(<span class="type">Util</span>.<span class="type">EMPTY_RESPONSE</span>)</span></span><br><span class="line"><span class="function">     .<span class="title">sentRequestAtMillis</span>(<span class="number">-1</span>L)</span></span><br><span class="line"><span class="function">     .<span class="title">receivedResponseAtMillis</span>(<span class="type">System</span>.currentTimeMillis())</span></span><br><span class="line"><span class="function">     .<span class="title">build</span>();</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// If we don't need the network, we're done.如果有缓存，则返回响应缓存，请求完成</span></span></span><br><span class="line"><span class="function"><span class="title">if</span> (networkRequest == null) &#123;</span></span><br><span class="line"><span class="function"> <span class="title">return</span> <span class="title">cacheResponse</span>.<span class="title">newBuilder</span>()</span></span><br><span class="line"><span class="function">     .<span class="title">cacheResponse</span>(stripBody(cacheResponse))</span></span><br><span class="line"><span class="function">     .<span class="title">build</span>();</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Response</span> <span class="title">networkResponse</span> = <span class="title">null</span>;</span></span><br><span class="line"><span class="function"><span class="title">try</span> &#123;</span></span><br><span class="line"><span class="function"><span class="comment">//没有缓存，则进行网络请求，执行下一个拦截器</span></span></span><br><span class="line"><span class="function"> <span class="title">networkResponse</span> = <span class="title">chain</span>.<span class="title">proceed</span>(networkRequest);</span></span><br><span class="line"><span class="function"> &#125; <span class="title">finally</span> &#123;</span></span><br><span class="line"><span class="function"> <span class="comment">// If we're crashing on I/O or otherwise, don't leak the cache body.</span></span></span><br><span class="line"><span class="function"> <span class="title">if</span> (networkResponse == null &amp;&amp; cacheCandidate != null) &#123;</span></span><br><span class="line"><span class="function">   <span class="title">closeQuietly</span>(cacheCandidate.body());</span></span><br><span class="line"><span class="function"> &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> <span class="comment">// If we have a cache response too, then we're doing a conditional get.</span></span></span><br><span class="line"><span class="function"> <span class="title">if</span> (cacheResponse != null) &#123;</span></span><br><span class="line"><span class="function">  <span class="comment">//状态码 304 </span></span></span><br><span class="line"><span class="function">  <span class="title">if</span> (networkResponse.code() == <span class="title">HTTP_NOT_MODIFIED</span>) &#123;</span></span><br><span class="line"><span class="function">   <span class="title">Response</span> <span class="title">response</span> = <span class="title">cacheResponse</span>.<span class="title">newBuilder</span>()</span></span><br><span class="line"><span class="function">       .<span class="title">headers</span>(combine(cacheResponse.headers(), <span class="title">networkResponse</span>.<span class="title">headers</span>()))</span></span><br><span class="line"><span class="function">       .<span class="title">sentRequestAtMillis</span>(networkResponse.sentRequestAtMillis())</span></span><br><span class="line"><span class="function">       .<span class="title">receivedResponseAtMillis</span>(networkResponse.receivedResponseAtMillis())</span></span><br><span class="line"><span class="function">       .<span class="title">cacheResponse</span>(stripBody(cacheResponse))</span></span><br><span class="line"><span class="function">       .<span class="title">networkResponse</span>(stripBody(networkResponse))</span></span><br><span class="line"><span class="function">       .<span class="title">build</span>();</span></span><br><span class="line"><span class="function">   <span class="title">networkResponse</span>.<span class="title">body</span>().<span class="title">close</span>();</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">   <span class="comment">// Update the cache after combining headers but before stripping the</span></span></span><br><span class="line"><span class="function">   <span class="comment">// Content-Encoding header (as performed by initContentStream()).</span></span></span><br><span class="line"><span class="function">   <span class="title">cache</span>.<span class="title">trackConditionalCacheHit</span>();</span></span><br><span class="line"><span class="function">   <span class="title">cache</span>.<span class="title">update</span>(cacheResponse, response);</span></span><br><span class="line"><span class="function">   <span class="title">return</span> <span class="title">response</span>;</span></span><br><span class="line"><span class="function">  &#125; <span class="title">else</span> &#123;</span></span><br><span class="line"><span class="function">   <span class="title">closeQuietly</span>(cacheResponse.body());</span></span><br><span class="line"><span class="function">  &#125;</span></span><br><span class="line"><span class="function"> &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> <span class="title">Response</span> <span class="title">response</span> = <span class="title">networkResponse</span>.<span class="title">newBuilder</span>()</span></span><br><span class="line"><span class="function">   .<span class="title">cacheResponse</span>(stripBody(cacheResponse))</span></span><br><span class="line"><span class="function">   .<span class="title">networkResponse</span>(stripBody(networkResponse))</span></span><br><span class="line"><span class="function">   .<span class="title">build</span>();</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> <span class="title">if</span> (cache != null) &#123;</span></span><br><span class="line"><span class="function"> <span class="title">if</span> (<span class="type">HttpHeaders</span>.hasBody(response) &amp;&amp; <span class="title">CacheStrategy</span>.<span class="title">isCacheable</span>(response, networkRequest)) &#123;</span></span><br><span class="line"><span class="function">   <span class="comment">// Offer this request to the cache.</span></span></span><br><span class="line"><span class="function">   <span class="comment">//保存缓存</span></span></span><br><span class="line"><span class="function">   <span class="title">CacheRequest</span> <span class="title">cacheRequest</span> = <span class="title">cache</span>.<span class="title">put</span>(response);</span></span><br><span class="line"><span class="function">   <span class="title">return</span> <span class="title">cacheWritingResponse</span>(cacheRequest, response);</span></span><br><span class="line"><span class="function"> &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  <span class="title">if</span> (<span class="type">HttpMethod</span>.invalidatesCache(networkRequest.method())) &#123;</span></span><br><span class="line"><span class="function">   <span class="title">try</span> &#123;</span></span><br><span class="line"><span class="function">     <span class="title">cache</span>.<span class="title">remove</span>(networkRequest);</span></span><br><span class="line"><span class="function">   &#125; <span class="title">catch</span> (<span class="type">IOException</span> ignored) &#123;</span></span><br><span class="line"><span class="function">     <span class="comment">// The cache cannot be written.</span></span></span><br><span class="line"><span class="function">   &#125;</span></span><br><span class="line"><span class="function">  &#125;</span></span><br><span class="line"><span class="function"> &#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"> <span class="title">return</span> <span class="title">response</span>;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>先看看intercept方法的大致逻辑</p></li><li>1.首先通过CacheStrategy.Factory().get()获取缓存策略</li><li>2.如果网络被禁止使用并且没有缓存，则请求失败，返回504</li><li>3.如果有响应缓存，则返回响应缓存，请求完成</li><li>4.没有缓存，则进行网络请求，执行下一个拦截器</li><li>5.进行网络请求，如果响应状态码为304，说明客户端缓存了目标资源但不确定该缓存资源是否是最新版本，服务端数据没变化，继续使用缓存</li><li>6.最后保存缓存</li><li>缓存的场景也符合设计模式中的<strong>策略模式</strong>，需要CacheStrategy提供策略在不同场景下读缓存还是请求网络。</li><li><p>了解了缓存逻辑，继续深入了解OKHttp的缓存是如何做的。首先我们应该回到最初的缓存拦截器设置代码</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**RealCall 设置缓存拦截器*/</span></span><br><span class="line">interceptors.add(<span class="keyword">new</span> CacheInterceptor(client.internalCache()));</span><br><span class="line"></span><br><span class="line"><span class="comment">/**OkHttpClient 设置缓存*/</span></span><br><span class="line">Cache cache;</span><br><span class="line"><span class="meta">@Override</span> <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">setCache</span><span class="params">(OkHttpClient.Builder builder, InternalCache internalCache)</span> </span>&#123;</span><br><span class="line">  builder.setInternalCache(internalCache);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setInternalCache</span><span class="params">(@Nullable InternalCache internalCache)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.internalCache = internalCache;</span><br><span class="line"><span class="keyword">this</span>.cache = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">InternalCache <span class="title">internalCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cache != <span class="keyword">null</span> ? cache.internalCache : internalCache;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**Cache类中 内部持有 InternalCache */</span></span><br><span class="line"> <span class="keyword">final</span> DiskLruCache cache;</span><br><span class="line"> <span class="keyword">final</span> InternalCache internalCache = <span class="keyword">new</span> InternalCache() &#123;</span><br><span class="line"> <span class="meta">@Override</span> <span class="keyword">public</span> <span class="function">Response <span class="title">get</span><span class="params">(Request request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> Cache.<span class="keyword">this</span>.get(request);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span> <span class="keyword">public</span> <span class="function">CacheRequest <span class="title">put</span><span class="params">(Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> Cache.<span class="keyword">this</span>.put(response);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span> <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(Request request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"> Cache.<span class="keyword">this</span>.remove(request);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span> <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(Response cached, Response network)</span> </span>&#123;</span><br><span class="line"> Cache.<span class="keyword">this</span>.update(cached, network);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span> <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">trackConditionalCacheHit</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> Cache.<span class="keyword">this</span>.trackConditionalCacheHit();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span> <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">trackResponse</span><span class="params">(CacheStrategy cacheStrategy)</span> </span>&#123;</span><br><span class="line"> Cache.<span class="keyword">this</span>.trackResponse(cacheStrategy);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>上面我们分别截取了 RealCall类、OkHttpClient类和Cache类的源码，可以了解到拦截器使用的缓存类是DiskLruCache，设置缓存缓存只能通过OkHttpClient的builder来设置，缓存操作实现是在Cache类中，但是Cache没有实现InternalCache接口，而是持有InternalCache接口的内部类对象来实现缓存的操作方法，这样就使得缓存的操作实现只在Cache内部，外部用户是无法实现缓存操作的，方便框架内部使用，接口扩展也不影响外部。<br><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3OKhttp/Cache%E5%92%8CInternalCache%E7%B1%BB%E4%B9%8B%E9%97%B4%E5%85%B3%E7%B3%BB.png" alt="Cache和InternalCache类之间关系"></p><h4 id="ConnectInterceptor"><a href="#ConnectInterceptor" class="headerlink" title="ConnectInterceptor"></a>ConnectInterceptor</h4></li><li><p>根据前面的分析，缓存拦截器中也会调用chain.proceed方法，所以这时候执行到了第四个默认拦截器ConnectInterceptor，接着看它的intercept方法</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 拦截器ConnectInterceptor的intercept方法</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Override</span> <span class="keyword">public</span> <span class="function">Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">RealInterceptorChain realChain = (RealInterceptorChain) chain;</span><br><span class="line">Request request = realChain.request();</span><br><span class="line">StreamAllocation streamAllocation = realChain.streamAllocation();</span><br><span class="line"></span><br><span class="line"><span class="comment">// We need the network to satisfy this request. Possibly for validating a conditional GET.</span></span><br><span class="line"><span class="keyword">boolean</span> doExtensiveHealthChecks = !request.method().equals(<span class="string">"GET"</span>);</span><br><span class="line"><span class="comment">//打开连接</span></span><br><span class="line">HttpCodec httpCodec = streamAllocation.newStream(client, chain, doExtensiveHealthChecks);</span><br><span class="line">RealConnection connection = streamAllocation.connection();</span><br><span class="line"><span class="comment">//交由下一个拦截器处理</span></span><br><span class="line"><span class="function"><span class="keyword">return</span> realChain.<span class="title">proceed</span><span class="params">(request, streamAllocation, httpCodec, connection)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>我们看到intercept源码非常简单，通过StreamAllocation打开连接，然后就交由下一个拦截器处理请求。如何连接呢？我们需要搞懂StreamAllocation。</p></li><li><p>StreamAllocation对象负责协调请求和连接池之间的联系。每一个OKHttpClient有它对应的一个连接池，经过前面的分析我们知道StreamAllocation对象的创建在RetryAndFollowUpInterceptor拦截器的intercept方法中创建，而StreamAllocation打开了连接，则连接池在哪创建呢，答案就在OKHttpClient的Builder类构造方法中</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public Builder() &#123;</span><br><span class="line">  .......</span><br><span class="line">  connectionPool = new ConnectionPool();</span><br><span class="line">  .......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>了解了StreamAllocation对象和ConnectionPool对象的创建，下面来分析StreamAllocation是如何打开连接的。首先是streamAllocation.newStream()方法</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> HttpCodec newStream(</span><br><span class="line">    OkHttpClient client, Interceptor.Chain chain, <span class="built_in">boolean</span> doExtensiveHealthChecks) &#123;</span><br><span class="line">    <span class="params">...</span><span class="params">...</span>..</span><br><span class="line">    try &#123;</span><br><span class="line">    RealConnection resultConnection = findHealthyConnection(connectTimeout, readTimeout,</span><br><span class="line">        writeTimeout, pingIntervalMillis, connectionRetryEnabled, doExtensiveHealthChecks);</span><br><span class="line">    <span class="params">...</span><span class="params">...</span>.</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">    throw <span class="literal">new</span> RouteException(e);</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Finds a connection and returns it if it is healthy. If it is unhealthy the process is repeated</span></span><br><span class="line"><span class="comment"> * until a healthy connection is found.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="keyword">private</span> RealConnection findHealthyConnection(int connectTimeout, int readTimeout,</span><br><span class="line">    int writeTimeout, int pingIntervalMillis, <span class="built_in">boolean</span> connectionRetryEnabled,</span><br><span class="line">    <span class="built_in">boolean</span> doExtensiveHealthChecks) throws IOException &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    RealConnection candidate = findConnection(connectTimeout, readTimeout, writeTimeout,</span><br><span class="line">        pingIntervalMillis, connectionRetryEnabled);</span><br><span class="line">    <span class="params">...</span><span class="params">...</span>..      </span><br><span class="line">    <span class="keyword">return</span> candidate;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a connection to host a new stream. This prefers the existing connection if it exists,</span></span><br><span class="line"><span class="comment"> * then the pool, finally building a new connection.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> RealConnection findConnection(int connectTimeout, int readTimeout, int writeTimeout,</span><br><span class="line">    int pingIntervalMillis, <span class="built_in">boolean</span> connectionRetryEnabled) throws IOException &#123;</span><br><span class="line">    <span class="params">...</span><span class="params">...</span><span class="params">...</span><span class="params">...</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">if</span> (result == <span class="built_in">null</span>) &#123;</span><br><span class="line">      <span class="comment">// Attempt to get a connection from the pool.</span></span><br><span class="line">      Internal.instance.get(connectionPool, address, this, <span class="built_in">null</span>);</span><br><span class="line">      <span class="keyword">if</span> (connection != <span class="built_in">null</span>) &#123;</span><br><span class="line">        <span class="comment">//连接复用</span></span><br><span class="line">        foundPooledConnection = <span class="literal">true</span>;</span><br><span class="line">        result = connection;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        selectedRoute = route;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="params">...</span><span class="params">...</span><span class="params">...</span>.</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!foundPooledConnection) &#123;</span><br><span class="line">      <span class="params">...</span><span class="params">...</span>..</span><br><span class="line">      result = <span class="literal">new</span> RealConnection(connectionPool, selectedRoute);</span><br><span class="line">      <span class="comment">//记录每个连接的引用，每个调用必须与同一连接上的调用配对。</span></span><br><span class="line">      acquire(result, <span class="literal">false</span>);</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="params">...</span><span class="params">...</span><span class="params">...</span></span><br><span class="line">    synchronized (connectionPool) &#123;</span><br><span class="line">     <span class="params">...</span><span class="params">...</span>.</span><br><span class="line">    <span class="comment">// Pool the connection. 将连接放入连接池</span></span><br><span class="line">    Internal.instance.put(connectionPool, result);</span><br><span class="line">    <span class="params">...</span><span class="params">...</span></span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  <span class="params">...</span><span class="params">...</span>.</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>根据上面的源码，我们可以知道findHealthyConnection在循环找健康的连接，直到找到连接，说明findConnection方法是寻找连接的核心方法，该方法中存在可以复用的连接则复用，否则创建新的连接，并且记录连接引用，我们可以明白<strong>StreamAllocation主要是为拦截器提供一个连接， 如果连接池中有复用的连接则复用连接， 如果没有则创建新的连接</strong>。<br><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3OKhttp/StreamAllocation%E5%88%9B%E5%BB%BA%E5%92%8C%E5%A4%8D%E7%94%A8%E6%B5%81%E7%A8%8B.png" alt="StreamAllocation创建和复用流程"></p><h4 id="ConnectionPool连接池实现"><a href="#ConnectionPool连接池实现" class="headerlink" title="ConnectionPool连接池实现"></a>ConnectionPool连接池实现</h4></li><li>明白StreamAllocation是如何创建和复用连接池，我们还要明白连接池（ConnectionPool）的是如何实现的。</li><li>理解ConnectionPool之前，我们需要明白<a href="https://www.jianshu.com/p/72de08b802e6" target="_blank" rel="noopener">TCP连接的知识</a>，Tcp建立连接三次握手和断开连接四次握手过程是需要消耗时间的，在http/1.0每一次请求只能打开一次连接，而在http/1.1是支持<strong>持续连接（persistent connection）</strong>，使得一次连接打开之后会保持一段时间，如果还是同一个请求并且使同一个服务器则在这段时间内继续请求连接是可以复用的。而ConnectionPool也实现了这个机制，在它内部持有一个线程池和一个缓存连接的双向列表，连接中最多只能存在5个空闲连接，空闲连接最多只能存活5分钟，空闲连接到期之后定时清理。<figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> ConnectionPool &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Background threads are used to cleanup expired connections. There will be at most a single</span></span><br><span class="line"><span class="comment"> * thread running per connection pool. The thread pool executor permits the pool itself to be</span></span><br><span class="line"><span class="comment"> * garbage collected.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="comment">//线程池</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Executor executor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span> <span class="comment">/* corePoolSize */</span>,</span><br><span class="line"> Integer.MAX_VALUE <span class="comment">/* maximumPoolSize */</span>, <span class="number">60L</span> <span class="comment">/* keepAliveTime */</span>, TimeUnit.SECONDS,</span><br><span class="line"> <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;(), Util.threadFactory(<span class="string">"OkHttp ConnectionPool"</span>, <span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line"> <span class="comment">/** The maximum number of idle connections for each address. */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> maxIdleConnections;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> <span class="built_in">long</span>  keepAliveDurationNs;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> Runnable cleanupRunnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"> <span class="keyword">@Override</span> <span class="keyword">public</span> <span class="keyword">void</span> run() &#123;</span><br><span class="line"> <span class="comment">// 后台定期清理连接的线程</span></span><br><span class="line"> <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">   <span class="built_in">long</span> waitNanos = cleanup(System.nanoTime());</span><br><span class="line">   <span class="keyword">if</span> (waitNanos == -<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">   <span class="keyword">if</span> (waitNanos &gt; <span class="number">0</span>) &#123;</span><br><span class="line">     <span class="built_in">long</span> waitMillis = waitNanos / <span class="number">1000000L</span>;</span><br><span class="line">     waitNanos -= (waitMillis * <span class="number">1000000L</span>);</span><br><span class="line">     <span class="keyword">synchronized</span> (ConnectionPool.<span class="keyword">this</span>) &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">         ConnectionPool.<span class="keyword">this</span>.wait(waitMillis, (<span class="keyword">int</span>) waitNanos);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (InterruptedException ignored) &#123;</span><br><span class="line">       &#125;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="comment">//缓存连接的双向队列</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> Deque&lt;RealConnection&gt; connections = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line"> ............</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Create a new connection pool with tuning parameters appropriate for a single-user  application.</span></span><br><span class="line"><span class="comment">  * The tuning parameters in this pool are subject to change in future OkHttp releases. Currently</span></span><br><span class="line"><span class="comment">  * this pool holds up to 5 idle connections which will be evicted after 5 minutes of inactivity.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">public</span> ConnectionPool() &#123;</span><br><span class="line">  <span class="keyword">this</span>(<span class="number">5</span>, <span class="number">5</span>, TimeUnit.MINUTES);</span><br><span class="line"> &#125;</span><br><span class="line"> ............</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3OKhttp/ConnectionPool%E8%BF%9E%E6%8E%A5%E6%B1%A0%E7%BC%93%E5%AD%98%E6%B8%85%E7%90%86%E6%B5%81%E7%A8%8B.png" alt="ConnectionPool连接池缓存清理流程"></p><ul><li><p>这里还要说的一点是streamAllocation.newStream()返回的HttpCodec对象就是我们编码HTTP请求并解码HTTP响应的接口，他的实现类Http2Codec和Http1Codec对应https和http的解析request与响应response对socket读写过程实现，并最终放到RealConnection对象newCodec类中创建。 </p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">RealConnection类newCodec方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> <span class="keyword">public</span> HttpCodec <span class="keyword">new</span><span class="type">Codec</span>(OkHttpClient client, Interceptor.Chain chain,</span><br><span class="line">  StreamAllocation streamAllocation) throws SocketException &#123;</span><br><span class="line"> <span class="keyword">if</span> (http2Connection != <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">Http2Codec</span>(client, chain, streamAllocation, http2Connection);</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  socket.setSoTimeout(chain.readTimeoutMillis());</span><br><span class="line">  source.timeout().timeout(chain.readTimeoutMillis(), MILLISECONDS);</span><br><span class="line">  sink.timeout().timeout(chain.writeTimeoutMillis(), MILLISECONDS);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">Http1Codec</span>(client, streamAllocation, source, sink);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>streamAllocation得到连接对象，也就是RealConnection对象，它封装了套接字socket连接，也就是该类的connectSocket方法。并且使用OKio来对数据读写。OKio封装了Java的I/O操作，这里就不细说了。最后返回的ConnectInterceptor拦截器的intercept方法同样调用了Chain.proceed，将拿到的连接交由CallServerInterceptor做处理。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Does all the work necessary to build a full HTTP or HTTPS connection on a raw socket. </span></span><br><span class="line"><span class="comment">RealConnection类connectSocket方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> connectSocket(<span class="keyword">int</span> connectTimeout, <span class="keyword">int</span> readTimeout, <span class="keyword">Call</span> <span class="keyword">call</span>,</span><br><span class="line">  EventListener eventListener) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">Proxy proxy = route.proxy();</span><br><span class="line">Address address = route.address();</span><br><span class="line"></span><br><span class="line">rawSocket = proxy.type() == Proxy.Type.DIRECT || proxy.type() == Proxy.Type.HTTP</span><br><span class="line">    ? address.socketFactory().createSocket()</span><br><span class="line">    : <span class="keyword">new</span> Socket(proxy);</span><br><span class="line"></span><br><span class="line">eventListener.connectStart(<span class="keyword">call</span>, route.socketAddress(), proxy);</span><br><span class="line">rawSocket.setSoTimeout(readTimeout);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">//打开 socket 连接</span></span><br><span class="line">  Platform.get().connectSocket(rawSocket, route.socketAddress(), connectTimeout);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ConnectException e) &#123;</span><br><span class="line">  ConnectException ce = <span class="keyword">new</span> ConnectException(<span class="string">"Failed to connect to "</span> + route.socketAddress());</span><br><span class="line">  ce.initCause(e);</span><br><span class="line">  <span class="keyword">throw</span> ce;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The following try/catch block is a pseudo hacky way to get around a crash on Android 7.0</span></span><br><span class="line"><span class="comment">// More details:</span></span><br><span class="line"><span class="comment">// https://github.com/square/okhttp/issues/3245</span></span><br><span class="line"><span class="comment">// https://android-review.googlesource.com/#/c/271775/</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">//使用OKio来对数据读写</span></span><br><span class="line">  <span class="keyword">source</span> = Okio.buffer(Okio.<span class="keyword">source</span>(rawSocket));</span><br><span class="line">  sink = Okio.buffer(Okio.sink(rawSocket));</span><br><span class="line"> &#125; <span class="keyword">catch</span> (NullPointerException npe) &#123;</span><br><span class="line">  <span class="keyword">if</span> (NPE_THROW_WITH_NULL.equals(npe.getMessage())) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IOException(npe);</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>最后返回的ConnectInterceptor拦截器的intercept方法同样调用了Chain.proceed，将拿到的连接交由CallServerInterceptor做处理。</p><h4 id="CallServerInterceptor"><a href="#CallServerInterceptor" class="headerlink" title="CallServerInterceptor"></a>CallServerInterceptor</h4></li><li><p>在经过前面一系列拦截器之后，OKHttp最终把拿到网络请求连接给到CallServerInterceptor拦截器进行网络请求和服务器通信。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**CallServerInterceptor的intercept方法*/</span> </span><br><span class="line">@Override <span class="keyword">public</span> Response intercept(Chain chain) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">RealInterceptorChain realChain = (RealInterceptorChain) chain;</span><br><span class="line">HttpCodec httpCodec = realChain.httpStream();</span><br><span class="line">StreamAllocation streamAllocation = realChain.streamAllocation();</span><br><span class="line">RealConnection connection = (RealConnection) realChain.connection();</span><br><span class="line">Request request = realChain.request();</span><br><span class="line"><span class="keyword">long</span> sentRequestMillis = System.currentTimeMillis();</span><br><span class="line">realChain.eventListener().requestHeadersStart(realChain.<span class="keyword">call</span>());</span><br><span class="line"><span class="comment">//按照HTTP协议，依次写入请求体</span></span><br><span class="line">httpCodec.writeRequestHeaders(request);</span><br><span class="line">.................</span><br><span class="line"> <span class="keyword">if</span> (responseBuilder == <span class="keyword">null</span>) &#123;</span><br><span class="line">  realChain.eventListener().responseHeadersStart(realChain.<span class="keyword">call</span>());</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  responseBuilder = httpCodec.readResponseHeaders(<span class="keyword">false</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> Response response = responseBuilder</span><br><span class="line">    .request(request)</span><br><span class="line">    .handshake(streamAllocation.connection().handshake())</span><br><span class="line">    .sentRequestAtMillis(sentRequestMillis)</span><br><span class="line">    .receivedResponseAtMillis(System.currentTimeMillis())</span><br><span class="line">    .build();</span><br><span class="line">  ...............</span><br><span class="line">  <span class="keyword">if</span> (forWebSocket &amp;&amp; code == <span class="number">101</span>) &#123;</span><br><span class="line">  <span class="comment">// Connection is upgrading, but we need to ensure interceptors see a non-null response body.</span></span><br><span class="line">  response = response.newBuilder()</span><br><span class="line">      .body(Util.EMPTY_RESPONSE)</span><br><span class="line">      .build();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">//响应数据OKio写入</span></span><br><span class="line">  response = response.newBuilder()</span><br><span class="line">      .body(httpCodec.openResponseBody(response))</span><br><span class="line">      .build();</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**Http1Codec方法**/</span></span><br><span class="line"><span class="comment">//OKio 读写对象</span></span><br><span class="line"><span class="keyword">final</span> BufferedSource <span class="keyword">source</span>;</span><br><span class="line"><span class="keyword">final</span> BufferedSink sink;</span><br><span class="line">@Override <span class="keyword">public</span> <span class="keyword">void</span> writeRequestHeaders(Request request) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//构造好请求头</span></span><br><span class="line">String requestLine = RequestLine.get(</span><br><span class="line">    request, streamAllocation.connection().route().proxy().type());</span><br><span class="line"> writeRequest(request.headers(), requestLine);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">/** Returns bytes of a request header for sending on an HTTP transport.</span></span><br><span class="line"><span class="comment"> 将请求信息写入sink</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> writeRequest(Headers headers, String requestLine) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="keyword">if</span> (state != STATE_IDLE) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"state: "</span> + state);</span><br><span class="line">sink.writeUtf8(requestLine).writeUtf8(<span class="string">"\r\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, <span class="keyword">size</span> = headers.<span class="keyword">size</span>(); i &lt; <span class="keyword">size</span>; i++) &#123;</span><br><span class="line">  sink.writeUtf8(headers.name(i))</span><br><span class="line">      .writeUtf8(<span class="string">": "</span>)</span><br><span class="line">      .writeUtf8(headers.value(i))</span><br><span class="line">      .writeUtf8(<span class="string">"\r\n"</span>);</span><br><span class="line"> &#125;</span><br><span class="line">sink.writeUtf8(<span class="string">"\r\n"</span>);</span><br><span class="line">state = STATE_OPEN_REQUEST_BODY;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>可以看到在CallServerInterceptor拦截器的方法中首先通过HttpCodec（上面贴的是Http1Codec的方法）writeRequestHeaders和writeRequest方法写入请求体，并将请求体写入OKio的写入对象sink中</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**Http1Codec方法**/</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 读取响应头信息</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line">@Override <span class="keyword">public</span> Response.Builder readResponseHeaders(boolean expectContinue) throws IOException &#123;</span><br><span class="line"><span class="keyword">if</span> (state != STATE_OPEN_REQUEST_BODY &amp;&amp; state != STATE_READ_RESPONSE_HEADERS) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">IllegalStateException</span>(<span class="string">"state: "</span> + state);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line">  StatusLine statusLine = StatusLine.parse(readHeaderLine());</span><br><span class="line"></span><br><span class="line">  Response.Builder responseBuilder = <span class="keyword">new</span> <span class="type">Response</span>.Builder()</span><br><span class="line">      .protocol(statusLine.protocol)</span><br><span class="line">      .code(statusLine.code)</span><br><span class="line">      .message(statusLine.message)</span><br><span class="line">      .headers(readHeaders());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (expectContinue &amp;&amp; statusLine.code == HTTP_CONTINUE) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (statusLine.code == HTTP_CONTINUE) &#123;</span><br><span class="line">    state = STATE_READ_RESPONSE_HEADERS;</span><br><span class="line">    <span class="keyword">return</span> responseBuilder;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  state = STATE_OPEN_RESPONSE_BODY;</span><br><span class="line">  <span class="keyword">return</span> responseBuilder;</span><br><span class="line">&#125; <span class="keyword">catch</span> (EOFException e) &#123;</span><br><span class="line">  <span class="comment">// Provide more context if the server ends the stream before sending a response.</span></span><br><span class="line">  IOException exception = <span class="keyword">new</span> <span class="type">IOException</span>(<span class="string">"unexpected end of stream on "</span> + streamAllocation);</span><br><span class="line">  exception.initCause(e);</span><br><span class="line">  <span class="keyword">throw</span> exception;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> 写入响应输入到ResponseBody</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> @Override <span class="keyword">public</span> ResponseBody openResponseBody(Response response) throws IOException &#123;</span><br><span class="line"> streamAllocation.eventListener.responseBodyStart(streamAllocation.call);</span><br><span class="line"> <span class="keyword">String</span> contentType = response.header(<span class="string">"Content-Type"</span>);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (!HttpHeaders.hasBody(response)) &#123;</span><br><span class="line">  Source source = <span class="keyword">new</span><span class="type">FixedLengthSource</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">RealResponseBody</span>(contentType, <span class="number">0</span>, Okio.buffer(source));</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (<span class="string">"chunked"</span>.equalsIgnoreCase(response.header(<span class="string">"Transfer-Encoding"</span>))) &#123;</span><br><span class="line">  Source source = <span class="keyword">new</span><span class="type">ChunkedSource</span>(response.request().url());</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">RealResponseBody</span>(contentType, <span class="number">-1</span>L, Okio.buffer(source));</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> long contentLength = HttpHeaders.contentLength(response);</span><br><span class="line"> <span class="keyword">if</span> (contentLength != <span class="number">-1</span>) &#123;</span><br><span class="line">  Source source = <span class="keyword">new</span><span class="type">FixedLengthSource</span>(contentLength);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">RealResponseBody</span>(contentType, contentLength, Okio.buffer(source));</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">RealResponseBody</span>(contentType, <span class="number">-1</span>L, Okio.buffer(<span class="keyword">new</span><span class="type">UnknownLengthSource</span>()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过readResponseHeaders方法读取响应头信息，openResponseBody得到响应体信息。最终将网络请求的响应信息通过Callback()回调方法异步传递出去，同步请求则直接返回。到此OKHttp源码理解到此为止。</p><h3 id="最后说点"><a href="#最后说点" class="headerlink" title="最后说点"></a>最后说点</h3></li><li><p>通过OKHttp这个框架源码阅读，也是对自己的一个提升，不仅了解了框架原理，设计模式在适宜场景的运用，同时也是对自己耐心的一次考验，源码的阅读是枯燥的，但是只要静下心来，也能发现阅读源码的乐趣。由于本人水平有限，文章中如果有错误，请大家给我提出来，大家一起学习进步，如果觉得我的文章给予你帮助，也请给我一个喜欢和关注。</p></li><li><p>参考链接：</p><ul><li><a href="https://blog.csdn.net/u012124438/article/details/54236967" target="_blank" rel="noopener">深入解析OkHttp3</a></li><li><a href="https://www.imooc.com/article/24025?block_id=tuijian_wz" target="_blank" rel="noopener">OkHttp3源码和设计模式-1</a></li></ul></li><li>参考书籍：<ul><li>《计算机网络》第六版</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/maoqitian/MaoMdPhoto/raw/master/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3OKhttp/OKHttp-logo.png&quot; width=&quot;100%&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在日常开发中网络请求是很常见的功能。OkHttp作为Android开发中最常用的网络请求框架，在Android开发中我们经常结合retrofit一起使用，俗话说得好：“知其然知其所以然”，所以这篇文章我们通过源码来深入理解OKHttp3（基于3.12版本）&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android热门框架解析" scheme="https://www.maoqitian.com/categories/Android%E7%83%AD%E9%97%A8%E6%A1%86%E6%9E%B6%E8%A7%A3%E6%9E%90/"/>
    
    
      <category term="Android" scheme="https://www.maoqitian.com/tags/Android/"/>
    
      <category term="HTTP" scheme="https://www.maoqitian.com/tags/HTTP/"/>
    
      <category term="OKHttp3" scheme="https://www.maoqitian.com/tags/OKHttp3/"/>
    
      <category term="源码分析" scheme="https://www.maoqitian.com/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="Dispatcher" scheme="https://www.maoqitian.com/tags/Dispatcher/"/>
    
      <category term="Interceptor" scheme="https://www.maoqitian.com/tags/Interceptor/"/>
    
  </entry>
  
  <entry>
    <title>仿斗鱼直播后台播放功能实现</title>
    <link href="https://www.maoqitian.com/2019/01/25/%E4%BB%BF%E6%96%97%E9%B1%BC%E7%9B%B4%E6%92%AD%E5%90%8E%E5%8F%B0%E6%92%AD%E6%94%BE%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/"/>
    <id>https://www.maoqitian.com/2019/01/25/仿斗鱼直播后台播放功能实现/</id>
    <published>2019-01-25T14:15:09.000Z</published>
    <updated>2019-01-25T14:19:51.112Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近公司项目需要视频后台播放，后台播放关键点：</p><ul><li>判断应用是否进入后台</li><li>视频如何后台播放</li><li>视频后台播放如何弹出Notification通知</li><li>使用SharedPreferences记录用户是否设置了后台播放（默认开启后台播放）<a id="more"></a></li></ul></blockquote><h3 id="判断应用是否进入后台-Application-ActivityLifecycleCallbacks"><a href="#判断应用是否进入后台-Application-ActivityLifecycleCallbacks" class="headerlink" title="判断应用是否进入后台(Application ActivityLifecycleCallbacks)"></a>判断应用是否进入后台(Application ActivityLifecycleCallbacks)</h3><ul><li>Application生命周期是最长的，由registerActivityLifecycleCallbacks监控当前到底是哪个Activity，并通过mActivityCount记录是否进入后台，进入后台使用发送广播显示notification<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @author maoqitian</span></span><br><span class="line"><span class="comment"> * @Description:</span></span><br><span class="line"><span class="comment"> * @date 2019/1/4 0004 10:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> class MyApplication extends Application &#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> static final <span class="built_in">String</span> <span class="built_in">TAG</span> = <span class="string">"MyApplication"</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 当获取的为0则当前应用在后台，否则不为0则为应用在前台 by maoqitian</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> int mActivityCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 是否进入后台</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="built_in">boolean</span> isBackground=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> @Override</span><br><span class="line"> <span class="keyword">public</span> <span class="literal">void</span> onCreate() &#123;</span><br><span class="line">     super.onCreate();</span><br><span class="line"></span><br><span class="line">     registerActivityLifecycleCallbacks(<span class="literal">new</span> ActivityLifecycleCallbacks() &#123;</span><br><span class="line">         @Override</span><br><span class="line">         <span class="keyword">public</span> <span class="literal">void</span> onActivityCreated(Activity activity, Bundle savedInstanceState) &#123;</span><br><span class="line">             <span class="keyword">Log</span>.d(<span class="built_in">TAG</span>,<span class="string">"onActivityCreated"</span>);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         @Override</span><br><span class="line">         <span class="keyword">public</span> <span class="literal">void</span> onActivityStarted(Activity activity) &#123;</span><br><span class="line">             mActivityCount++;</span><br><span class="line">             <span class="keyword">Log</span>.d(<span class="built_in">TAG</span>,<span class="string">"onActivityStarted"</span>+<span class="string">"mActivityCount ："</span>+mActivityCount +<span class="string">"activityName："</span>+ activity.getClass().getSimpleName());</span><br><span class="line">             <span class="keyword">if</span>(mActivityCount == <span class="number">1</span> &amp;&amp; isBackground</span><br><span class="line">                     &amp;&amp; <span class="string">"PlayerActivity"</span>.<span class="keyword">equals</span>(activity.getClass().getSimpleName())</span><br><span class="line">                     )&#123; <span class="comment">//只有播放器才进行操作判断</span></span><br><span class="line">                 <span class="keyword">Log</span>.d(<span class="built_in">TAG</span>, <span class="string">"onActivityStarted: 播放器进入前台"</span> );</span><br><span class="line">                 Toast.makeText(MyApplication.this,<span class="string">"播放器进入前台"</span>,Toast.LENGTH_LONG).show();</span><br><span class="line">                 isBackground=<span class="literal">false</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         @Override</span><br><span class="line">         <span class="keyword">public</span> <span class="literal">void</span> onActivityResumed(Activity activity) &#123;</span><br><span class="line">             <span class="keyword">Log</span>.d(<span class="built_in">TAG</span>,<span class="string">"onActivityResumed"</span>);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         @Override</span><br><span class="line">         <span class="keyword">public</span> <span class="literal">void</span> onActivityPaused(Activity activity) &#123;</span><br><span class="line">             <span class="keyword">Log</span>.d(<span class="built_in">TAG</span>,<span class="string">"onActivityCreated"</span>);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         @Override</span><br><span class="line">         <span class="keyword">public</span> <span class="literal">void</span> onActivityStopped(Activity activity) &#123;</span><br><span class="line">             <span class="keyword">Log</span>.d(<span class="built_in">TAG</span>,<span class="string">"onActivityStopped"</span>);</span><br><span class="line">             mActivityCount--;</span><br><span class="line">             <span class="keyword">Log</span>.d(<span class="built_in">TAG</span>,<span class="string">"onActivityStopped"</span>+<span class="string">"mActivityCount ："</span>+mActivityCount+<span class="string">"activityName："</span>+ activity.getClass().getSimpleName());</span><br><span class="line">             <span class="keyword">if</span> (mActivityCount &lt;= <span class="number">0</span> &amp;&amp; !isBackground &amp;&amp; isRun(activity)</span><br><span class="line">                     &amp;&amp; <span class="string">"PlayerActivity"</span>.<span class="keyword">equals</span>(activity.getClass().getSimpleName())</span><br><span class="line">                     ) &#123; <span class="comment">//只有播放器才进行操作判断,如果应用在后台运行</span></span><br><span class="line">                 <span class="keyword">Log</span>.e(<span class="built_in">TAG</span>, <span class="string">"onActivityStarted: 播放器进入后台"</span> );</span><br><span class="line">                 isBackground =<span class="literal">true</span>;</span><br><span class="line">                 <span class="comment">//说明应用进入了后台</span></span><br><span class="line">                 PlayerActivity playerActivity = (PlayerActivity) activity;</span><br><span class="line">                 Bundle bundle = playerActivity.onNotificationMsg();</span><br><span class="line">                 Toast.makeText(MyApplication.this,<span class="string">"播放器进入后台播放"</span>,Toast.LENGTH_LONG).show();</span><br><span class="line">                 <span class="comment">//发送显示 notify 广播</span></span><br><span class="line">                 Intent intent=<span class="literal">new</span> Intent(PlayerNotifyBroadcastReceiver.ACTION_NOTIFY_MESSAGE);</span><br><span class="line">                 intent.setClass(getApplicationContext(),PlayerNotifyBroadcastReceiver.class);</span><br><span class="line">                 <span class="keyword">Log</span>.e(<span class="built_in">TAG</span>, <span class="string">"string"</span> +bundle.getString(<span class="string">"unitTitle"</span>));</span><br><span class="line">                 intent.putExtra(<span class="string">"unitTitle"</span>,bundle.getString(<span class="string">"unitTitle"</span>));</span><br><span class="line">                 intent.putExtra(<span class="string">"unitImage"</span>,bundle.getString(<span class="string">"unitImage"</span>));</span><br><span class="line">                 sendBroadcast(intent);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         @Override</span><br><span class="line">         <span class="keyword">public</span> <span class="literal">void</span> onActivitySaveInstanceState(Activity activity, Bundle outState) &#123;</span><br><span class="line">             <span class="keyword">Log</span>.d(<span class="built_in">TAG</span>,<span class="string">"onActivitySaveInstanceState"</span>);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         @Override</span><br><span class="line">         <span class="keyword">public</span> <span class="literal">void</span> onActivityDestroyed(Activity activity) &#123;</span><br><span class="line">             <span class="keyword">Log</span>.d(<span class="built_in">TAG</span>,<span class="string">"onActivityDestroyed"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 判断应用是否在运行</span></span><br><span class="line"><span class="comment">  * @param context</span></span><br><span class="line"><span class="comment">  * @return</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="built_in">boolean</span> isRun(Context context) &#123;</span><br><span class="line">     ActivityManager activityManager= (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);</span><br><span class="line">     assert activityManager != <span class="built_in">null</span>;</span><br><span class="line">     <span class="built_in">List</span>&lt;ActivityManager.RunningTaskInfo&gt; runningTasks = activityManager.getRunningTasks(<span class="number">100</span>);</span><br><span class="line">     <span class="built_in">boolean</span> isAppRunning = <span class="literal">false</span>;</span><br><span class="line">     <span class="built_in">String</span> MY_PKG_NAME = <span class="string">"mao.com.backgroundplay"</span>;</span><br><span class="line">     <span class="comment">//100表示取的最大的任务数，info.topActivity表示当前正在运行的Activity，info.baseActivity表系统后台有此进程在运行</span></span><br><span class="line">     for (ActivityManager.RunningTaskInfo info : runningTasks) &#123;</span><br><span class="line">         <span class="keyword">if</span> (info.topActivity.getPackageName().<span class="keyword">equals</span>(MY_PKG_NAME) || info.baseActivity.getPackageName().<span class="keyword">equals</span>(MY_PKG_NAME)) &#123;</span><br><span class="line">             isAppRunning = <span class="literal">true</span>;</span><br><span class="line">             <span class="keyword">Log</span>.i(<span class="built_in">TAG</span>,info.topActivity.getPackageName() + <span class="string">" info.baseActivity.getPackageName()="</span>+info.baseActivity.getPackageName());</span><br><span class="line">             break;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> isAppRunning;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="监听后台播放广播"><a href="#监听后台播放广播" class="headerlink" title="监听后台播放广播"></a>监听后台播放广播</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @author maoqitian</span></span><br><span class="line"><span class="comment">     * @Description:</span></span><br><span class="line"><span class="comment">     * @date 2019/1/4 0004 10:58</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PlayerNotifyBroadcastReceiver</span> <span class="title">extends</span> <span class="title">BroadcastReceiver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> final String ACTION_NOTIFY_MESSAGE = <span class="string">"com.besto.beautifultv.ACTION_NOTIFY_MESSAGE"</span>;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span>(<span class="params">Context context, Intent intent</span>)</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (intent.getAction() == <span class="literal">null</span> ) <span class="keyword">return</span>;</span><br><span class="line">           <span class="keyword">switch</span> (intent.getAction())&#123;</span><br><span class="line">               <span class="keyword">case</span> ACTION_NOTIFY_MESSAGE:</span><br><span class="line">                   String unitTitle = intent.getStringExtra(<span class="string">"unitTitle"</span>);</span><br><span class="line">                   String unitImage = intent.getStringExtra(<span class="string">"unitImage"</span>);</span><br><span class="line">                   Class&lt;? extends Activity&gt; aClass = AppManager.getInstance().currentActivity().getClass();</span><br><span class="line">                   <span class="keyword">if</span>(aClass != <span class="literal">null</span>)&#123;</span><br><span class="line">                       NotificationUtils notificationUtils = NotificationUtils.getInstance();</span><br><span class="line">                       <span class="comment">//注意 RemoteView 不支持ConstraintLayout布局 支持FrameLayout, LinearLayout, RelativeLayout</span></span><br><span class="line">                       notificationUtils.init(context,aClass, R.layout.notification_layout);</span><br><span class="line">                       notificationUtils.showNotification(unitTitle,unitImage);</span><br><span class="line">                       notificationUtils.getmRemoteViews().setTextViewText(R.id.tv_player_des,<span class="string">"正在后台播放："</span>+unitTitle);</span><br><span class="line">                       notificationUtils.update();</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">```    </span><br><span class="line"><span class="meta">### 当前Activity栈管理（拿到对应的Activity）  </span></span><br><span class="line">```    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @author maoqitian</span></span><br><span class="line"><span class="comment">     * @Description:  Activity栈管理(对应播放器中进行添加进栈出栈) </span></span><br><span class="line"><span class="comment">     * @date 2018/12/29 0029 15:05</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AppManager</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> AppManager instance;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Stack&lt;Activity&gt; activityStack;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AppManager <span class="title">getInstance</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            synchronized (AppManager.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> AppManager();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加Activity到stack中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addActivity</span>(<span class="params">Activity activity</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (activityStack == <span class="literal">null</span>) &#123;</span><br><span class="line">            activityStack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (activityStack.contains(activity)) &#123;</span><br><span class="line">            activityStack.<span class="keyword">remove</span>(activity);</span><br><span class="line">        &#125;</span><br><span class="line">        activityStack.<span class="keyword">add</span>(activity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取stack中当前的Activity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Activity <span class="title">currentActivity</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != activityStack &amp;&amp; <span class="literal">null</span> != activityStack.lastElement()) &#123;</span><br><span class="line">            <span class="keyword">return</span> activityStack.lastElement();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除当前的Activity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finishActivity</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != activityStack &amp;&amp; <span class="literal">null</span> != activityStack.lastElement()) &#123;</span><br><span class="line">            finishActivity(activityStack.lastElement());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除指定的Activity</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param activity 指定的Activity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finishActivity</span>(<span class="params">Activity activity</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (activity != <span class="literal">null</span>) &#123;</span><br><span class="line">            activityStack.<span class="keyword">remove</span>(activity);</span><br><span class="line">            activity.finish();</span><br><span class="line">            activity = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除指定Class所对应的Activity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finishActivity</span>(<span class="params">Class&lt;?&gt; cls</span>)</span> &#123;</span><br><span class="line">        Stack&lt;Activity&gt; activitys = <span class="keyword">new</span> Stack&lt;Activity&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Activity activity : activityStack) &#123;</span><br><span class="line">            <span class="keyword">if</span> (activity.getClass().<span class="keyword">equals</span>(cls)) &#123;</span><br><span class="line">                activitys.<span class="keyword">add</span>(activity);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Activity activity : activitys) &#123;</span><br><span class="line">            finishActivity(activity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除所有的Activity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finishAllActivity</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (activityStack == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, size = activityStack.size(); i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> != activityStack.<span class="keyword">get</span>(i)) &#123;</span><br><span class="line">                activityStack.<span class="keyword">get</span>(i).finish();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        activityStack.clear();</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="添加Notification通知（Notification如何加载网络图片（Glide-target-或者-直接remoteview-直接设置-bitmap））"><a href="#添加Notification通知（Notification如何加载网络图片（Glide-target-或者-直接remoteview-直接设置-bitmap））" class="headerlink" title="添加Notification通知（Notification如何加载网络图片（Glide target 或者 直接remoteview 直接设置 bitmap））"></a>添加Notification通知（Notification如何加载网络图片（Glide target 或者 直接remoteview 直接设置 bitmap））</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> maoqitian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 通知栏工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/12/29 0029 11:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotificationUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> NotificationManager mNotificationManager;</span><br><span class="line"> <span class="keyword">private</span> Notification mNotification;</span><br><span class="line"> <span class="keyword">private</span> Intent mNotificationIntent;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">int</span> notifyId = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">private</span> String mChannelId = <span class="string">"bgPlayChannel"</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> RemoteViews mRemoteViews;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> NotificationUtils mInstance;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">int</span> mLayoutId;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> Context mContext;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="title">NotificationUtils</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//双重效验锁实现单例</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> NotificationUtils <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(mInstance == <span class="keyword">null</span>)&#123;</span><br><span class="line">         <span class="keyword">synchronized</span> (NotificationUtils.class)&#123;</span><br><span class="line">             <span class="keyword">if</span>(mInstance == <span class="keyword">null</span>)&#123;</span><br><span class="line">                 mInstance = <span class="keyword">new</span> NotificationUtils();</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> mInstance;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context, @NonNull Class&lt;?&gt; intentActivity,<span class="keyword">int</span> layoutId)</span></span>&#123;</span><br><span class="line">     mContext = context;</span><br><span class="line">     mLayoutId = layoutId;</span><br><span class="line">     mNotificationManager = (NotificationManager) mContext.getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class="line">     mNotificationIntent = <span class="keyword">new</span> Intent(mContext, intentActivity);</span><br><span class="line">     mNotificationIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP|Intent.FLAG_ACTIVITY_SINGLE_TOP);</span><br><span class="line">     mRemoteViews = <span class="keyword">new</span> RemoteViews(mContext.getPackageName(),mLayoutId);</span><br><span class="line">     <span class="keyword">if</span> (notifyId &lt;= <span class="number">4</span>) &#123;</span><br><span class="line">         <span class="comment">//最多显示4条通知</span></span><br><span class="line">         notifyId += <span class="number">1</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showNotification</span><span class="params">(@NonNull String contentText,String iamgeUrl)</span></span>&#123;</span><br><span class="line">     PendingIntent _pendingIntent = PendingIntent.getActivity(mContext, notifyId, mNotificationIntent,</span><br><span class="line">             PendingIntent.FLAG_UPDATE_CURRENT);</span><br><span class="line"></span><br><span class="line">     Notification.Builder builder = <span class="keyword">null</span>;</span><br><span class="line">     <span class="comment">//notification channel work</span></span><br><span class="line">     <span class="keyword">if</span> (android.os.Build.VERSION.SDK_INT &gt;= android.os.Build.VERSION_CODES.O) &#123;</span><br><span class="line">         NotificationChannel channel = <span class="keyword">new</span> NotificationChannel(mChannelId, <span class="string">"liangTV"</span>,</span><br><span class="line">                 NotificationManager.IMPORTANCE_HIGH);</span><br><span class="line">         channel.enableLights(<span class="keyword">true</span>);<span class="comment">//是否在桌面icon右上角展示小红点</span></span><br><span class="line">         channel.setLightColor(Color.RED);<span class="comment">//小红点颜色</span></span><br><span class="line">         channel.setShowBadge(<span class="keyword">true</span>); <span class="comment">//是否在久按桌面图标时显示此渠道的通知</span></span><br><span class="line">         mNotificationManager.createNotificationChannel(channel);</span><br><span class="line">         builder = <span class="keyword">new</span> Notification.Builder(mContext,mChannelId);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         builder = <span class="keyword">new</span> Notification.Builder(mContext);</span><br><span class="line">     &#125;</span><br><span class="line">     builder.setSmallIcon(R.drawable.ic_logo);</span><br><span class="line">     builder.setContentIntent(_pendingIntent);</span><br><span class="line">     builder.setTicker(contentText);</span><br><span class="line">     <span class="comment">//builder.setCustomContentView(mRemoteViews);</span></span><br><span class="line">     <span class="comment">// mNotification = builder.build();</span></span><br><span class="line">     <span class="comment">//Notification.FLAG_ONLY_ALERT_ONCE 避免8.0在进度更新时候(notify)中多次响铃</span></span><br><span class="line">     mNotification = builder.build();</span><br><span class="line">     mNotification.contentView=mRemoteViews;</span><br><span class="line">     mNotification.flags = Notification.FLAG_NO_CLEAR|Notification.FLAG_ONLY_ALERT_ONCE;</span><br><span class="line">     mNotification.icon = R.drawable.ic_logo;</span><br><span class="line">     <span class="comment">//使用NotificationTarget（Glide）来加载图片</span></span><br><span class="line">     NotificationTarget notificationTarget = <span class="keyword">new</span> NotificationTarget(mContext,mRemoteViews,R.id.notification_Image_play,mNotification,notifyId);</span><br><span class="line">     Glide.with(mContext.getApplicationContext()) <span class="comment">// safer!</span></span><br><span class="line">             .load(iamgeUrl)</span><br><span class="line">             .asBitmap()</span><br><span class="line">             .into( notificationTarget );</span><br><span class="line">     mNotificationManager.notify(notifyId, mNotification);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//清除所有推送通知</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearAllNotification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (mNotificationManager != <span class="keyword">null</span>)</span><br><span class="line">         mNotificationManager.cancelAll();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> RemoteViews <span class="title">getmRemoteViews</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> mRemoteViews;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">     mNotificationManager.notify(notifyId,mNotification);</span><br><span class="line">  &#125; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="视频后台播放处理（Activity-生命周期-surfacedestory-中不进行释放-player）"><a href="#视频后台播放处理（Activity-生命周期-surfacedestory-中不进行释放-player）" class="headerlink" title="视频后台播放处理（Activity 生命周期 surfacedestory 中不进行释放 player）"></a>视频后台播放处理（Activity 生命周期 surfacedestory 中不进行释放 player）</h3><ul><li>对应播放器Activity的各个生命周期方法做相应的播放位置记录（onRestart恢复视频播放 onDestory释放相应资源 onBackPressed中也得需要及时pause视频）  <figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="literal">void</span> surfaceDestroyed(SurfaceHolder holder) &#123;</span><br><span class="line">    <span class="params">...</span><span class="params">...</span></span><br><span class="line">    <span class="keyword">if</span>(ismPauseInBackground())&#123;</span><br><span class="line">        <span class="comment">//尝试进入后台播放不释放播放器，继续播放音频</span></span><br><span class="line">        mMediaPlayer.setDisplay(<span class="built_in">null</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="params">...</span>..</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="手动设置是否进行后台播放-（使用SharedPreferences）"><a href="#手动设置是否进行后台播放-（使用SharedPreferences）" class="headerlink" title="手动设置是否进行后台播放 （使用SharedPreferences）"></a>手动设置是否进行后台播放 （使用SharedPreferences）</h3><ul><li><ul><li>使用SharedPreferences，获取状态</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SharedPreferences </span>toggleBtnSP = this.getSharedPreferences(<span class="string">"toggleButtonState"</span>, <span class="built_in">Context</span>.MODE_PRIVATE)<span class="comment">;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近公司项目需要视频后台播放，后台播放关键点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;判断应用是否进入后台&lt;/li&gt;
&lt;li&gt;视频如何后台播放&lt;/li&gt;
&lt;li&gt;视频后台播放如何弹出Notification通知&lt;/li&gt;
&lt;li&gt;使用SharedPreferences记录用户是否设置了后台播放（默认开启后台播放）&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="https://www.maoqitian.com/categories/Android/"/>
    
    
      <category term="音视频相关功能" scheme="https://www.maoqitian.com/tags/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%9B%B8%E5%85%B3%E5%8A%9F%E8%83%BD/"/>
    
      <category term="Android" scheme="https://www.maoqitian.com/tags/Android/"/>
    
      <category term="Notification" scheme="https://www.maoqitian.com/tags/Notification/"/>
    
      <category term="ActivityLifecycleCallbacks" scheme="https://www.maoqitian.com/tags/ActivityLifecycleCallbacks/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络分层以及TCP协议的运输连接管理</title>
    <link href="https://www.maoqitian.com/2019/01/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%88%86%E5%B1%82%E4%BB%A5%E5%8F%8ATCP%E5%8D%8F%E8%AE%AE%E7%9A%84%E8%BF%90%E8%BE%93%E8%BF%9E%E6%8E%A5%E7%AE%A1%E7%90%86/"/>
    <id>https://www.maoqitian.com/2019/01/23/计算机网络分层以及TCP协议的运输连接管理/</id>
    <published>2019-01-23T15:20:19.000Z</published>
    <updated>2019-01-25T14:18:44.334Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>计算机网络基础对于我们软件开发者来说是很重要的基础知识，不管是日常的开发，抓包，或者网络框架的学习等，计算机网络知识都是基础。而学习计算机网络分层次的体系结构也是最基本的，下面我们就来复习一下计算机网络的体系结构。<br><a id="more"></a></p></blockquote><h2 id="计算机网络体系结构"><a href="#计算机网络体系结构" class="headerlink" title="计算机网络体系结构"></a>计算机网络体系结构</h2><ul><li>想起大学学习计算机网络的时候，我们一般把计算机网络分为五层协议体系结构，分别为应用层、运输层、网络层、数据链路层、物理层。</li><li><strong>计算机网络各层及其协议的集合</strong>我们称为<strong>网络的体系结构</strong>。</li><li>五层协议的体系结构只是为介绍网络原理而设计的，实际应用还是TCP/IP四层体系结构，下面来看看对比图：<h3 id="计算机网络体系结构对比图"><a href="#计算机网络体系结构对比图" class="headerlink" title="计算机网络体系结构对比图"></a>计算机网络体系结构对比图</h3><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%AF%B9%E6%AF%94%E5%9B%BE.png" alt="计算机网络体系结构对比图"><h3 id="五层协议"><a href="#五层协议" class="headerlink" title="五层协议"></a>五层协议</h3><h4 id="应用层（application-layer）"><a href="#应用层（application-layer）" class="headerlink" title="应用层（application layer）"></a>应用层（application layer）</h4></li><li>应用层的任务是<strong>通过应用进程间的交互来完成特定的网络应用</strong>，进程所指的就是<strong>主机正在运行的程序</strong>。应用层协议定义的是<strong>应用进程间通信和交互的规则</strong>（应用协议有很多，比如万维网应用的HTTP,电子邮件协议SMTP,文件传送协议FTP等）；应用层交互的数据单元称为<strong>报文</strong>。<h4 id="运输层（transport-layer）"><a href="#运输层（transport-layer）" class="headerlink" title="运输层（transport layer）"></a>运输层（transport layer）</h4></li><li>运输层的作用是让<strong>两个主机中进程间之间的通信提供通用的数据服务传输服务</strong>，说白了就是在两个主机之间传输应用层的报文。一台主机不可能只有一个进程，所以运输层有复用和分用的功能，复用就是说应用层的多个进程可以同时使用传输层来传输数据，而分用则是指传输层可以分别把传输的数据给到对应的应用层进程</li><li>运输层主要有两种控制协议：</li></ul><table><thead><tr><th>运输层控制协议</th><th>TCP（Transmission Contrl Protocol）</th><th>UDP(User Datagram Protocol)</th></tr></thead><tbody><tr><td>特点</td><td>提供面向连接的、可靠的数据传输服务</td><td>提供无连接的、尽最大努力（best-effort）的数据传输服务</td></tr><tr><td>数据传输单位</td><td>报文段</td><td>用户数据报</td></tr></tbody></table><h4 id="网络层（network-layer）"><a href="#网络层（network-layer）" class="headerlink" title="网络层（network layer）"></a>网络层（network layer）</h4><ul><li>网络层的作用是为分组交换网上的不同主机提供通信服务，在TCP/IP体系结构中网络层使用的IP协议，网络层把运输层传递过来的数据也就是报文段或者用户数据报封装成分组或包进行传送，分组也叫<strong>IP数据报</strong></li><li>网络层还有另一个作用就是使数据传输源主机的运输层传递的分组能够选择合适的路由器找到目的主机。<h4 id="数据链路层（data-link-layer）"><a href="#数据链路层（data-link-layer）" class="headerlink" title="数据链路层（data link layer）"></a>数据链路层（data link layer）</h4></li><li>数据链路层的作用是把网络层传递下来的IP数据报组成帧（frame）数据在两个相邻节点的链路上传递，每一帧包含必要的数据和控制信息（同步信息、地址信息，差错控制等） <h4 id="物理层（physical-layer）"><a href="#物理层（physical-layer）" class="headerlink" title="物理层（physical layer）"></a>物理层（physical layer）</h4></li><li>物理层所传递数据单位是比特，作用为将数据链路层的帧变成比特流在两个主机之间传递（作为传递的物理媒介双绞线，同轴电缆、光缆等并不在物理层的协议之内，而是在物理层协议下面，可以认为是第0层，具体看下图）。</li></ul><h3 id="两个主机之间数据传递流程"><a href="#两个主机之间数据传递流程" class="headerlink" title="两个主机之间数据传递流程"></a>两个主机之间数据传递流程</h3><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE%E5%9C%A8%E5%90%84%E5%B1%82%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BC%A0%E9%80%92%E8%BF%87%E7%A8%8B.png" alt="网络数据在各层之间的传递过程"></p><ul><li>两个主机数据传递也可以用一个简单的例子来说明，就好比两个使用信来彼此联系，寄信人的信就好比是数据，信从最高层传递，也就是寄信人手里，每过一层就相当于包上一个新的信封，写上必要的、交由下一层处理的地址信息。包含多个信封的信件送到收信人手里，收信人从第一层信封拆起，每拆开一个信封后（按照每一层协议进行处理数据），传递到最后收信人取出发信人信件的信息，也就是传递的数据。</li></ul><h3 id="TCP-IP-体系结构"><a href="#TCP-IP-体系结构" class="headerlink" title="TCP/IP 体系结构"></a>TCP/IP 体系结构</h3><ul><li>我们现在提到的TCP/IP并不是单指TCP和IP这两个具体的协议，而是表示因特网所使用的整个TCP/IP协议族。TCP/IP协议可以为各式各样的应用提供服务，同时TCP/IP协议也允许协议在格式各样的网络构成的互联网上运行。<br><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/TCP%20IP%E5%8D%8F%E8%AE%AE%E6%97%8F%E7%A4%BA%E6%84%8F.png" alt="TCP IP协议族示意"></li></ul><h2 id="TCP协议的运输连接管理"><a href="#TCP协议的运输连接管理" class="headerlink" title="TCP协议的运输连接管理"></a>TCP协议的运输连接管理</h2><ul><li>经过前面的网络分层了解，我们都知道运输层有两个重要的协议TCP和UDP,而UDP协议传输是无连接的、不可靠的，所以也就不存在连接管理这一说；而TCP协议是面向连接的，所以才会有连接管理。<h3 id="TCP协议的主要特点"><a href="#TCP协议的主要特点" class="headerlink" title="TCP协议的主要特点"></a>TCP协议的主要特点</h3></li><li>TCP是面向连接的运输层协议，好比打电话，通话前输入号码拨打，等待连接，打完后需要挂断电话。</li><li>每一个TCP连接只能有两个端点，TCP连接只能是点对点的</li><li>TCP提供可靠的交付服务。还是打电话的例子，电话号码指定就是你需要找的人，打通了电话才能通话。</li><li>TCP 提供全双工通信，全双工通信双方既是发送方也是接收方，允许通信双方的应用进程在任何时候都能发送数据。</li><li>面向字节流。TCP中的“流”指的是流入到进程或者从进程流出的字节序列。TCP并不管字节流的含义、大小，只保证传递的字节流和接收的字节流是完全一样的。<h3 id="“三次握手”"><a href="#“三次握手”" class="headerlink" title="“三次握手”"></a>“三次握手”</h3></li><li><p>通过TCP协议的特点，我们知道TCP是面向连接的协议，TCP传递的报文则是通过运输连接来处理的。TCP运输连接的建立和释放是每一次面向连接通信中必不可少的过程。</p></li><li><p>TCP运输连接的管理就是使运输连接的建立和释放都能正常的运行 </p></li><li>运输连接的三个阶段：连接建立，数据传送，连接释放 <h4 id="TCP-连接建立"><a href="#TCP-连接建立" class="headerlink" title="TCP 连接建立"></a>TCP 连接建立</h4></li><li>TCP连接的建立采用客户服务器的方式。什么意思呢？也就是主动发起连接建立的应用进程叫做客户（client）,而被动等待连接建立的应用进程叫做服务器（server）。</li><li>TCP连接的建立也叫“三次握手”建立连接，我们先看看TCP三次握手建立连接示意图：<br><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%BB%BA%E7%AB%8BTCP%E8%BF%9E%E6%8E%A5%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="三次握手建立TCP连接示意图"></li></ul><h4 id="TCP建立连接过程："><a href="#TCP建立连接过程：" class="headerlink" title="TCP建立连接过程："></a>TCP建立连接过程：</h4><ul><li>首先连接未建立之前客户和服务器进程都处于关闭状态（CLOSE）。</li><li>其次开始建立连接，A客户进程是主动打开连接的，B服务器进程则是被动打开连接，A和B两端首先创建传输控制块TCB（Transmission Control Block，TCB存储了每一个连接中的一些重要信息，如：TCP连接表，到发送和接收缓存的指针，到重传队列的指针，当前发送和接收的序号等），然后A向B发送请求报文段，这时TCP数据报文首部中的同部位SYN=1，初始序号seq=x（表示数据段开始的序号），TCP规定SYN=1的报文是不能携带数据的，但是要消耗一个序号，这时候A的状态变成同步已发送状态（SYN-SENT）；B创建了TCB之后则会变成收听（LISTEN）状态。</li><li>B收到A发来的请求连接报文后，如果同意建立连接，则会向A发送确认报文。B向A发送的确认报文SYN位和ACK位都是1，确认序号为ack=x+1(前面A发送请求已经消耗了x序号)，同时B发送的报文初始序号为y，这时B状态为同步收到（SYN-RCVD）状态。</li><li>最后A在收到B的确认报文之后，还要再次向B发送一次确认连接的报文，A发送的再次确认报文段的ACK位为1，确认h号ack=y+1（前面B发送的初始序号已经消耗了y序号），下一个报文段初始序号seq=x+1（TCP规定ACK报文可以携带数据，但是如果不携带数据则不用消耗序号，所以这里序号仍然为x+1），这时候A的状态变成了已建立连接（ESTABLISHED）状态,TCP连接已经建立，B在收到再次确认报文也变成已建立连接（ESTABLISHED）状态。到此TCP连接建立过程完成。<blockquote><p>这就是TCP建立连接三次握手的过程</p></blockquote><h4 id="为什么是三次握手？"><a href="#为什么是三次握手？" class="headerlink" title="为什么是三次握手？"></a>为什么是三次握手？</h4></li><li>通过前面的流程走下来，我们了解到TCP的三次握手就是A和B三次交互的过程最终建立了连接，到这里你可能会有一个疑问，<strong>为什么是三次握手建立连接，两次握手建立连接好像也是可行的</strong>？</li><li>三次握手的原因为：发送的报文是会失效的，而三次握手就是为了防止已失效的请求报文突然又传送到服务端。还是上面的A和B例子，如果A发送请求报文赢网络滞后原因延迟让B接收到，本来A发送的报文已经失效，而B在延迟接收到该报文之后并确认与A连接，但是A已经认为发到B的报文已经失效，则不会再次发送报文到B，这时候B确认与A连接则一直砸等待A发送数据，则会造成B的资源白白等待A而浪费，所以多加一次确认握手，这时B没有收到再次确认则不会建立连接，避免出现资源浪费。<h3 id="“四次握手”"><a href="#“四次握手”" class="headerlink" title="“四次握手”"></a>“四次握手”</h3><h4 id="TCP连接释放"><a href="#TCP连接释放" class="headerlink" title="TCP连接释放"></a>TCP连接释放</h4></li><li>TCP经过三次握手建立连接之后，客户和服务器发送完数据之后，还需要释放连接，下面我们来分析一个TCP连接释放的过程。</li><li>TCP连接释放过程是四次握手，我们先看看过程示意图<br><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%9B%9B%E6%AC%A1%E6%8F%A1%E6%89%8B.png" alt="TCP连接释放过程(四次握手)"></li></ul><h4 id="TCP连接释放过程："><a href="#TCP连接释放过程：" class="headerlink" title="TCP连接释放过程："></a>TCP连接释放过程：</h4><ul><li>首先，A和B双方数据传输结束，此时他们都处于已建立连接（ESTABLISHED）状态，这时A进程先向TCP发出连接释放报文，并停止发送数据，主动关闭TCP连接，A此时进入终止等待1（FIN-WAIT-1）状态。这时A发送的连接释放报文终止控制位FIN=1，释放报文的序号seq=u（u应该等于A前面传递数据的最后一个字节序号加上1，这里不懂前面发送数据序号数值，直接用u代替），TCP规定即使FIN报文段不携带数据也是要消耗一个序号的。</li><li>B服务器的应用进程在收到A发送的连接释放报文后，即向A发出确认报文，然后B进入关闭等待（CLOSE-WAIT）状态，确认序号为ack=u+1，而B进程发送报文的序号seq=v(v理论上等于B前面传递数据的最后一个字节序号加上1，这里不懂前面发送数据序号数值，直接用v代替)，此时A到B的连接已经断开了，但是此时TCP的连接处于半关闭（half-close）状态，因为B到A的连接还没有关闭（全双工通信）,也就是说此时B向A发送数据，A还是要接收的，但是A已经不能在向B发送数据（注意数据和报文不是一个概念）。</li><li>A在收到B发送的确认报文之后就进入终止等待2（FIN-WAIT2）状态。</li><li>B在发送确认报文之后，并且已经没有数据发送给A，则B的应用进程就会通知TCP释放连接；B发出的连接释放报文段FIN=1，序号为seq=w（在半关闭状态B可以又向A发送了数据），确认号必须是和前面发出确认报文一样ack=u+1，此时B就进入了最后确认状态（LAST-ACK）状态。</li><li>A在收到B发送的释放连接报文段后，还必须在向B发出确认，发出的确认报文段ACK=1，报文序号为seq=u+1（同理FIN报文必须要消耗一个序号），ack=w+1，此时A进入到时间等待（TIME-WAIT）状态。此时TCP的连接还没有断开，A必须经过<strong>时间等到计时器</strong>设置的2MLS时间之后，才会进入到关闭（CLOSED）状态。</li><li><p>B只要收到了A发出的确认报文，就进入了关闭（CLOSED）状态。</p><blockquote><p>到此，这就是TCP连接释放四次握手的过程。<br>想必你到此肯定会有疑问，前面A释放关闭过程的MSL是什么，为什么要等待2MSL时间呢？</p></blockquote></li><li><p>MSL叫做<strong>最长报文段寿命</strong>，1MSL=2分钟，也就是说A发出确认释放报文到进入到关闭（CLOSED）状态需要4分钟时间。</p></li><li>另一个是等待2MLS的原因：首先是为了保证A发送的最后一个确认报文能够到达B，在A发送的最后一个确认报文到B的过程中该报文有可能会出现丢失，此时B处于最后确认（LAST-ACK）状态，B接收不到A发出的确认报文则会超时重传四次握手的第二、第三次握手，也就是FIN+ACK报文，A收到之后就会再次发出确认释放连接报文到B，重置2MLS时间等待计时器，以此保证B能收到A发出的确认报文。其次，另一个原因就是在TCP连接管理中提到的防止失效的连接请求报文段出现，导致资源浪费。<h3 id="TCP-报文首部示图"><a href="#TCP-报文首部示图" class="headerlink" title="TCP 报文首部示图"></a>TCP 报文首部示图</h3><blockquote><p>看到这里，你也许还是会有疑问，FIN，ACK，SYN这些都是啥，他们都是TCP报文首部的组成，TCP报文是个极其复杂的东西，这里就不做深入的讨论。</p></blockquote></li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/TCP%E6%8A%A5%E6%96%87%E9%A6%96%E9%83%A8%E6%88%AA%E5%9B%BE.jpg" width="500" hegiht="313" align="center"></p><h2 id="最后说点"><a href="#最后说点" class="headerlink" title="最后说点"></a>最后说点</h2><ul><li>TCP的三次握手和四次握手在面试中也是经常被问到的问题，通过这一篇文章，我又把大学课程的知识重新拾了回来，也希望对看到这篇文章的朋友有所帮助。文章中如果有错误，请大家给我提出来，大家一起学习进步，如果觉得我的文章给予你帮助，也请给我一个喜欢和关注。</li><li>参考资料<ul><li>《计算机网络》第六版</li></ul></li></ul><p><a href="https://note.youdao.com/" target="_blank" rel="noopener">link</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;计算机网络基础对于我们软件开发者来说是很重要的基础知识，不管是日常的开发，抓包，或者网络框架的学习等，计算机网络知识都是基础。而学习计算机网络分层次的体系结构也是最基本的，下面我们就来复习一下计算机网络的体系结构。&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="计算机网络" scheme="https://www.maoqitian.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="HTTP" scheme="https://www.maoqitian.com/tags/HTTP/"/>
    
      <category term="TCP/IP" scheme="https://www.maoqitian.com/tags/TCP-IP/"/>
    
      <category term="三次握手" scheme="https://www.maoqitian.com/tags/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/"/>
    
      <category term="四次握手" scheme="https://www.maoqitian.com/tags/%E5%9B%9B%E6%AC%A1%E6%8F%A1%E6%89%8B/"/>
    
      <category term="计算机网络体系结构" scheme="https://www.maoqitian.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Java中的线程池和作用</title>
    <link href="https://www.maoqitian.com/2019/01/20/Java%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <id>https://www.maoqitian.com/2019/01/20/Java中的线程池/</id>
    <published>2019-01-20T14:03:59.000Z</published>
    <updated>2019-01-20T14:09:57.689Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在Java开发中，多线程执行任务是很常见的，Java也提供了线程类Thread来让我们方便创建一个线程如下代码所示<br><a id="more"></a></p></blockquote><h3 id="Thread开启线程"><a href="#Thread开启线程" class="headerlink" title="Thread开启线程"></a>Thread开启线程</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    .....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;.start();</span><br></pre></td></tr></table></figure><ul><li><p>这样创建新的线程有几个缺点</p><ul><li>每次要开启新的线程都需要创建一个，性能差</li><li>线程随意创建，缺乏统一的管理</li><li>不能做到线程的中断</li></ul></li><li><p>处理上面的这些问题，我们就需要使用<strong>线程池</strong>来管理线程。</p></li></ul><h3 id="线程池描述"><a href="#线程池描述" class="headerlink" title="线程池描述"></a>线程池描述</h3><blockquote><p>Java SE5d的java.util.concurrent包 提供了Executor(执行器)来管理线程对象。Executor是一个接口，而ExecutorService继承了Excutor接口，ExecutorService是一个具有生命周期的Executor，它知道如何构建恰当的上下文来执行Runnable对象。而ExecutorService对象是使用Executors的静态方法得到Java中的线程池</p></blockquote><h3 id="Executor接口实现"><a href="#Executor接口实现" class="headerlink" title="Executor接口实现"></a>Executor接口实现</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">interface</span> Executor &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Executes the given command <span class="keyword">at</span> <span class="keyword">some</span> time <span class="keyword">in</span> the future.  The command</span><br><span class="line">     * may execute <span class="keyword">in</span> a <span class="keyword">new</span> thread, <span class="keyword">in</span> a pooled thread, <span class="keyword">or</span> <span class="keyword">in</span> the calling</span><br><span class="line">     * thread, <span class="keyword">at</span> the discretion <span class="keyword">of</span> the &#123;@code Executor&#125; implementation.</span><br><span class="line">     *</span><br><span class="line">     * @param command the runnable <span class="keyword">task</span></span><br><span class="line">     * @throws RejectedExecutionException <span class="keyword">if</span> this <span class="keyword">task</span> cannot be</span><br><span class="line">     * accepted <span class="keyword">for</span> execution</span><br><span class="line">     * @throws NullPointerException <span class="keyword">if</span> command <span class="keyword">is</span> null</span><br><span class="line">     */</span><br><span class="line">    void execute(Runnable command);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Java-的四种线程池"><a href="#Java-的四种线程池" class="headerlink" title="Java 的四种线程池"></a>Java 的四种线程池</h3><ul><li>Java中为我们提供了四种线程池，他们分别是FixedThreadPool、CachedThreadPool、ScheduledThreadPool、SingleThreadExector</li></ul><h4 id="FixedThreadPool"><a href="#FixedThreadPool" class="headerlink" title="FixedThreadPool"></a>FixedThreadPool</h4><ul><li>创建方式为使用Executors的newFixedThreadPool()方法来创建，这种线程池的线程数量是固定的，可以看到他的静态方法需要传入线程的数量，在空闲状态下不会被系统回收，除非它被关闭了。当它的所有线程都在执行任务的时候，新加入的线程就会出来等待状态，等到有线程空闲，新任务才会被执行,如果新任务加入时线程池中有空闲的线程，则意味着它可以快速响应处理任务。<figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="keyword">new</span><span class="type">FixedThreadPool</span>(int nThreads) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">ThreadPoolExecutor</span>(nThreads, nThreads,</span><br><span class="line">                               <span class="number">0</span>L, TimeUnit.MILLISECONDS,</span><br><span class="line">                               <span class="keyword">new</span> <span class="type">LinkedBlockingQueue</span>&lt;Runnable&gt;());</span><br><span class="line"> &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">  * 获取使用方法</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">Runnable r=<span class="keyword">new</span> <span class="type">Runnable</span>()&#123;</span><br><span class="line"> @Override</span><br><span class="line"> run()&#123;</span><br><span class="line">   .....  </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">ExecutorService executor = Executors.<span class="keyword">new</span><span class="type">FixedThreadPool</span>(<span class="number">2</span>);</span><br><span class="line">executor.execute(r)</span><br></pre></td></tr></table></figure></li></ul><h4 id="CachedThreadPool"><a href="#CachedThreadPool" class="headerlink" title="CachedThreadPool"></a>CachedThreadPool</h4><ul><li>创建方式为使用Executors的newCachedThreadPool()方法来创建，由其静态方法可以看出，他的线程数是Integer.MAX_VALUE，可以说他的线程数是无限大，也就是说只要有任务，线程就会立即执行，但是它的每一个线程在空闲状态下是有超时机制的，这个时间为60秒，只要线程空闲时间超过60秒该线程就会被回收，如果所有的线程都处于由空闲状态并且超过了60秒，则相当于线程池中没有任何，线程，也就是说这时的线程池是不占用任何资源的，所以这个线程池比较适合执行大量的耗时较少的任务</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="keyword">new</span><span class="type">CachedThreadPool</span>() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="type">ThreadPoolExecutor</span>(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                              <span class="number">60</span>L, TimeUnit.SECONDS,</span><br><span class="line">                              <span class="keyword">new</span> <span class="type">SynchronousQueue</span>&lt;Runnable&gt;());</span><br><span class="line"> &#125;</span><br><span class="line">     </span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 获取使用方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"> Runnable r=<span class="keyword">new</span> <span class="type">Runnable</span>()&#123;</span><br><span class="line"> @Override</span><br><span class="line">   run()&#123;</span><br><span class="line">  .....  </span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> ExecutorService executor = Executors.<span class="keyword">new</span><span class="type">CachedThreadPool</span>();</span><br><span class="line"> executor.execute(r)</span><br></pre></td></tr></table></figure><h4 id="ScheduledThreadPool"><a href="#ScheduledThreadPool" class="headerlink" title="ScheduledThreadPool"></a>ScheduledThreadPool</h4><ul><li>创建方式为使用Executors的newCachedThreadPool()方法来创建，这种线程池的核心线程数是固定的，而非核心线程数据是没有限制的，并且当非核心线程空闲的的时候该线程就会被立即回收，所以我们可以使用他来操作定时任务和重复的任务（和Task TimeTask 有些像）<figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="keyword">new</span><span class="type">ScheduledThreadPool</span>(int corePoolSize) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="type">ScheduledThreadPoolExecutor</span>(corePoolSize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> ScheduledThreadPoolExecutor(int corePoolSize) &#123;</span><br><span class="line"><span class="keyword">super</span>(corePoolSize, Integer.MAX_VALUE,</span><br><span class="line">      DEFAULT_KEEPALIVE_MILLIS, MILLISECONDS,</span><br><span class="line">      <span class="keyword">new</span> <span class="type">DelayedWorkQueue</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 获取使用方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Runnable r=<span class="keyword">new</span> <span class="type">Runnable</span>()&#123;</span><br><span class="line">  @Override</span><br><span class="line">   run()&#123;</span><br><span class="line">     .....  </span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> ScheduledExecutorService executor = Executors.<span class="keyword">new</span><span class="type">ScheduledThreadPool</span>(<span class="number">2</span>);</span><br><span class="line"> <span class="comment">// 1000ms 后执行任务</span></span><br><span class="line"> executor.schedule(r,<span class="number">1000</span>,TimeUnit.MICROSECONDS)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 延迟1000ms 每隔1000ms 重复执行 任务</span></span><br><span class="line"> executor.scheduleAtFixedRate(r,<span class="number">1000</span>,<span class="number">1000</span>,TimeUnit.MICROSECONDS)</span><br></pre></td></tr></table></figure></li></ul><h4 id="SingleThreadExector"><a href="#SingleThreadExector" class="headerlink" title="SingleThreadExector"></a>SingleThreadExector</h4><ul><li>创建方式为使用Executors的newCachedThreadPool()方法来创建，这种线程只有唯一一个核心线程，并且保证所有执行的的任务都在这一个线程中执行，并且是顺序执行，也就不用在考虑线程同步的问题了。<figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="keyword">new</span><span class="type">SingleThreadExecutor</span>() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="type">FinalizableDelegatedExecutorService</span></span><br><span class="line"><span class="type"></span>    (<span class="keyword">new</span> <span class="type">ThreadPoolExecutor</span>(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                            <span class="number">0</span>L, TimeUnit.MILLISECONDS,</span><br><span class="line">                            <span class="keyword">new</span> <span class="type">LinkedBlockingQueue</span>&lt;Runnable&gt;()));</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * 获取使用方法</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"> ExecutorService executor = Executors.<span class="keyword">new</span><span class="type">SingleThreadExecutor</span>();</span><br><span class="line"> executor.execute(r)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> Runnable r=<span class="keyword">new</span> <span class="type">Runnable</span>()&#123;</span><br><span class="line">  @Override</span><br><span class="line">   run()&#123;</span><br><span class="line">  .....  </span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> ExecutorService executor = Executors.<span class="keyword">new</span><span class="type">SingleThreadExecutor</span>();</span><br><span class="line"> executor.execute(r)</span><br></pre></td></tr></table></figure></li></ul><h3 id="线程池核心构造方法"><a href="#线程池核心构造方法" class="headerlink" title="线程池核心构造方法"></a>线程池核心构造方法</h3><ul><li>通过上面对Java四种线程池的介绍,我们可以发现最终都是新建ThreadPoolExecutor对象，也就是说ThreadPoolExecutor才是线程池的核心实现。</li><li><p>ThreadPoolExecutor 比较常用的一个构造方法</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> ThreadPoolExecutor(<span class="keyword">int</span> corePoolSize,</span><br><span class="line">                        <span class="keyword">int</span> maximumPoolSize,</span><br><span class="line">                        <span class="keyword">long</span> keepAliveTime,</span><br><span class="line">                        TimeUnit unit,</span><br><span class="line">                        BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class="line">                        ThreadFactory threadFactory) &#123;</span><br><span class="line">  <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">       threadFactory, defaultHandler);</span><br><span class="line"> &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//参数含义</span></span><br><span class="line">corePoolSize：默认情况下核心线程数会一直存在，不管是否处于闲置状态，</span><br><span class="line">但是如果线程池设置了核心线程数，也就是ThreadPoolExecutor的allowCoreThreadTimeOut这个<span class="keyword">boolean</span></span><br><span class="line">为<span class="keyword">true</span>，如果核心线程数为零，则allowCoreThreadTimeOut的值为<span class="keyword">true</span>，超时时间为keepAliveTime的值,</span><br><span class="line">也就是CachedThreadPool线程池的所有线程都能够回收的原因，他的核心线程数为零,也就是没有核心线程</span><br><span class="line"></span><br><span class="line">maximumPoolSize：最大线程数</span><br><span class="line"></span><br><span class="line">keepAliveTime：非核心线程超时时长，如果allowCoreThreadTimeOut的值为<span class="keyword">true</span>，</span><br><span class="line">则该超时时长也会作用于空闲状态的核心线程</span><br><span class="line"></span><br><span class="line">unit：超时时长的时间单位 TimeUnit.MILLISECONDS<span class="regexp">/SECONDS/</span>MINUTES(毫秒<span class="regexp">/秒/</span>分钟)</span><br><span class="line"></span><br><span class="line">workQueue：线程任务队列，存放线程任务</span><br><span class="line"></span><br><span class="line">threadFactory：线程池线程生产工厂，为线程池创建新线程</span><br><span class="line">     </span><br><span class="line"><span class="comment">//我们看到构造放中还有一个defaultHandler参数，他其实是RejectedExecutionHandler对象</span></span><br><span class="line">defaultHandler：当线程队列满了，或者线程任务无法执行则用该参数抛出通知RejectedExecutionException，这里构造方法暂时没用到</span><br></pre></td></tr></table></figure></li><li><p>在Android中我们可以写自己的线程管理类接，下面就来实现一个自己的线程池管理类来管理我们的线程</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by 毛麒添 on 2018/8/1 0010.</span></span><br><span class="line"><span class="comment"> * 线程管理类，线程池为单例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ThreadManager</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ThreadPool mThreadPool;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ThreadPool <span class="title">getmThreadPool</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (mThreadPool==<span class="literal">null</span>)&#123;</span><br><span class="line">      synchronized (ThreadManager.class)&#123;</span><br><span class="line">          <span class="keyword">if</span>(mThreadPool==<span class="literal">null</span>)&#123;</span><br><span class="line">              <span class="comment">//线程安全</span></span><br><span class="line">              mThreadPool=<span class="keyword">new</span> ThreadPool(<span class="number">5</span>,<span class="number">10</span>,<span class="number">1L</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">return</span> mThreadPool;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//线程池</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ThreadPool</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> corePoolSize;<span class="comment">//核心线程数 5</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> maximumPoolSize;<span class="comment">//最大线程数 10</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> keepAliveTime;<span class="comment">//线程休眠时间 1秒</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> ThreadPoolExecutor executor;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">ThreadPool</span>(<span class="params">  <span class="keyword">int</span> corePoolSize, <span class="keyword">int</span> maximumPoolSize,<span class="keyword">long</span> keepAliveTime</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.corePoolSize=corePoolSize;</span><br><span class="line">        <span class="keyword">this</span>.maximumPoolSize=maximumPoolSize;</span><br><span class="line">        <span class="keyword">this</span>.keepAliveTime=keepAliveTime;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span>(<span class="params">Runnable runnable</span>)</span>&#123;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * int corePoolSize, 核心线程数</span></span><br><span class="line"><span class="comment">       * int maximumPoolSize, 最大线程数</span></span><br><span class="line"><span class="comment">       * long keepAliveTime, 线程休眠时间</span></span><br><span class="line"><span class="comment">       * TimeUnit unit, 时间单位</span></span><br><span class="line"><span class="comment">       * BlockingQueue&lt;Runnable&gt; workQueue, 线程队列</span></span><br><span class="line"><span class="comment">       * ThreadFactory threadFactory, 生成线程的工厂</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">if</span>(executor==<span class="literal">null</span>)&#123;</span><br><span class="line">          executor = <span class="keyword">new</span> ThreadPoolExecutor(corePoolSize,maximumPoolSize,keepAliveTime,</span><br><span class="line">                  TimeUnit.SECONDS,<span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(),</span><br><span class="line">                  Executors.defaultThreadFactory(),<span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//核心线程也有超时机制</span></span><br><span class="line">      executor.allowCoreThreadTimeOut(<span class="literal">true</span>);</span><br><span class="line">      executor.execute(runnable);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//取消任务，从任务队列中将其移除</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancelTask</span>(<span class="params">Runnable runnable</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(runnable!=<span class="literal">null</span>)&#123;</span><br><span class="line">          executor.getQueue().<span class="keyword">remove</span>(runnable);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">ThreadManager.getmThreadPool().execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">          @Override</span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">              <span class="comment">//执行任务</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="最后说点"><a href="#最后说点" class="headerlink" title="最后说点"></a>最后说点</h3><ul><li><p>以上这就是我所了解的线程池知识，如果有错，请给我留言指出，大家一起学习进步。</p></li><li><p>参考资料:</p><ul><li>《Android开发艺术探索》</li><li>《Java编程思想》(第四版)</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在Java开发中，多线程执行任务是很常见的，Java也提供了线程类Thread来让我们方便创建一个线程如下代码所示&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java基础回顾" scheme="https://www.maoqitian.com/categories/Java%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE/"/>
    
    
      <category term="Java" scheme="https://www.maoqitian.com/tags/Java/"/>
    
      <category term="Thread" scheme="https://www.maoqitian.com/tags/Thread/"/>
    
      <category term="ThreadPool" scheme="https://www.maoqitian.com/tags/ThreadPool/"/>
    
  </entry>
  
  <entry>
    <title>Android运行时权限机制解析</title>
    <link href="https://www.maoqitian.com/2019/01/19/Android%E8%BF%90%E8%A1%8C%E6%97%B6%E6%9D%83%E9%99%90%E6%9C%BA%E5%88%B6%E8%A7%A3%E6%9E%90/"/>
    <id>https://www.maoqitian.com/2019/01/19/Android运行时权限机制解析/</id>
    <published>2019-01-18T16:14:42.000Z</published>
    <updated>2019-01-18T16:17:06.199Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>从Android M（6.0 API级别23）开始，用户开始在应用运行时向其授予权限，而不是在应用安装时授予。此方法可以简化应用安装过程，因为用户在安装或更新应用时不需要授予权限。<br><a id="more"></a></p></blockquote><h3 id="权限介绍"><a href="#权限介绍" class="headerlink" title="权限介绍"></a>权限介绍</h3><ul><li>权限机制的目的是保护用户的隐私，Android应用程序必须请求访问敏感用户数据（如联系人和短信）以及某些系统特性（如照相机和互联网）的许可。根据该特征，系统可以自动授予许可，或者提示用户批准请求。</li><li>如果设备运行的是 Android 6.0 或更高版本，或者应用的目标 SDK 为 23 或更高：应用必须在清单文件中中列出权限，并且它必须在运行时请求其需要的每项危险权限。用户可以授予或拒绝每项权限，且即使用户拒绝权限请求，应用仍可以继续运行有限的功能。</li></ul><h3 id="权限类别"><a href="#权限类别" class="headerlink" title="权限类别"></a>权限类别</h3><h4 id="正常权限"><a href="#正常权限" class="headerlink" title="正常权限"></a>正常权限</h4><ul><li>正常权限不会给用户的隐私带来风险，如果你在清单文件（AndroidManifest.xml）中加入了正常权限声明，则安卓系统会自动授予App应用该权限，如下列出了正常权限</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">android<span class="selector-class">.permission</span><span class="selector-class">.ACCESS_LOCATION_EXTRA_COMMANDS</span></span><br><span class="line">android<span class="selector-class">.permission</span><span class="selector-class">.ACCESS_NETWORK_STATE</span></span><br><span class="line">android<span class="selector-class">.permission</span><span class="selector-class">.ACCESS_NOTIFICATION_POLICY</span></span><br><span class="line">android<span class="selector-class">.permission</span><span class="selector-class">.ACCESS_WIFI_STATE</span></span><br><span class="line">android<span class="selector-class">.permission</span><span class="selector-class">.ACCESS_WIMAX_STATE</span></span><br><span class="line">android<span class="selector-class">.permission</span><span class="selector-class">.BLUETOOTH</span></span><br><span class="line">android<span class="selector-class">.permission</span><span class="selector-class">.BLUETOOTH_ADMIN</span></span><br><span class="line">android<span class="selector-class">.permission</span><span class="selector-class">.BROADCAST_STICKY</span></span><br><span class="line">android<span class="selector-class">.permission</span><span class="selector-class">.CHANGE_NETWORK_STATE</span></span><br><span class="line">android<span class="selector-class">.permission</span><span class="selector-class">.CHANGE_WIFI_MULTICAST_STATE</span></span><br><span class="line">android<span class="selector-class">.permission</span><span class="selector-class">.CHANGE_WIFI_STATE</span></span><br><span class="line">android<span class="selector-class">.permission</span><span class="selector-class">.CHANGE_WIMAX_STATE</span></span><br><span class="line">android<span class="selector-class">.permission</span><span class="selector-class">.DISABLE_KEYGUARD</span></span><br><span class="line">android<span class="selector-class">.permission</span><span class="selector-class">.EXPAND_STATUS_BAR</span></span><br><span class="line">android<span class="selector-class">.permission</span><span class="selector-class">.FLASHLIGHT</span></span><br><span class="line">android<span class="selector-class">.permission</span><span class="selector-class">.GET_ACCOUNTS</span></span><br><span class="line">android<span class="selector-class">.permission</span><span class="selector-class">.GET_PACKAGE_SIZE</span></span><br><span class="line">android<span class="selector-class">.permission</span><span class="selector-class">.INTERNET</span></span><br><span class="line">android<span class="selector-class">.permission</span><span class="selector-class">.KILL_BACKGROUND_PROCESSES</span></span><br><span class="line">android<span class="selector-class">.permission</span><span class="selector-class">.MODIFY_AUDIO_SETTINGS</span></span><br><span class="line">android<span class="selector-class">.permission</span><span class="selector-class">.NFC</span></span><br><span class="line">android<span class="selector-class">.permission</span><span class="selector-class">.READ_SYNC_SETTINGS</span></span><br><span class="line">android<span class="selector-class">.permission</span><span class="selector-class">.READ_SYNC_STATS</span></span><br><span class="line">android<span class="selector-class">.permission</span><span class="selector-class">.RECEIVE_BOOT_COMPLETED</span></span><br><span class="line">android<span class="selector-class">.permission</span><span class="selector-class">.REORDER_TASKS</span></span><br><span class="line">android<span class="selector-class">.permission</span><span class="selector-class">.REQUEST_INSTALL_PACKAGES</span></span><br><span class="line">android<span class="selector-class">.permission</span><span class="selector-class">.SET_TIME_ZONE</span></span><br><span class="line">android<span class="selector-class">.permission</span><span class="selector-class">.SET_WALLPAPER</span></span><br><span class="line">android<span class="selector-class">.permission</span><span class="selector-class">.SET_WALLPAPER_HINTS</span></span><br><span class="line">android<span class="selector-class">.permission</span><span class="selector-class">.SUBSCRIBED_FEEDS_READ</span></span><br><span class="line">android<span class="selector-class">.permission</span><span class="selector-class">.TRANSMIT_IR</span></span><br><span class="line">android<span class="selector-class">.permission</span><span class="selector-class">.USE_FINGERPRINT</span></span><br><span class="line">android<span class="selector-class">.permission</span><span class="selector-class">.VIBRATE</span></span><br><span class="line">android<span class="selector-class">.permission</span><span class="selector-class">.WAKE_LOCK</span></span><br><span class="line">android<span class="selector-class">.permission</span><span class="selector-class">.WRITE_SYNC_SETTINGS</span></span><br><span class="line">com<span class="selector-class">.android</span><span class="selector-class">.alarm</span><span class="selector-class">.permission</span><span class="selector-class">.SET_ALARM</span></span><br><span class="line">com<span class="selector-class">.android</span><span class="selector-class">.launcher</span><span class="selector-class">.permission</span><span class="selector-class">.INSTALL_SHORTCUT</span></span><br><span class="line">com<span class="selector-class">.android</span><span class="selector-class">.launcher</span><span class="selector-class">.permission</span><span class="selector-class">.UNINSTALL_SHORTCUT</span></span><br></pre></td></tr></table></figure><h4 id="危险权限"><a href="#危险权限" class="headerlink" title="危险权限"></a>危险权限</h4><ul><li>查看危险权限</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以通过adb <span class="keyword">shell</span><span class="bash"> pm list permissions -d -g进行查看(Windows使用adb 命令首先需要自行配置环境变量)</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Android%20%E8%BF%90%E8%A1%8C%E6%97%B6%E6%9D%83%E9%99%90/adb%20%E6%9F%A5%E7%9C%8B%E5%8D%B1%E9%99%A9%E6%9D%83%E9%99%90.png" alt="adb查看危险权限"></p><pre><code>- 危险权限会授予应用访问用户隐私数据的权限。如果您的应用在清单中列出了正常权限，系统将自动授予该权限。如果您列出了危险权限，则用户在清单文件中列出的同时还必须在触发使用相应功能的时候让用户同意应用使用这些权限![危险权限列表](https://github.com/maoqitian/MaoMdPhoto/raw/master/Android%20%E8%BF%90%E8%A1%8C%E6%97%B6%E6%9D%83%E9%99%90/%E5%8D%B1%E9%99%A9%E6%9D%83%E9%99%90.png)</code></pre><ul><li>由危险权限的表可以看出，危险权限都是一组一组出现的，并且你只要授予一组权限的其中一个，那么该组危险权限的其他权限也同样被授予了（例如，如果某应用已经请求并且被授予了READ_CONTACTS 权限，然后它又请求WRITE_CONTACTS，系统将立即授予该权限）<h4 id="使用权限"><a href="#使用权限" class="headerlink" title="使用权限"></a>使用权限</h4></li><li>当我们新建一个Android应用的时候，默认应用是没有有申请任何权限的，我们不管需要什么权限，首先需在清单文件中使用<uses-permission>标签声明<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">package</span>=<span class="string">"com.android.app.myapp"</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.RECEIVE_SMS"</span> /&gt;</span></span><br><span class="line">  ...</span><br><span class="line"> <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure></uses-permission></li></ul><h3 id="权限相关API"><a href="#权限相关API" class="headerlink" title="权限相关API"></a>权限相关API</h3><h4 id="检查权限"><a href="#检查权限" class="headerlink" title="检查权限"></a>检查权限</h4><ul><li>当我们应用需要危险的权限的时候，每次执行操作都需要检查是否授予了危险权限，检查是否具有该权限我们使用ContextCompat.checkSelfPermission() 方法<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> permissionCheck = ContextCompat.checkSelfPermission(thisActivity,</span><br><span class="line">     Manifest.permission.WRITE_CALENDAR);</span><br><span class="line">     </span><br><span class="line"><span class="comment">//如果具有该权限，则方法返回PackageManager.PERMISSION_GRANTED，并且应用可以</span></span><br><span class="line"><span class="comment">//继续操作。如果应用不具有此权限，方法将返回 PERMISSION_DENIED，且应用必须明确向用户要求权限</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="请求获取权限"><a href="#请求获取权限" class="headerlink" title="请求获取权限"></a>请求获取权限</h4><ul><li>当我们应用某个功能操作需要危险权限的申请，则我们可以调用ActivityCompat.requestPermissions的方法来获取相应的权限。该方法异步运行：它会立即返回，并且在用户响应对话框之后，系统会使用结果调用应用的回调方法，将应用传递的相同请求代码传递到ActivityCompat.requestPermissions方法。</li><li>以下代码可以检查应用是否具备读取用户联系人的权限，并根据需要请求该权限<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (ContextCompat.checkSelfPermission(thisActivity,</span><br><span class="line">              Manifest.permission.READ_CONTACTS)</span><br><span class="line">      != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">  <span class="comment">//是否具有该读取联系人权限</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (ActivityCompat.shouldShowRequestPermissionRationale(thisActivity,</span><br><span class="line">          Manifest.permission.READ_CONTACTS)) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//判断是否需要向用户解释，为什么需要这些权限。有时候用户会不理解应用程序为什么需要这些权限。</span></span><br><span class="line">      <span class="comment">//这个方法只有在APP请求过某一权限且用户禁止APP使用该权限的时候返回true。在用户授权了权限和禁止权限时勾选了“Don't ask again”选项的情况下都会返回false</span></span><br><span class="line">      <span class="comment">//也就是说如果进入到这里，就说明该权限曾经被拒绝过</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">      被拒绝又想再次申请可跳转应用信息界面授予权限</span></span><br><span class="line"><span class="comment">      Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);</span></span><br><span class="line"><span class="comment">      intent.setData(Uri.fromParts("package", context.getPackageName(), null));</span></span><br><span class="line"><span class="comment">      startActivity(intent);</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//申请权限</span></span><br><span class="line"></span><br><span class="line">      ActivityCompat.requestPermissions(thisActivity,</span><br><span class="line">              <span class="keyword">new</span> String[]&#123;Manifest.permission.READ_CONTACTS&#125;,</span><br><span class="line">              MY_PERMISSIONS_REQUEST_READ_CONTACTS);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// MY_PERMISSIONS_REQUEST_READ_CONTACTS is an</span></span><br><span class="line">      <span class="comment">// app-defined int constant. The callback method gets the</span></span><br><span class="line">      <span class="comment">// result of the request.</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="处理权限请求的响应"><a href="#处理权限请求的响应" class="headerlink" title="处理权限请求的响应"></a>处理权限请求的响应</h4><ul><li>当权限申请提示框与用户交互的时候，我们开发人员必须知道用户到底是否同意应用的权限申请。所以用户响应时，Android系统将调用应用的 onRequestPermissionsResult() 方法，向其传递用户响应 </li><li>延续上面读取联系人的例子</li></ul><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> requestCode 申请权限传入的请求码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> permissions 申请权限的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> grantResults 请求的结果（用于区分上一个参数permissions中的权限有没有被授予，permissions和grantResults两个数组大小是一样的，具体值和上方提到的PackageManager中的两个常量做比较）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> onRequestPermissionsResult(<span class="keyword">int</span> requestCode,</span><br><span class="line">    String permissions[], <span class="keyword">int</span>[] grantResults) &#123;</span><br><span class="line"> <span class="keyword">switch</span> (requestCode) &#123;</span><br><span class="line">    <span class="keyword">case</span> MY_PERMISSIONS_REQUEST_READ_CONTACTS: &#123;</span><br><span class="line">        <span class="comment">// If request is cancelled, the result arrays are empty.</span></span><br><span class="line">        <span class="keyword">if</span> (grantResults.length &gt; <span class="number">0</span></span><br><span class="line">            &amp;&amp; grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// permission was granted, yay! Do the</span></span><br><span class="line">            <span class="comment">// contacts-related task you need to do.</span></span><br><span class="line">            <span class="comment">//用户同意权限申请，继续应用操作</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// permission denied, boo! Disable the</span></span><br><span class="line">            <span class="comment">// functionality that depends on this permission.</span></span><br><span class="line">            <span class="comment">//用户拒绝权限申请，提示用户应用的操作需要该权限</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// other 'case' lines to check for other</span></span><br><span class="line">    <span class="comment">// permissions this app might request</span></span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="运行时权限小例子"><a href="#运行时权限小例子" class="headerlink" title="运行时权限小例子"></a>运行时权限小例子</h4><ul><li>读取联系人列表完整例子<figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">int</span> MY_PERMISSIONS_REQUEST_READ_CONTACTS = <span class="number">1</span>;</span><br><span class="line">     <span class="comment">//保存联系人</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;<span class="keyword">String</span>&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    readContacts();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//读取联系人</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> readContacts()&#123;</span><br><span class="line">    <span class="keyword">if</span>(ContextCompat.checkSelfPermission(<span class="keyword">this</span>, Manifest.permission.READ_CONTACTS)</span><br><span class="line">            != PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class="line">      <span class="comment">//申请权限</span></span><br><span class="line">        <span class="comment">//申请权限</span></span><br><span class="line">        <span class="keyword">if</span> (ActivityCompat.shouldShowRequestPermissionRationale(<span class="keyword">this</span>,</span><br><span class="line">                Manifest.permission.READ_CONTACTS)) &#123;</span><br><span class="line">            <span class="comment">//之前申请权限的时候拒绝过 ，向用户解释为什么需要该权限</span></span><br><span class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"Permission Denied，Show an expanation to the user *asynchronously* -- don't block"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            ActivityCompat.requestPermissions(<span class="keyword">this</span>,</span><br><span class="line">                    <span class="keyword">new</span> <span class="keyword">String</span>[]&#123;Manifest.permission.READ_CONTACTS&#125;,</span><br><span class="line">                    MY_PERMISSIONS_REQUEST_READ_CONTACTS);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//获取联系人列表</span></span><br><span class="line">        list=readContact();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> onRequestPermissionsResult(<span class="built_in">int</span> requestCode, @NonNull <span class="keyword">String</span>[] permissions, @NonNull <span class="built_in">int</span>[] grantResults) &#123;</span><br><span class="line">    <span class="keyword">if</span>(requestCode == MY_PERMISSIONS_REQUEST_READ_CONTACTS)&#123;</span><br><span class="line">        <span class="keyword">if</span> (grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//获取联系人列表</span></span><br><span class="line">            list=readContact();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Permission Denied</span></span><br><span class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"Permission Denied"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//读取联系人</span></span><br><span class="line">   <span class="keyword">public</span> List&lt;<span class="keyword">String</span>&gt; readContact()&#123;</span><br><span class="line">    List&lt;<span class="keyword">String</span>&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Cursor <span class="built_in">cursor</span> = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//cursor指针 query询问 contract协议 kinds种类</span></span><br><span class="line">        <span class="built_in">cursor</span> = getContentResolver().query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">cursor</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="built_in">cursor</span>.moveToNext()) &#123;</span><br><span class="line">                <span class="keyword">String</span> displayName = <span class="built_in">cursor</span>.getString(<span class="built_in">cursor</span>.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME));</span><br><span class="line">                <span class="keyword">String</span> number = <span class="built_in">cursor</span>.getString(<span class="built_in">cursor</span>.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));</span><br><span class="line">                list.<span class="built_in">add</span>(displayName + <span class="string">'\n'</span> + number);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">cursor</span> != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="built_in">cursor</span>.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//清单文件中别忘了加上 </span></span><br><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.READ_CONTACTS"</span>/&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="热门框架了解"><a href="#热门框架了解" class="headerlink" title="热门框架了解"></a>热门框架了解</h3><ul><li>AndPermission（严振杰大大的框架）</li><li>项目地址<br>  <a href="https://github.com/yanzhenjie/AndPermission" target="_blank" rel="noopener">https://github.com/yanzhenjie/AndPermission</a></li><li><p>该框架也是日常开发用得比较多的一个框架，该框架一句话搞定权限申请，还是比较方便的</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">AndPermission.<span class="keyword">with</span>(this).runtime()</span><br><span class="line">            .permission(Permission.<span class="keyword">Group</span>.STORAGE)</span><br><span class="line">            .onGranted(<span class="literal">new</span> Action&lt;<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;&gt;() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                <span class="keyword">public</span> <span class="literal">void</span> onAction(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; <span class="built_in">data</span>) &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).onDenied(<span class="literal">new</span> Action&lt;<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        <span class="keyword">public</span> <span class="literal">void</span> onAction(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; <span class="built_in">data</span>) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).start();</span><br></pre></td></tr></table></figure></li><li><p>通过阅读框架源码，可以看到这个框架的核心就是PermissionActivity,它是一个没有界面的Activity,所有的权限申请都由它来发起，并进行相应操作的回调，结合前面了解的运行时权限的知识，相信这个Activity你可以很轻易就了解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Request permission.</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * Created by Yan Zhenjie on 2017/4/27.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PermissionActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_INPUT_OPERATION = <span class="string">"KEY_INPUT_OPERATION"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VALUE_INPUT_PERMISSION = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VALUE_INPUT_PERMISSION_SETTING = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VALUE_INPUT_INSTALL = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VALUE_INPUT_OVERLAY = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VALUE_INPUT_ALERT_WINDOW = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_INPUT_PERMISSIONS = <span class="string">"KEY_INPUT_PERMISSIONS"</span>;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> RequestListener sRequestListener;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * Request for permissions.</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">requestPermission</span><span class="params">(Context context, String[] permissions, RequestListener requestListener)</span> </span>&#123;</span><br><span class="line">     PermissionActivity.sRequestListener = requestListener;</span><br><span class="line"></span><br><span class="line">     Intent intent = <span class="keyword">new</span> Intent(context, PermissionActivity.class);</span><br><span class="line">     intent.putExtra(KEY_INPUT_OPERATION, VALUE_INPUT_PERMISSION);</span><br><span class="line">     intent.putExtra(KEY_INPUT_PERMISSIONS, permissions);</span><br><span class="line">     intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">     context.startActivity(intent);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * Request for setting.</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">permissionSetting</span><span class="params">(Context context, RequestListener requestListener)</span> </span>&#123;</span><br><span class="line">     PermissionActivity.sRequestListener = requestListener;</span><br><span class="line"></span><br><span class="line">     Intent intent = <span class="keyword">new</span> Intent(context, PermissionActivity.class);</span><br><span class="line">     intent.putExtra(KEY_INPUT_OPERATION, VALUE_INPUT_PERMISSION_SETTING);</span><br><span class="line">     intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">     context.startActivity(intent);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * Request for package install.</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">requestInstall</span><span class="params">(Context context, RequestListener requestListener)</span>  </span>&#123;</span><br><span class="line">     PermissionActivity.sRequestListener = requestListener;</span><br><span class="line"></span><br><span class="line">     Intent intent = <span class="keyword">new</span> Intent(context, PermissionActivity.class);</span><br><span class="line">     intent.putExtra(KEY_INPUT_OPERATION, VALUE_INPUT_INSTALL);</span><br><span class="line">     intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">     context.startActivity(intent);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * Request for overlay.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">requestOverlay</span><span class="params">(Context context, RequestListener requestListener)</span> </span>&#123;</span><br><span class="line">     PermissionActivity.sRequestListener = requestListener;</span><br><span class="line"></span><br><span class="line">     Intent intent = <span class="keyword">new</span> Intent(context, PermissionActivity.class);</span><br><span class="line">     intent.putExtra(KEY_INPUT_OPERATION, VALUE_INPUT_OVERLAY);</span><br><span class="line">     intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">     context.startActivity(intent);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Request for alert window.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">requestAlertWindow</span><span class="params">(Context context, RequestListener requestListener)</span> </span>&#123;</span><br><span class="line">     PermissionActivity.sRequestListener = requestListener;</span><br><span class="line"></span><br><span class="line">     Intent intent = <span class="keyword">new</span> Intent(context, PermissionActivity.class);</span><br><span class="line">     intent.putExtra(KEY_INPUT_OPERATION, VALUE_INPUT_ALERT_WINDOW);</span><br><span class="line">     intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">     context.startActivity(intent);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">     Intent intent = getIntent();</span><br><span class="line">     <span class="keyword">int</span> operation = intent.getIntExtra(KEY_INPUT_OPERATION, <span class="number">0</span>);</span><br><span class="line">     <span class="keyword">switch</span> (operation) &#123;</span><br><span class="line">         <span class="keyword">case</span> VALUE_INPUT_PERMISSION: &#123;</span><br><span class="line">             String[] permissions = intent.getStringArrayExtra(KEY_INPUT_PERMISSIONS);</span><br><span class="line">             <span class="keyword">if</span> (permissions != <span class="keyword">null</span> &amp;&amp; sRequestListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                 requestPermissions(permissions, VALUE_INPUT_PERMISSION);</span><br><span class="line">             &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 finish();</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">case</span> VALUE_INPUT_PERMISSION_SETTING: &#123;</span><br><span class="line">             <span class="keyword">if</span> (sRequestListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                 RuntimeSettingPage setting = <span class="keyword">new</span> RuntimeSettingPage(<span class="keyword">new</span> ContextSource(<span class="keyword">this</span>));</span><br><span class="line">                 setting.start(VALUE_INPUT_PERMISSION_SETTING);</span><br><span class="line">             &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 finish();</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">case</span> VALUE_INPUT_INSTALL: &#123;</span><br><span class="line">             <span class="keyword">if</span> (sRequestListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                 Intent manageIntent = <span class="keyword">new</span> Intent(Settings.ACTION_MANAGE_UNKNOWN_APP_SOURCES);</span><br><span class="line">                 manageIntent.setData(Uri.fromParts(<span class="string">"package"</span>, getPackageName(), <span class="keyword">null</span>));</span><br><span class="line">                 startActivityForResult(manageIntent, VALUE_INPUT_INSTALL);</span><br><span class="line">             &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 finish();</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">case</span> VALUE_INPUT_OVERLAY: &#123;</span><br><span class="line">             <span class="keyword">if</span> (sRequestListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                 OverlaySettingPage settingPage = <span class="keyword">new</span> OverlaySettingPage(<span class="keyword">new</span> ContextSource(<span class="keyword">this</span>));</span><br><span class="line">                 settingPage.start(VALUE_INPUT_OVERLAY);</span><br><span class="line">             &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 finish();</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">case</span> VALUE_INPUT_ALERT_WINDOW: &#123;</span><br><span class="line">             <span class="keyword">if</span> (sRequestListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                 AlertWindowSettingPage settingPage = <span class="keyword">new</span> AlertWindowSettingPage(<span class="keyword">new</span> ContextSource(<span class="keyword">this</span>));</span><br><span class="line">                 settingPage.start(VALUE_INPUT_ALERT_WINDOW);</span><br><span class="line">             &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 finish();</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">default</span>: &#123;</span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(<span class="string">"This should not be the case."</span>);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, String[] permissions, <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (sRequestListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">         sRequestListener.onRequestCallback();</span><br><span class="line">     &#125;</span><br><span class="line">     finish();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (sRequestListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">         sRequestListener.onRequestCallback();</span><br><span class="line">     &#125;</span><br><span class="line">     finish();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKeyDown</span><span class="params">(<span class="keyword">int</span> keyCode, KeyEvent event)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (keyCode == KeyEvent.KEYCODE_BACK) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">super</span>.onKeyDown(keyCode, event);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     sRequestListener = <span class="keyword">null</span>;</span><br><span class="line">     <span class="keyword">super</span>.finish();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * permission callback.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RequestListener</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">onRequestCallback</span><span class="params">()</span></span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="最后说点"><a href="#最后说点" class="headerlink" title="最后说点"></a>最后说点</h3><ul><li>看过不一定记得，记得不一定会写，会写不代表不会忘记，所以记下来是最好的选择。好了，又通过一篇文章让我对Android运行时权限有了更深入的了解。文章中如果有错误，请大家给我提出来，大家一起学习进步，如果觉得我的文章给予你帮助，也请给我一个喜欢和关注。</li><li><p>参考链接:</p><ul><li>《Android进阶之光》</li><li><p><a href="https://developer.android.google.cn/training/permissions/requesting#handle-response" target="_blank" rel="noopener">在运行时请求权限</a></p></li><li><p><a href="https://developer.android.google.cn/guide/topics/security/permissions#permissions" target="_blank" rel="noopener">系统权限</a></p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;从Android M（6.0 API级别23）开始，用户开始在应用运行时向其授予权限，而不是在应用安装时授予。此方法可以简化应用安装过程，因为用户在安装或更新应用时不需要授予权限。&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android基础回顾" scheme="https://www.maoqitian.com/categories/Android%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE/"/>
    
    
      <category term="Android" scheme="https://www.maoqitian.com/tags/Android/"/>
    
      <category term="Android运行时权限" scheme="https://www.maoqitian.com/tags/Android%E8%BF%90%E8%A1%8C%E6%97%B6%E6%9D%83%E9%99%90/"/>
    
      <category term="permission" scheme="https://www.maoqitian.com/tags/permission/"/>
    
  </entry>
  
  <entry>
    <title>Java接口和抽象类是什么，有什么区别</title>
    <link href="https://www.maoqitian.com/2019/01/16/%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB/"/>
    <id>https://www.maoqitian.com/2019/01/16/接口和抽象类/</id>
    <published>2019-01-16T15:24:01.000Z</published>
    <updated>2019-01-16T15:33:49.483Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>抽象(abstract)和接口(interface)在Java中都是关键字，也就说明他们足够重要，而抽象类和接口为我们面向对象编程提供了非常大的帮助。下面我们就一起来回顾这基础知识。<br><a id="more"></a></p></blockquote><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><ul><li>在构建某些未实现方法的类时，你可能会第一个想到接口，但是抽象类也是实现这个目的一种重要而必要的工具。</li><li>创建抽象类需要用到abstract关键字来修饰类，我们希望通过这个通用的类操作一系类方法，如果没有具体的内容，这个抽象类的意义只有一个，就是不让其他类实例化这个抽象类的对象，只能实例化它的子类对象；要达到操控，Java给我们提供了抽象方法的机制，抽象方法也是使用abstract关键字来修饰，<strong>包含抽象方法的类就叫做抽象类</strong><h3 id="抽象类特点"><a href="#抽象类特点" class="headerlink" title="抽象类特点"></a>抽象类特点</h3><ul><li>1.抽象类和抽象方法必须用abstract关键字修饰</li><li>2.抽象类不一定有抽象方法，有抽象方法的类一定是抽象类或者接口</li><li>3.抽象类不能实例化，也就是说不能new出来，抽象类必须由子类实例化，这其实也就是多态的一种，抽象类多态（<strong>为什么抽象类不能实例化？</strong> 如果抽象类实例化，实例化的抽象类对象意思就可以调用抽象类的抽象方法，但是抽象方法是没有具体实现的，也就没有任何意义，所以抽象类不能实例化）</li><li>4.抽象类的子类要么是抽象类(实例中的Car类)，要么就重写抽象类中的抽象方法（实例中的Jetta类）</li><li>5.一个类只能继承一个抽象类，抽象类也可以继承抽象类（实例中的SuperCar 类）<h3 id="抽象类成员特点："><a href="#抽象类成员特点：" class="headerlink" title="抽象类成员特点："></a>抽象类成员特点：</h3></li><li>1.成员既可以是常量也可以是变量，但是abstract不能修饰成员变量，变量的值是不固定的，无法抽象</li><li>2.抽象类也有构造方法，他的意义在于子类可以访问父类的初始化数据（实例中Jetta构造方法 super()调用了抽象父类构造方法）</li><li>3.成员方法既可以抽象的，也可以是非抽象的，抽象方法一般是强制要求子类去实现的方法，非抽象方法一般是重复的代码，可以提高代码复用性</li><li>4.abstract关键字不能与static关键字（原理和抽象类不能实例化其实是一个道理，<strong>staticx修饰的抽象方法不需要实例化可以直接调用，这显然是没有意义的</strong>）、final关键字(<strong>final修饰的方法子类不能重写，abstract修饰的方法子类强制重写</strong>)、private关键同时出现（<strong>private修饰的方法子类不能访问</strong>）</li></ul></li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: mao.qitian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/8/11 0011 16:25</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 汽车抽象类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"抽象类的构造方法被调用"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">driver</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"所有汽车都能驾驶"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//汽车的速度</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">speed</span><span class="params">()</span></span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: mao.qitian@gxxmt.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/8/11 0011 16:29</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 捷达</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Jetta</span> <span class="keyword">extends</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">Jetta</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"开完兰博基尼再开捷达速度上无法适应"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: mao.qitian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/8/11 0011 22:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 超跑</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperCar</span> <span class="keyword">extends</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"><span class="comment">//超跑的价格</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">expensive</span> <span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: mao.qitian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/8/11 0011 16:27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 兰博基尼</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lamborghini</span> <span class="keyword">extends</span> <span class="title">SuperCar</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"兰博基尼速度两秒破百"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">expensive</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口（interface）"><a href="#接口（interface）" class="headerlink" title="接口（interface）"></a>接口（interface）</h2><ul><li>接口使抽象的更向前迈进了一步，interface关键字修饰方法产生的是完全抽象的类，它允许创建者定义方法名，传参和返回类型，但是它没有任何方法体，只提供了形式（规则），而未提供任何具体实现。<h3 id="接口的特点"><a href="#接口的特点" class="headerlink" title="接口的特点"></a>接口的特点</h3></li><li>1.接口使用interface关键字代替class修饰类，</li><li>2.类实现接口用implement表示</li><li>3.和抽象类一样，接口也不能实例化，只能由实现了接口的类来进行实例化</li><li>4.接口的子类可以是抽象类，也可以是具体类，具体类要重写接口的抽象方法</li></ul><h3 id="接口成员特点"><a href="#接口成员特点" class="headerlink" title="接口成员特点"></a>接口成员特点</h3><ul><li>1.接口中定义的变量都是常量，默认修饰符为 public static final</li><li><p>2.接口没有构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: mao.qitian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/8/12 0012 0:22</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span></span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">A</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">C</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">super</span>();<span class="comment">//调用的是Objetc类的构造方法，方法默认继承Objetc类</span></span><br><span class="line">  &#125;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>3.接口中的成员方法只能是抽象方法，默认修饰符为 public abstract</p></li><li>4.接口中的所以成员方法和变量都是公共的（public）</li></ul><h3 id="接口的应用"><a href="#接口的应用" class="headerlink" title="接口的应用"></a>接口的应用</h3><ul><li>策略模式：<strong>定义一系列算法，把每一个算法封装起来，并且使他们可以相互替换。策略模式使得算法可独立于使用它的客户端而独立变化</strong>。<h4 id="三个角色"><a href="#三个角色" class="headerlink" title="三个角色"></a>三个角色</h4></li><li>上下文角色（Context）:操作我们制定策略的上下文环境，使用策略的通用调用</li><li>抽象策略角色（Stragety）:策略，算法的抽象，通常是一个接口</li><li>策略的实现角色（ConcreteStragety）：实现抽象的策略接口，具体实现这个策略<h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">    实现学校教师的奖金发放，教师有属性：编号、姓名，教学总工作量，奖金</span><br><span class="line">    奖金的计算方法为：</span><br><span class="line">                    x*<span class="number">30</span>   (当职称为教授时)</span><br><span class="line">           y=       x*<span class="number">25</span>   (当职称为副教授时)</span><br><span class="line">                    x*<span class="number">20</span>    (当职称为讲师时)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">Function</span> &#123;                             </span><br><span class="line"> <span class="comment">//接口定义抽象方法 （Stragety）</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">Money</span>(<span class="params"><span class="keyword">double</span> x</span>)</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">A</span> <span class="title">implements</span> <span class="title">Function</span>  &#123;</span><br><span class="line">      <span class="comment">//教授奖金计算</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">Money</span>(<span class="params"><span class="keyword">double</span> x</span>)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x*<span class="number">30</span>;</span><br><span class="line">   </span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">B</span> <span class="title">implements</span> <span class="title">Function</span> &#123;</span><br><span class="line">     <span class="comment">//副教授奖金计算</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">Money</span>(<span class="params"><span class="keyword">double</span> x</span>)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x*<span class="number">25</span>;</span><br><span class="line">   &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">C</span> <span class="title">implements</span> <span class="title">Function</span> &#123;</span><br><span class="line">      <span class="comment">//讲师奖金计算</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">Money</span>(<span class="params"><span class="keyword">double</span> x</span>)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x*<span class="number">20</span>;</span><br><span class="line">   &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">myMoney</span> &#123;</span><br><span class="line">  <span class="comment">//上下文角色</span></span><br><span class="line">  Function s;</span><br><span class="line">  <span class="keyword">double</span> M;<span class="comment">//工时</span></span><br><span class="line">     String name;<span class="comment">//教师姓名</span></span><br><span class="line">     String type;<span class="comment">//教师职称</span></span><br><span class="line">     <span class="keyword">int</span> number;<span class="comment">//教师编号</span></span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">S</span>(<span class="params"><span class="keyword">double</span> X,String N,<span class="keyword">int</span> Num,String Type</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.M=X;</span><br><span class="line">  <span class="keyword">this</span>.name=N;</span><br><span class="line">  <span class="keyword">this</span>.number=Num;</span><br><span class="line">  <span class="keyword">this</span>.type=Type;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//奖金计算方式</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getMoney</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(type.<span class="keyword">equals</span>(<span class="string">"教授"</span>)) s=<span class="keyword">new</span> A();</span><br><span class="line">  <span class="keyword">if</span>(type.<span class="keyword">equals</span>(<span class="string">"副教授"</span>)) s=<span class="keyword">new</span> B();</span><br><span class="line">  <span class="keyword">if</span>(type.<span class="keyword">equals</span>(<span class="string">"讲师"</span>)) s=<span class="keyword">new</span> C();</span><br><span class="line">  <span class="keyword">return</span> s.Money(M);</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">  myMoney f=<span class="keyword">new</span> myMoney();</span><br><span class="line">     Scanner sc=<span class="keyword">new</span> Scanner(System.<span class="keyword">in</span>);</span><br><span class="line">     System.<span class="keyword">out</span>.println(<span class="string">"请输入职位:"</span>);</span><br><span class="line">     String Type=sc.next();</span><br><span class="line">     System.<span class="keyword">out</span>.println(<span class="string">"请输入姓名:"</span>);</span><br><span class="line">     String N=sc.next();</span><br><span class="line">     System.<span class="keyword">out</span>.println(<span class="string">"请输入编号:"</span>);</span><br><span class="line">     <span class="keyword">int</span> Num=sc.nextInt();</span><br><span class="line">     System.<span class="keyword">out</span>.println(<span class="string">"请输入工时:"</span>);</span><br><span class="line">     <span class="keyword">double</span> X=sc.nextDouble();</span><br><span class="line">     f.S(X, N, Num, Type);</span><br><span class="line">     System.<span class="keyword">out</span>.println(N+奖金为<span class="string">"+f.getMoney());</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="类与类，类与接口，接口与接口之间的关系"><a href="#类与类，类与接口，接口与接口之间的关系" class="headerlink" title="类与类，类与接口，接口与接口之间的关系"></a>类与类，类与接口，接口与接口之间的关系</h2><ul><li>类与类之间，一个类只能继承一个类，但是类可以多层继承</li><li>类与接口则是实现关系，一个类可以继承一个接口，也可以继承多个接口，也可以继承一个类的同时实现多个接口</li><li>接口与接口之间是继承关系，一个接口可以继承另一个接口，也可以继承多个接口<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: mao.qitian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/8/12 0012 0:22</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="class"><span class="keyword">interface</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span>,<span class="title">A</span></span>&#123; <span class="comment">//接口与接口之间继承，多继承</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">c</span><span class="params">()</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">implements</span> <span class="title">A</span>,<span class="title">B</span>,<span class="title">C</span></span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">c</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="抽象类和接口的区别"><a href="#抽象类和接口的区别" class="headerlink" title="抽象类和接口的区别"></a>抽象类和接口的区别</h2><table><thead><tr><th>类</th><th>成员区别</th><th>继承关系区别</th><th>设计理念区别</th></tr></thead><tbody><tr><td>抽象类</td><td>成员变量可以是常量，也可以是变量，有构造方法，成员方法可以是抽象的也可以是非抽象的</td><td>单继承，多层继承</td><td>被继承的体现是“is a”的关系，抽象类中定义的是该继承体系的共性功能</td></tr><tr><td>接口</td><td>成员变量只能是常量，没有构造方法，成员方法只能是抽象的</td><td>实现，可以实现多个接口</td><td>被继承的体现是“like a”的关系，接口中定义的是该继承体现的扩展功能</td></tr></tbody></table><h2 id="最后说点"><a href="#最后说点" class="headerlink" title="最后说点"></a>最后说点</h2><ul><li><p>还是那句话，好记性不如烂笔头，通过这一篇文章，再次巩固了基础知识。如果文章中有写得不对的地方，请给我留言指出，大家一起学习进步。</p></li><li><p>参考资料:</p><ul><li>《Android进阶之光》</li><li>《Java编程思想》(第四版)</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;抽象(abstract)和接口(interface)在Java中都是关键字，也就说明他们足够重要，而抽象类和接口为我们面向对象编程提供了非常大的帮助。下面我们就一起来回顾这基础知识。&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java基础回顾" scheme="https://www.maoqitian.com/categories/Java%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE/"/>
    
    
      <category term="Java" scheme="https://www.maoqitian.com/tags/Java/"/>
    
      <category term="interface" scheme="https://www.maoqitian.com/tags/interface/"/>
    
      <category term="abstract" scheme="https://www.maoqitian.com/tags/abstract/"/>
    
      <category term="策略模式" scheme="https://www.maoqitian.com/tags/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins+Gitlab+Maven+Tomcat 持续集成，自动部署项目</title>
    <link href="https://www.maoqitian.com/2019/01/14/Jenkins%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    <id>https://www.maoqitian.com/2019/01/14/Jenkins持续集成/</id>
    <published>2019-01-14T07:55:49.000Z</published>
    <updated>2019-01-16T15:12:22.023Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/Jenkins.jpg" width="80%"></p><blockquote><p>持续集成：Continuous Integration，简称CI，意思是，在一个项目中，任何人对代码库的任何改动，都会触发CI服务器自动对项目进行构建，自动运行测试，甚至自动部署到测试环境。这样做的好处就是，随时发现问题，随时修复。因为修复问题的成本随着时间的推移而增长，越早发现，修复成本越低。当你想要更新你的项目，只要动手提交代码到你的代码仓库，剩余的更新部署操作就只管交由CI服务器来完成就好，这次使用的CI工具是JenKins。<br><a id="more"></a></p><ul><li>搭建Jenkins持续集成服务器可以分为两大步骤，一是在服务器安装好所需的软件，二是配置我们的持续集成项目<!--more--></li></ul></blockquote><h3 id="安装所需的各种软件"><a href="#安装所需的各种软件" class="headerlink" title="安装所需的各种软件"></a>安装所需的各种软件</h3><h4 id="安装启动-Jenkins"><a href="#安装启动-Jenkins" class="headerlink" title="安装启动 Jenkins"></a>安装启动 Jenkins</h4><ul><li>从Jenkins<a href="https://jenkins.io/" target="_blank" rel="noopener">官方网站</a>下载最新的rpm包<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">执行命令 rpm -ivh xxx.rpm  安装Jenkins</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动JenKins</span></span><br><span class="line"><span class="regexp">/etc/</span>init.d/jenkins start </span><br><span class="line"></span><br><span class="line">浏览器输入 <span class="string">http:</span><span class="comment">//xxx服务器地址:8080/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认端口号是8080</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/Jenkins%E5%90%AF%E5%8A%A81.png" alt="JenKins启动1"><br><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/JenKins%E5%90%AF%E5%8A%A8.png" alt="JenKins启动"></p><ul><li>JenKins默认端口号是8080，这与Tomcat默认端口号冲突，所有我们可以把Jenkins的端口号改成我们自己定义的端口号 9090<ul><li>修改端口号的文件为 /etc/sysconfig/jenkins，字段为JENKINS_PORT<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//</span>执行命令进行修改，如果碰到无法启动Jnekins,无法启动（如遇此Starting Jenkins bash: <span class="string">/usr/bin/java</span>: No such file or directory错误 ）修改 <span class="string">/etc/init.d/jenkins</span> 加入 <span class="string">/opt/jdk1.8.0_181/bin/java</span>原因</span><br><span class="line"><span class="string">//</span>是Java的环境变量没有找到，一般使用centos服务默认安装openjdk，如果自己卸载openJdk并重新安装sun的JDK,则也需要在该文件中加入路径，如图所示</span><br><span class="line"></span><br><span class="line">vim <span class="string">/etc/sysconfig/jenkins</span> </span><br><span class="line"></span><br><span class="line"><span class="string">//</span>添加Java地址</span><br><span class="line"></span><br><span class="line">vim <span class="string">/etc/init.d/jenkins</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/%E4%BF%AE%E6%94%B9Jenkins%E7%AB%AF%E5%8F%A3.png" alt="修改Jenkins端口"><br><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/%E6%B7%BB%E5%8A%A0Java%E5%9C%B0%E5%9D%80.png" alt="添加Java地址"></p><ul><li>修改端口无法启动的情况，有可能是服务器防火墙没有添加端口的监听，导致无法访问</li></ul><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="meta-keyword">/etc/</span>sysconfig/iptables</span><br><span class="line">  </span><br><span class="line">查看是否监听端口(如果配置了自己定义的端口，需要先访问该端口一次才能看到监听)</span><br><span class="line">  </span><br><span class="line">netstat -ntlp</span><br><span class="line">  </span><br><span class="line"><span class="comment">//重启防火墙配置（不重启端口还是无法生效）</span></span><br><span class="line">service iptables restart</span><br></pre></td></tr></table></figure><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/%E6%B7%BB%E5%8A%A0%E6%96%B0%E7%9B%91%E5%90%AC%E7%9A%84%E7%AB%AF%E5%8F%A3.png" alt="添加新监听的端口"></p><h4 id="关闭Jenkins"><a href="#关闭Jenkins" class="headerlink" title="关闭Jenkins"></a>关闭Jenkins</h4><ul><li>只需要在访问jenkins服务器的网址url地址后加上exit。例如我jenkins的地址<a href="http://localhost:8080/，那么我只需要在浏览器地址栏上输入http://xxx:9090/exit" target="_blank" rel="noopener">http://localhost:8080/，那么我只需要在浏览器地址栏上输入http://xxx:9090/exit</a> 网址就能关闭jenkins服务.<h4 id="重启Jenkies"><a href="#重启Jenkies" class="headerlink" title="重启Jenkies"></a>重启Jenkies</h4></li></ul><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//xxx:8080 是搭建Jenkins服务器地址</span></span><br><span class="line"><span class="symbol">http:</span><span class="comment">//xxx:8080/restart</span></span><br></pre></td></tr></table></figure><ul><li><p>重新加载配置信息</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">http:</span><span class="comment">//localhost:8080/reload</span></span><br></pre></td></tr></table></figure></li><li><p>Jenkins的卸载</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>卸载软件：rpm -e jenkins</span><br><span class="line"></span><br><span class="line"><span class="bullet">2. </span>删除遗留文件: find / -iname jenkins | xargs -n 1000 rm -rf</span><br></pre></td></tr></table></figure></li></ul><h4 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h4><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">查看Java相关的包信息： </span><br><span class="line"> rpm -qa|grep java （或rpm -qa|grep jdk，rpm安装后，包名里没有Java）</span><br><span class="line">卸载 </span><br><span class="line">yum -y remove java [包名] </span><br><span class="line">例如 </span><br><span class="line">yum –y remove java java-<span class="number">1.8</span>.<span class="number">0</span>-openjdk-<span class="number">1.8</span>.<span class="number">0.131</span>-<span class="number">3</span>.b12.el7_3.x86_64 </span><br><span class="line"></span><br><span class="line">jdk 卸载方法 <span class="symbol">https:</span>/<span class="regexp">/blog.csdn.net/xyj</span>0808xyj/article/details/<span class="number">52444694</span></span><br><span class="line"></span><br><span class="line">/<span class="regexp">/解压到指定目录</span></span><br><span class="line"><span class="regexp">tar -zxvf jdk-8u181-linux-x64.tar.gz -C /opt</span><span class="regexp">/</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/编辑配置文件</span></span><br><span class="line"><span class="regexp">vim /etc</span><span class="regexp">/profile</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export JAVA_HOME=/opt</span><span class="regexp">/jdk1.8.0_181</span></span><br><span class="line"><span class="regexp">export PATH=$JAVA_HOME/bin</span>:$PATH</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/<span class="class"><span class="keyword">lib</span>:$<span class="title">JAVA_HOME</span>/<span class="title">jre</span>/<span class="title">lib</span>:$<span class="title">CLASSPATH</span> </span></span><br><span class="line">  </span><br><span class="line">/<span class="regexp">/更新配置文件</span></span><br><span class="line"><span class="regexp">source /etc</span><span class="regexp">/profile</span></span><br></pre></td></tr></table></figure><h4 id="安装Tomcat"><a href="#安装Tomcat" class="headerlink" title="安装Tomcat"></a>安装Tomcat</h4><ul><li>官网下载 <a href="https://tomcat.apache.org/download-80.cgi" target="_blank" rel="noopener">Tomcat8.5</a></li><li>直接解压到服务器（注意这里指的服务器是项目部署的服务器，应该是和部署JenKins的服务器不同） </li><li>强制关闭 tomcat 命令<figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//强制关闭</span></span><br><span class="line">ps -ef<span class="string">|grep tomcat</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//杀掉无法关闭进程</span></span><br><span class="line">kill -<span class="number">9</span> XXXX</span><br></pre></td></tr></table></figure></li></ul><h4 id="安装-git-安装在部署JenKins服务器上"><a href="#安装-git-安装在部署JenKins服务器上" class="headerlink" title="安装 git (安装在部署JenKins服务器上)"></a>安装 git (安装在部署JenKins服务器上)</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">安装依赖</span><br><span class="line">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel asciidoc</span><br><span class="line"></span><br><span class="line">yum install  gcc <span class="keyword">perl</span>-ExtUtils-MakeMaker</span><br><span class="line"></span><br><span class="line">如果已经安装了git,但是版本太老，可以先卸载</span><br><span class="line">yum <span class="built_in">remove</span> git </span><br><span class="line"></span><br><span class="line">下载git包解压</span><br><span class="line">tar -vxf git-<span class="number">2.15</span>.<span class="number">1</span>.tar.gz -C /<span class="keyword">opt</span></span><br><span class="line"></span><br><span class="line">进入git 目录</span><br><span class="line"><span class="keyword">cd</span> /<span class="keyword">opt</span>/git-<span class="number">2.18</span>.<span class="number">0</span>/</span><br><span class="line"></span><br><span class="line">执行以下命令</span><br><span class="line"></span><br><span class="line"><span class="keyword">make</span> prefix=/usr/local/git <span class="keyword">all</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">make</span> prefix=/usr/local/git install</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"export PATH=$PATH:/usr/local/git/bin"</span> &gt;&gt; /etc/<span class="keyword">profile</span>  //配置环境变量</span><br><span class="line"></span><br><span class="line"><span class="keyword">source</span> /etc/<span class="keyword">profile</span> //跟新配置文件</span><br><span class="line"></span><br><span class="line">git --<span class="keyword">version</span> 查看git版本</span><br></pre></td></tr></table></figure><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/%E5%AE%89%E8%A3%85git%E7%89%88%E6%9C%AC.png" alt="安装git版本"></p><h4 id="安装-maven-安装在部署JenKins服务器上"><a href="#安装-maven-安装在部署JenKins服务器上" class="headerlink" title="安装 maven(安装在部署JenKins服务器上)"></a>安装 maven(安装在部署JenKins服务器上)</h4><ul><li>后台项目为spring-boot搭建，需要安装maven</li><li>下载 <a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">maven 3.5.4</a><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">执行以下命令</span><br><span class="line">tar -zxvf apache-maven-3.3.9-bin.tar.gz -C /opt</span><br><span class="line"></span><br><span class="line">在/etc/profile文件末尾增加以下配置</span><br><span class="line"><span class="attribute">M2_HOME</span>=/opt/apache-maven-3.5.4 （注意这里是maven的安装路径）</span><br><span class="line"> <span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$&#123;M2_HOME&#125;</span>/bin:$&#123;PATH&#125;</span><br><span class="line"> </span><br><span class="line">重载/etc/profile这个文件</span><br><span class="line">  source /etc/profile</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/maven%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F.png" alt="maven安装成功"></p><h4 id="GitLab服务器配置"><a href="#GitLab服务器配置" class="headerlink" title="GitLab服务器配置"></a>GitLab服务器配置</h4><ul><li>由于公司已经搭建好Gitlab服务器，所以我也没有配置过Gitlab，不过Gitlab配置网上已经有很多资料，可以自行百度。</li></ul><h3 id="Jenkins基础工具配置、新建项目配置"><a href="#Jenkins基础工具配置、新建项目配置" class="headerlink" title="Jenkins基础工具配置、新建项目配置"></a>Jenkins基础工具配置、新建项目配置</h3><h4 id="Jenkins配置"><a href="#Jenkins配置" class="headerlink" title="Jenkins配置"></a>Jenkins配置</h4><ul><li>第一次进入Jnekins,首先根据提示找到安装服务器的密码</li><li>如果服务器可以联网，则选择他推荐的插件直接安装，如果服务器无法连接外网，只是在公司内网环境，则可以离线下载插件再上传到我们服务器的Jenkin中，<a href="https://plugins.jenkins.io/" target="_blank" rel="noopener">离线插件下载地址</a>，这种方式需要耐心，因为需要安装的插件可不止一两个，如果你的服务器不能上网，我这有一份下载好的插件，可以自行去下载（<a href="https://github.com/maoqitian/MaoMdPhoto/tree/master/Jenkins%E6%8F%92%E4%BB%B6" target="_blank" rel="noopener">下载地址</a>）</li><li>在Jenkins系统管理模块的系统配置中配置我们的Gitlab,需要登录到Gitlab中获取APIToken<br><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AEGitLab.png" alt="系统配置GitLab"><br><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/%E8%8E%B7%E5%8F%96API%20Token.png" alt="获取API Token"><br><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/GitLab%20API%20Token%E9%85%8D%E7%BD%AE%20.png" alt="GitLab API Token配置 "><h4 id="生成ssh-key（在部署Jenkins服务器上生成）"><a href="#生成ssh-key（在部署Jenkins服务器上生成）" class="headerlink" title="生成ssh key（在部署Jenkins服务器上生成）"></a>生成ssh key（在部署Jenkins服务器上生成）</h4></li><li>配置SSH KEY ,用于后续项目可以通过Jenkins部署到应用服务器</li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//</span>输入命令，一路回车</span><br><span class="line">ssh-keygen -t rsa </span><br><span class="line">         </span><br><span class="line"><span class="string">//</span>现在你的私钥被放在了~<span class="string">/.ssh/id_rsa</span> 这个文件里，而公钥被放在了 ~<span class="string">/.ssh/id_rsa.pub</span> 这个文件里</span><br><span class="line">         </span><br><span class="line"><span class="string">//</span>可以将私钥配置到JneKins的系统设置中，配置框选项是需要Jenkins安装SSH插件的，如下图所示</span><br><span class="line">         </span><br><span class="line"><span class="string">//</span>公钥则配置到各个应用服务器的这个目录下<span class="string">/root/.ssh/authorized_keys</span>，没有authorized_keys则创建这个文件，如下图所示</span><br><span class="line">         </span><br><span class="line"><span class="string">//</span>最后测试应用服务器是否都能成功连接，如下图所示</span><br></pre></td></tr></table></figure><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/ssh%E7%A7%81%E9%92%A5%E9%85%8D%E7%BD%AE.png" alt="ssh私钥配置"><br><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/%E5%85%AC%E9%92%A5%E5%A4%8D%E5%88%B6%E5%88%B0%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8authorized_keys.png" alt="公钥复制到应用服务器authorized_keys"><br><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/%E6%B5%8B%E8%AF%95%E9%85%8D%E7%BD%AE%E5%85%AC%E9%92%A5%E7%9A%84%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%98%AF%E5%90%A6%E8%BF%9E%E6%8E%A5%E6%88%90%E5%8A%9F.png" alt="测试配置公钥的应用服务器是否连接成功"></p><h4 id="工具配置"><a href="#工具配置" class="headerlink" title="工具配置"></a>工具配置</h4><ul><li>接下来还是系统管理模块中的全局工具配置 Jenkins的 JDK、git和maven。前面我们已经把这些工具都给安装了，现在配置到Jenkins中，如下图所示</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/%E9%85%8D%E7%BD%AEJenkins%20jdk%20git.png" alt="配置Jenkins jdk git"><br><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/%E9%85%8D%E7%BD%AEJenkins%20maven.png" alt="配置Jenkins maven"></p><h4 id="新建项目配置"><a href="#新建项目配置" class="headerlink" title="新建项目配置"></a>新建项目配置</h4><ul><li>新建一个maven项目（没有maven项目选项则需要下载对应插件）</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/%E6%96%B0%E5%BB%BAmaven%E9%A1%B9%E7%9B%AE.png" alt="新建maven项目"></p><ul><li>首先配置源码管理，如图</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%BA%90%E7%A0%81%E7%AE%A1%E7%90%86%E9%85%8D%E7%BD%AE.png" alt="新建项目源码管理配置"></p><ul><li>配置项目构建触发器（Gitlab Hook Plugin， Outbound WebHook for build events，Build Authorization Token Root， Success<br>Build Token Trigger插件）</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/%E9%85%8D%E7%BD%AE%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8.png" alt="配置项目构建触发器"></p><ul><li>配置maven项目编译</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/%E9%85%8D%E7%BD%AEmaven%E9%A1%B9%E7%9B%AE%E7%BC%96%E8%AF%91.png" alt="配置maven项目编译"></p><ul><li>项目构建成功后部署应用服务器的配置 </li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E6%88%90%E5%8A%9F%E5%90%8E%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E9%85%8D%E7%BD%AE.png" alt="项目构建成功后部署应用服务器的配置"></p><ul><li>Tomcat重启脚本(应当放在与Tomcat目录同路径下)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/sh</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'####################开始自动部署####################'</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/jdk1.8.0_181</span><br><span class="line">path=`<span class="built_in">pwd</span>` <span class="comment">#当前路径</span></span><br><span class="line">tomcatPath=/data/XXXX/tomcat_gxxmt_8080 <span class="comment">#指定tomcat文件目录名称</span></span><br><span class="line"><span class="built_in">cd</span> ../<span class="variable">$tomcatPath</span>/bin <span class="comment">#进入tomcat的bin目录</span></span><br><span class="line">PID=$(ps -fu `whoami`|grep tomcat|grep -v grep|awk <span class="string">'&#123;print $2&#125;'</span>)</span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$PID</span>"</span> ];<span class="keyword">then</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">"no tomcat process"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">./shutdown.sh <span class="comment">#停止tomcat服务</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">cd</span> ../webapps <span class="comment">#进入tomcat的webapps目录</span></span><br><span class="line">rm -rf XXXX-api</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'####################删除完成####################'</span></span><br><span class="line"><span class="comment">#rm -fr gxxmt-api.war #删除test文件目录</span></span><br><span class="line"><span class="comment">#mv gxxmt-api.war gxxmt-api.war.$(date +%Y%m%d) #备份webapps下的test16 cp $path/test.war ./ #复制test.war到webapps路径下</span></span><br><span class="line"><span class="comment">#cd /var/lib/jenkins/workspace/gxxmt-api/gxxmt-api/target/</span></span><br><span class="line"><span class="comment">#cp gxxmt-api.war /data/gxxmt/tomcat_gxxmt_8080/webapps/</span></span><br><span class="line"><span class="built_in">cd</span> ../bin</span><br><span class="line">./startup.sh <span class="comment">#启动tomcat服务</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'####################部署结束####################'</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>项目构建成功并发布到了对应服务器执行对应脚本，这里就可以看到JenKins的灵活性，可以配置多台发布的应用服务器的多个Tomcat,灵活自动部署应用服务器配置</p></li><li><p>项目构建编译部署成功</p></li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E7%BC%96%E8%AF%91%E9%83%A8%E7%BD%B2%E6%88%90%E5%8A%9F.png" alt="项目构建编译部署成功"></p><h3 id="集成部署遇到的问题"><a href="#集成部署遇到的问题" class="headerlink" title="集成部署遇到的问题"></a>集成部署遇到的问题</h3><h4 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h4><ul><li>ERROR: Exception when publishing, exception message [Exec timed out or was interrupted after 120,000 ms]（执行脚本没有正常退出，导致部署超时）<br><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/%E9%94%99%E8%AF%AF1.png" alt="错误1"></li><li><p>解决：脚本执行加入忽略输入（nohup ….）</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nohup sh <span class="regexp">/data/</span>gxxmt-api/restart.sh</span><br><span class="line"><span class="comment">//当我们使用nohup命令的的时候，日志会被打印到nohup.out文件中去。</span></span><br><span class="line"><span class="comment">//如果我们不做任何处理，会随着每次的重新启动，nohup.out会越来越大</span></span><br><span class="line"><span class="comment">//。所以我在我执行的脚本中添加了</span></span><br><span class="line">cp <span class="regexp">/dev/</span><span class="literal">null</span> nohup.out</span><br></pre></td></tr></table></figure></li><li><p>在jenkins项目配置SSH Publishers勾选了Exec in pty，表示执行完脚本立即退出<br><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/%E9%94%99%E8%AF%AF1%E8%A7%A3%E5%86%B3%E5%8B%BE%E9%80%89Exec%20in%20pty.png" alt="错误1解决勾选Exec in pty"></p><h4 id="问题二，Jenkins目录迁移"><a href="#问题二，Jenkins目录迁移" class="headerlink" title="问题二，Jenkins目录迁移"></a>问题二，Jenkins目录迁移</h4></li><li>jenkins主目录迁移，jenkins默认主目录一般都是安装在系统盘，运行一段时间后项目部署的历史版本，日志文件，工作控件都会占用大量的系统空间，这样就会引发系统盘磁盘空间不足，首先我们可以修改jenkins主目录<figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/<span class="regexp">/更改主目录</span></span><br><span class="line"><span class="regexp">vim /etc</span><span class="regexp">/sysconfig/jenkins</span></span><br><span class="line">JENKINS_HOME=<span class="string">"/data/jenkins"</span></span><br><span class="line"></span><br><span class="line">复制 /var/<span class="class"><span class="keyword">lib</span>/<span class="title">jenkins</span>/ 目录到 /<span class="title">data</span>目录下</span></span><br><span class="line"></span><br><span class="line">修改目录用户权限</span><br><span class="line"></span><br><span class="line">chown -R <span class="symbol">jenkins:</span>jenkins /data/jenkins</span><br><span class="line"></span><br><span class="line">重启 /etc/sysconfig/jenkins restart</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/%E4%B8%BB%E7%9B%AE%E5%BD%95%E4%BF%AE%E6%94%B9%E6%88%90%E5%8A%9F.png" alt="主目录修改成功"></p><ul><li>其次我们还可以在项目配置中设置丢弃历史构建</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/%E8%AE%BE%E7%BD%AE%E4%B8%A2%E5%BC%83%E5%8E%86%E5%8F%B2%E6%9E%84%E5%BB%BA.png" alt="设置丢弃历史构建"></p><h4 id="问题三，代码提交触发构建"><a href="#问题三，代码提交触发构建" class="headerlink" title="问题三，代码提交触发构建"></a>问题三，代码提交触发构建</h4><ul><li>Url is blocked: Requests to the local network are not allowed Gitlab设置Jenkins的webhook地址无法设置</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/WebHook%E5%9C%B0%E5%9D%80%E6%97%A0%E6%B3%95%E8%AE%BE%E7%BD%AE.png" alt="WebHook地址无法设置"></p><ul><li>升级新版Gitlab，要允许WebHook，需要在在Gitlab的Admin账户中，在settings标签下面，找到OutBound Request，勾选上Allow requests to the local network from hooks and services ，保存更改即可解决问题（如下图所示）</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/Gitlab%20%E5%85%81%E8%AE%B8WebHook.png" alt="Gitlab 允许WebHook"></p><h4 id="问题四"><a href="#问题四" class="headerlink" title="问题四"></a>问题四</h4><ul><li>Gradle 编译Android 项目 /lib64/libc.so.6: version `GLIBC_2.14’ not found，系统是CentOS 6.9，最高支持glibc的版本为2.12，而研发程序要2.14版本，所以需要升级。<br>  <img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/glibc_2.14%E5%BA%93%E6%97%A0%E6%B3%95%E6%89%BE%E5%88%B0.png" alt="glibc_2.14库无法找到"><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//</span>查看系统版本</span><br><span class="line">cat <span class="string">/etc/redhat-release</span></span><br><span class="line"><span class="string">//</span>查看glibc库版本</span><br><span class="line">strings <span class="string">/lib64/libc.so.6</span> |grep GLIBC_</span><br><span class="line"><span class="string">//</span>下载glibc库 并安装</span><br><span class="line"><span class="comment">#下载</span></span><br><span class="line">wget http:<span class="string">//ftp.gnu.org/gnu/glibc/glibc-2.14.tar.gz</span> </span><br><span class="line">wget http:<span class="string">//ftp.gnu.org/gnu/glibc/glibc-ports-2.14.tar.gz</span> </span><br><span class="line"><span class="comment">#解压</span></span><br><span class="line">tar -xvf  glibc-2.14.tar.gz </span><br><span class="line">tar -xvf  glibc-ports-2.14.tar.gz</span><br><span class="line"><span class="comment">#创建相关目录</span></span><br><span class="line">mv glibc-ports-2.14 glibc-2.14/ports</span><br><span class="line">mkdir glibc-build-2.14</span><br><span class="line"><span class="keyword">cd</span> glibc-build-2.14/ </span><br><span class="line"></span><br><span class="line"><span class="comment">#生成C编译的环境</span></span><br><span class="line">yum -y install gcc</span><br><span class="line"></span><br><span class="line"><span class="comment">#编译C</span></span><br><span class="line"><span class="string">../glibc-2.14/configure</span>  <span class="params">--prefix=/usr</span> <span class="params">--disable-profile</span> <span class="params">--enable-add-ons</span> <span class="params">--with-headers=/usr/include</span> <span class="params">--with-binutils=/usr/bin</span></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装刚才编译好的 libc.so</span></span><br><span class="line">makeinstall </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看glibc库版本</span></span><br><span class="line">strings <span class="string">/lib64/libc.so.6</span> |grep GLIBC_</span><br></pre></td></tr></table></figure></li></ul><h3 id="最后说点"><a href="#最后说点" class="headerlink" title="最后说点"></a>最后说点</h3><ul><li><p>到此，我们的持续集成服务器已经搭建完成，这时候你只要动手提交一下代码到你前面构建触发器设置的分支（一般为主分支），剩余的项目构建，部署等一系列重复繁琐的工作就交由Jenkins帮我们自动完成就可以了，省时又方便。文章中如果有错误，请大家给我提出来，大家一起学习进步，如果觉得我的文章给予你帮助，也请给我一个喜欢或者关注。</p></li><li><p>参考链接:</p><ul><li><p><a href="https://blog.csdn.net/xiyatu123/article/details/53039749" target="_blank" rel="noopener">jenkins的安装与使用（基于 centos 7）</a></p></li><li><p><a href="https://www.jianshu.com/p/d4f2953f3ce0" target="_blank" rel="noopener">jenkins maven Spring Boot git Linux持续集成环境搭建教程</a></p></li><li><a href="https://blog.csdn.net/ouyang_peng/article/details/79974407" target="_blank" rel="noopener">解决SDK升级到27.0.3遇到的GLIBC_2.14 not found</a></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://github.com/maoqitian/MaoMdPhoto/raw/master/Jenkins/Jenkins.jpg&quot; width=&quot;80%&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;持续集成：Continuous Integration，简称CI，意思是，在一个项目中，任何人对代码库的任何改动，都会触发CI服务器自动对项目进行构建，自动运行测试，甚至自动部署到测试环境。这样做的好处就是，随时发现问题，随时修复。因为修复问题的成本随着时间的推移而增长，越早发现，修复成本越低。当你想要更新你的项目，只要动手提交代码到你的代码仓库，剩余的更新部署操作就只管交由CI服务器来完成就好，这次使用的CI工具是JenKins。&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="持续集成（CI）" scheme="https://www.maoqitian.com/categories/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%EF%BC%88CI%EF%BC%89/"/>
    
    
      <category term="CentOS" scheme="https://www.maoqitian.com/tags/CentOS/"/>
    
      <category term="Maven" scheme="https://www.maoqitian.com/tags/Maven/"/>
    
      <category term="Jenkins" scheme="https://www.maoqitian.com/tags/Jenkins/"/>
    
      <category term="git" scheme="https://www.maoqitian.com/tags/git/"/>
    
      <category term="GitLab" scheme="https://www.maoqitian.com/tags/GitLab/"/>
    
      <category term="Tomcat" scheme="https://www.maoqitian.com/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>FastDFS服务器集群部署和集成客户端到SpringBoot</title>
    <link href="https://www.maoqitian.com/2019/01/12/FastDFS%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2%E5%92%8C%E9%9B%86%E6%88%90%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%88%B0SpringBoot/"/>
    <id>https://www.maoqitian.com/2019/01/12/FastDFS服务器集群部署和集成客户端到SpringBoot/</id>
    <published>2019-01-12T08:33:11.000Z</published>
    <updated>2019-01-16T15:12:15.302Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题，同时也能做到在集群环境下一台机子上传文件，同时该组下的其他节点下也备份了上传的文件。做分布式系统开发时，其中要解决的一个问题就是图片、音视频、文件共享的问题和数据备份，分布式文件系统正好可以解决这个需求。FastDFS的服务主要有两个角色Tracker和Storage，Tracker服务用于负责调度storage节点与client通信，在访问上起负载均衡的作用，和记录storage节点的运行状态，是连接client和storage节点的枢纽，Storage用于保存文件</p></blockquote><h3 id="1-FastDFS集群部署"><a href="#1-FastDFS集群部署" class="headerlink" title="1.FastDFS集群部署"></a>1.FastDFS集群部署</h3><h4 id="整体部署模块图"><a href="#整体部署模块图" class="headerlink" title="整体部署模块图"></a>整体部署模块图</h4><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/FastDFS/FastDFS%E9%83%A8%E7%BD%B2%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="FastDFS部署示意图"></p><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>centos系统版本</td><td>6.9</td></tr><tr><td>libfatscommon</td><td>FastDFS分离出的一些公用函数包</td></tr><tr><td>FastDFS</td><td>FastDFS主程序</td></tr><tr><td>fastdfs-nginx-module</td><td>FastDFS和nginx的关联模块</td></tr><tr><td>nginx</td><td>nginx1.15.5</td></tr></tbody></table><h4 id="安装编译环境"><a href="#安装编译环境" class="headerlink" title="安装编译环境"></a>安装编译环境</h4><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install git gcc gcc-c++ make automake autoconf libtool pcre pcre-devel <span class="literal">zlib</span> <span class="literal">zlib</span>-devel openssl-devel wget vim -y</span><br></pre></td></tr></table></figure><h4 id="磁盘安装路径说明"><a href="#磁盘安装路径说明" class="headerlink" title="磁盘安装路径说明"></a>磁盘安装路径说明</h4><table><thead><tr><th>说明</th><th>位置</th></tr></thead><tbody><tr><td>FastDFS所以安装包安装位置</td><td>/usr/local/src</td></tr><tr><td>tracker数据</td><td>/data/fdfs/tracker</td></tr><tr><td>Storage数据</td><td>/data/fdfs/Storage</td></tr><tr><td>配置文件路径</td><td>/etc/fdfs</td></tr></tbody></table><h4 id="安装libfatscommon"><a href="#安装libfatscommon" class="headerlink" title="安装libfatscommon"></a>安装libfatscommon</h4><ul><li><p><a href="https://github.com/happyfish100/libfastcommon" target="_blank" rel="noopener">下载libfatscommon</a></p></li><li><p>解压、安装</p></li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unzip libfastcommon-master.zip</span><br><span class="line">cd libfastcommon-master</span><br><span class="line">./make<span class="selector-class">.sh</span> &amp;&amp; ./make<span class="selector-class">.sh</span> install #编译安装</span><br></pre></td></tr></table></figure><h4 id="安装FastDFS"><a href="#安装FastDFS" class="headerlink" title="安装FastDFS"></a>安装FastDFS</h4><ul><li><a href="https://github.com/happyfish100/fastdfs" target="_blank" rel="noopener">下载FastDFS</a></li><li>解压、安装</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">unzip fastdfs-master.zip</span><br><span class="line">cd fastdfs-master</span><br><span class="line">./make<span class="selector-class">.sh</span> &amp;&amp; ./make<span class="selector-class">.sh</span> install #编译安装</span><br><span class="line">cp /etc/fdfs/tracker<span class="selector-class">.conf</span><span class="selector-class">.sample</span> /etc/fdfs/tracker.conf</span><br><span class="line">cp /etc/fdfs/storage<span class="selector-class">.conf</span><span class="selector-class">.sample</span> /etc/fdfs/storage.conf</span><br><span class="line">cp /etc/fdfs/client<span class="selector-class">.conf</span><span class="selector-class">.sample</span> /etc/fdfs/client<span class="selector-class">.conf</span> #客户端文件，测试用</span><br><span class="line">cp /usr/local/src/fastdfs/conf/http<span class="selector-class">.conf</span> /etc/fdfs/ #供nginx访问使用</span><br><span class="line">cp /usr/local/src/fastdfs/conf/mime<span class="selector-class">.types</span> /etc/fdfs/ #供nginx访问使用</span><br></pre></td></tr></table></figure><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/FastDFS/etc%E7%9B%AE%E5%BD%95%E4%B8%8Bfdfs%E7%9B%AE%E5%BD%95.png" alt="etc目录下fdfs目录">    </p><h4 id="安装fastdfs-nginx-module"><a href="#安装fastdfs-nginx-module" class="headerlink" title="安装fastdfs-nginx-module"></a>安装fastdfs-nginx-module</h4><ul><li><a href="https://github.com/happyfish100/fastdfs-nginx-module" target="_blank" rel="noopener">下载fastdfs-nginx-module</a></li><li>解压、安装</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unzip fastdfs-nginx-module-master.zip</span><br><span class="line">cp <span class="regexp">/usr/</span>local<span class="regexp">/src/</span>fastdfs-nginx-module-master<span class="regexp">/src/m</span>od_fastdfs.conf <span class="regexp">/etc/</span>fdfs <span class="comment">#复制配置文件到fdfs目录</span></span><br></pre></td></tr></table></figure><h4 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h4><ul><li><a href="http://nginx.org/download/nginx-1.15.5.tar.gz" target="_blank" rel="noopener">下载nginx</a> </li><li>解压、安装</li></ul><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-<span class="number">1.15</span>.<span class="number">5</span>.tar.gz</span><br><span class="line">cd nginx-<span class="number">1.15</span>.<span class="number">5</span></span><br><span class="line"><span class="comment">#添加fastdfs-nginx-module模块</span></span><br><span class="line">./configure --add-<span class="keyword">module</span>=<span class="regexp">/usr/local</span><span class="regexp">/src/fastdfs</span>-nginx-<span class="keyword">module</span>-master/src/ </span><br><span class="line">make &amp;&amp; make install <span class="comment">#编译安装</span></span><br></pre></td></tr></table></figure><h4 id="FastDFS集群部署配置"><a href="#FastDFS集群部署配置" class="headerlink" title="FastDFS集群部署配置"></a>FastDFS集群部署配置</h4><ul><li><p>tracker配置</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#服务器ip为 xxx.xxx.78.12, xxx.xxx.78.13</span></span><br><span class="line">vim /etc/fdfs/tracker.conf</span><br><span class="line"><span class="comment">#需要修改的内容如下</span></span><br><span class="line">port=22122  <span class="comment"># tracker服务器端口（默认22122,一般不修改）</span></span><br><span class="line">base_path=/data/fdfs/tracker <span class="comment">#存储日志和数据的根目录</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/FastDFS/tracker%E9%85%8D%E7%BD%AE.png" alt="tracker配置"></p><ul><li>Storage配置</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/fdfs/storage.conf</span><br><span class="line"><span class="comment">#需要修改的内容如下</span></span><br><span class="line">port=23000  <span class="comment"># storage服务端口（默认23000,一般不修改）</span></span><br><span class="line">base_path=/data/fdfs/storage  <span class="comment"># 数据和日志文件存储根目录</span></span><br><span class="line">store_path0=/data/fdfs/storage  <span class="comment"># 第一个存储目录</span></span><br><span class="line">tracker_server=xxx.xxx.78.12:22122  <span class="comment"># 服务器1</span></span><br><span class="line">tracker_server=xxx.xxx.78.13:22122  <span class="comment"># 服务器2</span></span><br><span class="line">http.server_port=8888  <span class="comment"># http访问文件的端口(默认8888,看情况修改,和nginx中保持一致)</span></span><br></pre></td></tr></table></figure><ul><li>client配置</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/fdfs/client.conf</span><br><span class="line"><span class="comment">#需要修改的内容如下</span></span><br><span class="line">base_path=/home/moe/dfs</span><br><span class="line">tracker_server=xxx.xxx.78.12:22122  <span class="comment"># 服务器1</span></span><br><span class="line">tracker_server=xxx.xxx.78.13:22122  <span class="comment"># 服务器2</span></span><br></pre></td></tr></table></figure><ul><li>配置nginx访问<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/fdfs/mod_fastdfs.conf</span><br><span class="line"><span class="comment">#需要修改的内容如下</span></span><br><span class="line"><span class="attribute">tracker_server</span>=xxx.xxx.78.12:22122  # 服务器1</span><br><span class="line"><span class="attribute">tracker_server</span>=xxx.xxx.78.13:22122  # 服务器2</span><br><span class="line"><span class="attribute">url_have_group_name</span>=<span class="literal">true</span></span><br><span class="line"><span class="attribute">store_path0</span>=/data/fdfs/storage</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置nginx.config</span></span><br><span class="line">vim /usr/local/nginx/conf/nginx.conf</span><br><span class="line"><span class="comment">#添加如下配置</span></span><br><span class="line">server &#123;</span><br><span class="line">listen       8888;    ## 该端口为storage.conf中的http.server_port相同</span><br><span class="line">server_name  localhost;</span><br><span class="line">location ~/group[0-9]/ &#123;</span><br><span class="line">   ngx_fastdfs_module;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line">error_page   500 502 503 504  /50x.html;</span><br><span class="line">location = /50x.html &#123;</span><br><span class="line">root   html;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="启动服务、测试"><a href="#启动服务、测试" class="headerlink" title="启动服务、测试"></a>启动服务、测试</h4><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">启动之前我们还需要在防火墙开通端口</span><br><span class="line">vim  /etc/sysconfig/iptables</span><br><span class="line">-A INPUT -m <span class="keyword">state</span> --state NEW -m tcp -p tcp --dport <span class="number">22122</span> -j ACCEPT</span><br><span class="line">-A INPUT -m <span class="keyword">state</span> --state NEW -m tcp -p tcp --dport <span class="number">23000</span> -j ACCEPT</span><br><span class="line">-A INPUT -m <span class="keyword">state</span> --state NEW -m tcp -p tcp --dport <span class="number">8888</span> -j ACCEPT</span><br><span class="line"></span><br><span class="line">service iptables restart <span class="comment">#重启防火墙</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/FastDFS/%E9%98%B2%E7%81%AB%E5%A2%99%E7%AB%AF%E5%8F%A3.png" alt="防火墙端口"></p><ul><li>每个服务的启动、关闭和重启操作<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#tracker</span></span><br><span class="line"><span class="meta-keyword">/etc/</span>init.d/fdfs_trackerd start <span class="meta">#启动tracker服务</span></span><br><span class="line"><span class="meta-keyword">/etc/</span>init.d/fdfs_trackerd restart <span class="meta">#重启动tracker服务</span></span><br><span class="line"><span class="meta-keyword">/etc/</span>init.d/fdfs_trackerd stop <span class="meta">#停止tracker服务</span></span><br><span class="line">chkconfig fdfs_trackerd on <span class="meta">#自启动tracker服务</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#storage</span></span><br><span class="line"><span class="meta-keyword">/etc/</span>init.d/fdfs_storaged start <span class="meta">#启动storage服务</span></span><br><span class="line"><span class="meta-keyword">/etc/</span>init.d/fdfs_storaged restart <span class="meta">#重动storage服务</span></span><br><span class="line"><span class="meta-keyword">/etc/</span>init.d/fdfs_storaged stop <span class="meta">#停止动storage服务</span></span><br><span class="line">chkconfig fdfs_storaged on <span class="meta">#自启动storage服务</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#nginx</span></span><br><span class="line"><span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/nginx/</span>sbin/nginx <span class="meta">#启动nginx</span></span><br><span class="line"><span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/nginx/</span>sbin/nginx -s reload <span class="meta">#重启nginx</span></span><br><span class="line"><span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/nginx/</span>sbin/nginx -s stop <span class="meta">#停止nginx</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/FastDFS/%E6%9F%A5%E7%9C%8B%E8%BF%90%E8%A1%8C%E7%9A%84%E6%9C%8D%E5%8A%A1.png" alt="查看运行的服务"></p><h4 id="检测集群"><a href="#检测集群" class="headerlink" title="检测集群"></a>检测集群</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 会显示会有几台storage服务器,有2台就会显示 Storage 1-Storage 2的详细信息</span></span><br><span class="line"><span class="regexp">/usr/</span>bin<span class="regexp">/fdfs_monitor /</span>etc<span class="regexp">/fdfs/</span>storage.conf</span><br></pre></td></tr></table></figure><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/FastDFS/%E6%A3%80%E6%B5%8B%E9%9B%86%E7%BE%A41.png" alt="检测集群1"></p><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/FastDFS/%E6%A3%80%E6%B5%8B%E9%9B%86%E7%BE%A42.png" alt="检测集群2"></p><h4 id="图片上传测试"><a href="#图片上传测试" class="headerlink" title="图片上传测试"></a>图片上传测试</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#上传成功返回 文件访问 ID</span></span><br><span class="line"><span class="comment"># fdfs_upload_file 客户端配置文件      上传文件路径</span></span><br><span class="line">fdfs_upload_file <span class="regexp">/etc/</span>fdfs<span class="regexp">/client.conf /</span>data<span class="regexp">/test.png</span></span><br></pre></td></tr></table></figure><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/FastDFS/%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E6%88%90%E5%8A%9F.png" alt="上传文件成功"></p><h4 id="测试文件访问"><a href="#测试文件访问" class="headerlink" title="测试文件访问"></a>测试文件访问</h4><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">http:</span><span class="comment">//xxx.xxx.78.12/group1/M00/00/00/rB9ODFvXuSiAWBYBAALSAkm_6RQ360.png</span></span><br><span class="line"><span class="symbol">http:</span><span class="comment">//xxx.xxx.78.13/group1/M00/00/00/rB9ODFvXuSiAWBYBAALSAkm_6RQ360.png</span></span><br></pre></td></tr></table></figure><ul><li>测试nginx默认端口80 访问刚刚上传的文件，两个地址都能访问通一个文件，达到数据备份目的。</li></ul><blockquote><p>至此，FastDFS服务器部署完成    </p></blockquote><h3 id="FastDFS客户端集成到SpringBoot"><a href="#FastDFS客户端集成到SpringBoot" class="headerlink" title="FastDFS客户端集成到SpringBoot"></a>FastDFS客户端集成到SpringBoot</h3><h4 id="编译获取FastDFS-jar包"><a href="#编译获取FastDFS-jar包" class="headerlink" title="编译获取FastDFS jar包"></a>编译获取FastDFS jar包</h4><ul><li>首先根据官方源码提示，我们先下载源码使用maven编译成jar包放到公司maven私服（Nexus），或者你本地的maven私服（也有其他ant等方式，具体请查看github）<a href="https://github.com/happyfish100/fastdfs-client-java" target="_blank" rel="noopener">FastDFS-java-client-SDK源码下载地址</a><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#编译jar包（解压下载的FastDFS-java-client-SDK源码，使用<span class="keyword">mvn命令需要先有maven环境）</span></span><br><span class="line"><span class="keyword">mvn </span>clean install</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/FastDFS/%E7%BC%96%E8%AF%91%E6%89%93%E5%8C%85FastDFS-java-client.png" alt="编译打包FastDFS-java-client"></p><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/FastDFS/fastdfs-client-java%E6%89%93%E5%8C%85%E6%88%90%E5%8A%9F.png" alt="fastdfs-client-java打包成功"></p><h4 id="maven项目pom-xml中添加依赖"><a href="#maven项目pom-xml中添加依赖" class="headerlink" title="maven项目pom.xml中添加依赖"></a>maven项目pom.xml中添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.csource<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastdfs-client-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.27-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>接下来我们在项目resources目录下添加fdfs_client.conf文件</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">connect_timeout = 30</span><br><span class="line">network_timeout = 30</span><br><span class="line">charset = UTF-8</span><br><span class="line">http.tracker_http_port = 80</span><br><span class="line">http.anti_steal_token = no</span><br><span class="line">http.secret_key = 123456</span><br><span class="line"><span class="comment">#前面配置的集群tracker服务器地址</span></span><br><span class="line">tracker_server = xxx.xxx.78.12:22122</span><br><span class="line">tracker_server = xxx.xxx.78.13:22122</span><br></pre></td></tr></table></figure><h4 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h4><ul><li>写一个上传文件对象类</li></ul><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @Author: maoqitian</span></span><br><span class="line"><span class="comment"> * @Date: 2018/10/26 0026 17:57</span></span><br><span class="line"><span class="comment"> * @Description: FastDFS 文件类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">public</span> class FastDFSFileEntity &#123;</span><br><span class="line"> <span class="comment">//文件名称</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line"> <span class="comment">//内容</span></span><br><span class="line"> <span class="keyword">private</span> <span class="built_in">byte</span>[] content;</span><br><span class="line"> <span class="comment">//文件类型</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">String</span> ext;</span><br><span class="line"> <span class="comment">//md5值</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">String</span> md5;</span><br><span class="line"> <span class="comment">//作者</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">String</span> author;</span><br><span class="line"> <span class="keyword">public</span> FastDFSFileEntity(<span class="keyword">String</span> name, <span class="built_in">byte</span>[] content, <span class="keyword">String</span> ext, <span class="keyword">String</span> <span class="built_in">height</span>,</span><br><span class="line">                  <span class="keyword">String</span> <span class="built_in">width</span>, <span class="keyword">String</span> author) &#123;</span><br><span class="line">   <span class="keyword">super</span>();</span><br><span class="line">   <span class="keyword">this</span>.name = name;</span><br><span class="line">   <span class="keyword">this</span>.content = content;</span><br><span class="line">   <span class="keyword">this</span>.ext = ext;</span><br><span class="line">   <span class="keyword">this</span>.author = author;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> FastDFSFileEntity(<span class="keyword">String</span> name, <span class="built_in">byte</span>[] content, <span class="keyword">String</span> ext) &#123;</span><br><span class="line">   <span class="keyword">super</span>();</span><br><span class="line">   <span class="keyword">this</span>.name = name;</span><br><span class="line">   <span class="keyword">this</span>.content = content;</span><br><span class="line">   <span class="keyword">this</span>.ext = ext;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">String</span> getName() &#123;</span><br><span class="line">   <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> setName(<span class="keyword">String</span> name) &#123;</span><br><span class="line">   <span class="keyword">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">byte</span>[] getContent() &#123;</span><br><span class="line">   <span class="keyword">return</span> content;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> setContent(<span class="built_in">byte</span>[] content) &#123;</span><br><span class="line">   <span class="keyword">this</span>.content = content;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">String</span> getExt() &#123;</span><br><span class="line">   <span class="keyword">return</span> ext;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> setExt(<span class="keyword">String</span> ext) &#123;</span><br><span class="line">   <span class="keyword">this</span>.ext = ext;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">String</span> getMd5() &#123;</span><br><span class="line">   <span class="keyword">return</span> md5;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> setMd5(<span class="keyword">String</span> md5) &#123;</span><br><span class="line">   <span class="keyword">this</span>.md5 = md5;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">String</span> getAuthor() &#123;</span><br><span class="line">   <span class="keyword">return</span> author;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> setAuthor(<span class="keyword">String</span> author) &#123;</span><br><span class="line">   <span class="keyword">this</span>.author = author;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>编写FastDFS操作类，主要是加载初始化配置Tracker服务器，文件上传，下载，删除等操作工具类</li></ul><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: maoqitian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/10/29 0029 9:30</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: FastDFS 操作类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastDFSClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> org.slf4j.Logger logger = LoggerFactory.getLogger(FastDFSClient.class);</span><br><span class="line">  <span class="comment">//双重守护单例</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> FastDFSClient mInstance;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 加载配置信息</span></span><br><span class="line"><span class="comment">   **/</span></span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       String filePath=<span class="keyword">new</span> ClassPathResource(<span class="string">"fdfs_client.conf"</span>).getFile().getAbsolutePath();</span><br><span class="line">       ClientGlobal.init(filePath);</span><br><span class="line">   &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">       logger.<span class="keyword">error</span>(<span class="string">"FastDFS Client Init Fail!"</span>,e);</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">FastDFSClient</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="function">FastDFSClient <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(mInstance == <span class="keyword">null</span>)&#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (FastDFSClient.class)&#123;</span><br><span class="line">          <span class="keyword">if</span>(mInstance == <span class="keyword">null</span>)&#123;</span><br><span class="line">              mInstance=<span class="keyword">new</span> FastDFSClient();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> mInstance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Author</span> maoqitian</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Description</span> 上传文件</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Date</span> 2018/10/29 0029 9:42</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Param</span> [fastDFSFileEntity]</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> java.lang.String[]</span></span><br><span class="line"><span class="comment">   **/</span></span><br><span class="line">   <span class="keyword">public</span>  String[] upload(FastDFSFileEntity file)&#123;</span><br><span class="line">   logger.info(<span class="string">"File Name: "</span> + file.getName() + <span class="string">"File Length:"</span> + file.getContent().length);</span><br><span class="line"></span><br><span class="line">   NameValuePair[] metalist=<span class="keyword">new</span> NameValuePair[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">   metalist[<span class="number">0</span>]=<span class="keyword">new</span> NameValuePair(<span class="string">"author"</span>,file.getAuthor());</span><br><span class="line"></span><br><span class="line">   <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">   String[] uploadResults= <span class="keyword">null</span>;</span><br><span class="line">   StorageClient storageClient=<span class="keyword">null</span>;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">       storageClient=getTrackerClient();</span><br><span class="line">       uploadResults = storageClient.upload_file(file.getContent(),file.getExt(),metalist);</span><br><span class="line">   &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">       logger.<span class="keyword">error</span>(<span class="string">"IO Exception when uploadind the file:"</span>+file.getName(),e);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">       logger.<span class="keyword">error</span>(<span class="string">"Non IO Exception when uploadind the file:"</span>+file.getName(),e);</span><br><span class="line">   &#125;</span><br><span class="line">   logger.info(<span class="string">"upload_file time used:"</span> + (System.currentTimeMillis() - startTime) + <span class="string">" ms"</span>);</span><br><span class="line">   <span class="keyword">if</span>(uploadResults==<span class="keyword">null</span> &amp;&amp; storageClient!=<span class="keyword">null</span>)&#123;</span><br><span class="line">       logger.<span class="keyword">error</span>(<span class="string">"upload file fail, error code:"</span> + storageClient.getErrorCode());</span><br><span class="line">   &#125;</span><br><span class="line">   String groupName = uploadResults[<span class="number">0</span>];</span><br><span class="line">   String remoteFileName = uploadResults[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">   logger.info(<span class="string">"upload file successfully!!!"</span> + <span class="string">"group_name:"</span> + groupName + <span class="string">", remoteFileName:"</span> + <span class="string">" "</span> + remoteFileName);</span><br><span class="line">   <span class="keyword">return</span> uploadResults;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span>  <span class="function">FileInfo <span class="title">getFile</span><span class="params">(String groupName, String remoteFileName)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       StorageClient storageClient = getTrackerClient();</span><br><span class="line">       <span class="function"><span class="keyword">return</span> storageClient.<span class="title">get_file_info</span><span class="params">(groupName, remoteFileName)</span></span>;</span><br><span class="line">   &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">       logger.<span class="keyword">error</span>(<span class="string">"IO Exception: Get File from Fast DFS failed"</span>, e);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">       logger.<span class="keyword">error</span>(<span class="string">"Non IO Exception: Get File from Fast DFS failed"</span>, e);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span>  <span class="function">InputStream <span class="title">downFile</span><span class="params">(String groupName, String remoteFileName)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       StorageClient storageClient = getTrackerClient();</span><br><span class="line">       <span class="keyword">byte</span>[] fileByte = storageClient.download_file(groupName, remoteFileName);</span><br><span class="line">       InputStream ins = <span class="keyword">new</span> ByteArrayInputStream(fileByte);</span><br><span class="line">       <span class="keyword">return</span> ins;</span><br><span class="line">   &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">       logger.<span class="keyword">error</span>(<span class="string">"IO Exception: Get File from Fast DFS failed"</span>, e);</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">       logger.<span class="keyword">error</span>(<span class="string">"Non IO Exception: Get File from Fast DFS failed"</span>, e);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span> maoqitian</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span> 2018/10/31 0031 11:19</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Param</span> [remoteFileName]</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> int -1 失败 0成功</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">int</span> deleteFile(String remoteFileName)</span><br><span class="line">       <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">   StorageClient storageClient = getTrackerClient();</span><br><span class="line">   <span class="keyword">int</span> i = storageClient.delete_file(<span class="string">"group1"</span>, remoteFileName);</span><br><span class="line">   logger.info(<span class="string">"delete file successfully!!!"</span> + i);</span><br><span class="line">   <span class="keyword">return</span> i;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> StorageServer[] getStoreStorages(String groupName)</span><br><span class="line">       <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">   TrackerClient trackerClient = <span class="keyword">new</span> TrackerClient();</span><br><span class="line">   TrackerServer trackerServer = trackerClient.getConnection();</span><br><span class="line">   <span class="function"><span class="keyword">return</span> trackerClient.<span class="title">getStoreStorages</span><span class="params">(trackerServer, groupName)</span></span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ServerInfo[] getFetchStorages(String groupName,</span><br><span class="line">                                           String remoteFileName) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">   TrackerClient trackerClient = <span class="keyword">new</span> TrackerClient();</span><br><span class="line">   TrackerServer trackerServer = trackerClient.getConnection();</span><br><span class="line">   <span class="function"><span class="keyword">return</span> trackerClient.<span class="title">getFetchStorages</span><span class="params">(trackerServer, groupName, remoteFileName)</span></span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span>  <span class="function">String <span class="title">getTrackerUrl</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"http://"</span>+getTrackerServer().getInetSocketAddress().getHostString()+<span class="string">":"</span>+ClientGlobal.getG_tracker_http_port()+<span class="string">"/"</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span> maoqitian</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span> 获取 StorageClient</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span> 2018/10/29 0029 10:33</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Param</span> []</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> org.csource.fastdfs.StorageClient</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">   <span class="keyword">private</span> <span class="function">StorageClient <span class="title">getTrackerClient</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">   TrackerServer trackerServer=getTrackerServer();</span><br><span class="line">   StorageClient storageClient=<span class="keyword">new</span> StorageClient(trackerServer,<span class="keyword">null</span>);</span><br><span class="line">   <span class="keyword">return</span> storageClient;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Author</span> maoqitian</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span> 获取 TrackerServer</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span> 2018/10/29 0029 10:34</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Param</span> []</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> org.csource.fastdfs.TrackerServer</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">   <span class="keyword">private</span>  <span class="function">TrackerServer <span class="title">getTrackerServer</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">   TrackerClient trackerClient=<span class="keyword">new</span> TrackerClient();</span><br><span class="line">   TrackerServer trackerServer = trackerClient.getConnection();</span><br><span class="line">   <span class="keyword">return</span> trackerServer;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>Controller编写，接收请求并上传文件返回文件访问路径（这里写一个文件上传的例子，其他文件下载，删除等功能可根据自己需求进行编写）<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Author</span> maoqitian</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Description</span>  上传文件</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Date</span> 2018/10/30 0030 15:07</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Param</span> [file]</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> com.gxxmt.common.utils.ResultApi</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"> <span class="meta">@RequestMapping</span>(<span class="string">"/upload"</span>)</span><br><span class="line"> <span class="keyword">public</span> ResultApi upload(<span class="meta">@RequestParam</span>(<span class="string">"file"</span>) MultipartFile file) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="keyword">if</span> (file.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RRException(<span class="string">"上传文件不能为空"</span>);</span><br><span class="line">&#125;</span><br><span class="line">String url;</span><br><span class="line"><span class="comment">//此处域名获取可以根据自需求编写</span></span><br><span class="line">String domainUrl = OSSFactory.build().getDomainPath();</span><br><span class="line">logger.info(<span class="string">"配置的域名为"</span>+domainUrl);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isNotBlank(domainUrl))&#123;</span><br><span class="line">url = uploadFile(file,domainUrl);</span><br><span class="line"><span class="keyword">return</span> ResultApi.success.put(<span class="string">"url"</span>,url);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="function"><span class="keyword">return</span> ResultApi.<span class="title">error</span><span class="params">(<span class="string">"域名配置为空,请先配置对象存储域名"</span>)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Author</span> maoqitian</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Description</span> 上传文件到 FastDFS</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Date</span> 2018/10/29 0029 11:11</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@Param</span> [file]</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Param</span> [domainName] 域名</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> path 文件访问路径</span></span><br><span class="line"><span class="comment">   **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="function">String <span class="title">uploadFile</span><span class="params">(MultipartFile file,String domainName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">String[] fileAbsolutePath=&#123;&#125;;</span><br><span class="line">String fileName=file.getOriginalFilename();</span><br><span class="line">String ext=fileName.substring(fileName.lastIndexOf(<span class="string">"."</span>)+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">byte</span>[] file_buff=<span class="keyword">null</span>;</span><br><span class="line">InputStream inputStream = file.getInputStream();</span><br><span class="line"><span class="keyword">if</span>(inputStream!=<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> available = inputStream.available();</span><br><span class="line">file_buff=<span class="keyword">new</span> <span class="keyword">byte</span>[available];</span><br><span class="line">inputStream.read(file_buff);</span><br><span class="line">&#125;</span><br><span class="line">inputStream.close();</span><br><span class="line">FastDFSFileEntity fastDFSFileEntity=<span class="keyword">new</span> FastDFSFileEntity(fileName,file_buff,ext);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">fileAbsolutePath=FastDFSClient.getInstance().upload(fastDFSFileEntity);</span><br><span class="line">logger.info(fileAbsolutePath.toString());</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">logger.<span class="keyword">error</span>(<span class="string">"upload file Exception!"</span>,e);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RRException(<span class="string">"文件上传出错"</span>+e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(fileAbsolutePath == <span class="keyword">null</span>)&#123;</span><br><span class="line">logger.<span class="keyword">error</span>(<span class="string">"upload file failed,please upload again!"</span>);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RRException(<span class="string">"文件上传失败，请重新上传"</span>);</span><br><span class="line">&#125;</span><br><span class="line">String path=domainName+fileAbsolutePath[<span class="number">0</span>]+ <span class="string">"/"</span>+fileAbsolutePath[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> path;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="测试部署成果"><a href="#测试部署成果" class="headerlink" title="测试部署成果"></a>测试部署成果</h4><ul><li>上传一个图片，由日志打印我们可以看出图片已经上传成功 </li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/FastDFS/FastDFS-java-client%20%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E6%88%90%E5%8A%9F.png" alt="FastDFS-java-client 上传图片成功"></p><ul><li>测试访问上传的图片</li></ul><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/FastDFS/%E6%B5%8B%E8%AF%95%E4%B8%8A%E4%BC%A0%E7%9A%84%E5%9B%BE%E7%89%87%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E8%BF%9B%E8%A1%8C%E8%AE%BF%E9%97%AE.png" alt="测试上传的图片是否可以进行访问"></p><h3 id="最后说点"><a href="#最后说点" class="headerlink" title="最后说点"></a>最后说点</h3><ul><li>到此，FastDFS服务器集群部署和集成客户端到SpringBoot中已经完成，以后我们就可以愉快的使用FastDFS服务保存我们的图片等并备份。如果文章中有写得不对的地方，请给我留言指出，大家一起学习进步。如果觉得我的文章给予你帮助，也请给我一个喜欢和关注。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题，同时也能做到在集群环境下一台机子上传文件，同时该组下的其他节点下也备份了上传的文件。
      
    
    </summary>
    
      <category term="后端" scheme="https://www.maoqitian.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Java" scheme="https://www.maoqitian.com/tags/Java/"/>
    
      <category term="FastDFS" scheme="https://www.maoqitian.com/tags/FastDFS/"/>
    
      <category term="spring boot" scheme="https://www.maoqitian.com/tags/spring-boot/"/>
    
      <category term="CentOS" scheme="https://www.maoqitian.com/tags/CentOS/"/>
    
      <category term="Maven" scheme="https://www.maoqitian.com/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Android 源码编译</title>
    <link href="https://www.maoqitian.com/2019/01/10/Android-source-code-compilation/"/>
    <id>https://www.maoqitian.com/2019/01/10/Android-source-code-compilation/</id>
    <published>2019-01-10T12:23:03.000Z</published>
    <updated>2019-01-14T08:08:30.978Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>android源码编译的四个流程:1.源码下载;2.构建编译环境;3.编译源码;4运行.</p></blockquote><h2 id="Ubuntu-18-04（虚拟机）环境下编译Android-源码"><a href="#Ubuntu-18-04（虚拟机）环境下编译Android-源码" class="headerlink" title="Ubuntu 18.04（虚拟机）环境下编译Android 源码"></a>Ubuntu 18.04（虚拟机）环境下编译Android 源码</h2><h3 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h3><ul><li><p>首先确保自己已经安装了Git.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install git </span><br><span class="line">git<span class="built_in"> config </span>–global user.email “test@test.com” </span><br><span class="line">git<span class="built_in"> config </span>–global user.name “test”</span><br></pre></td></tr></table></figure></li><li><p>使用清华大学镜像</p><ul><li><a href="https://mirror.tuna.tsinghua.edu.cn/help/AOSP/" target="_blank" rel="noopener">Android 镜像使用帮助</a></li><li>首先要下载repo 工具</li></ul><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~<span class="regexp">/bin</span></span><br><span class="line"><span class="regexp">PATH=~/bin</span>:$PATH</span><br><span class="line">curl <span class="symbol">https:</span>/<span class="regexp">/storage.googleapis.com/git</span>-repo-downloads/repo &gt; ~<span class="regexp">/bin/repo</span></span><br><span class="line">chmod a+x ~<span class="regexp">/bin/repo</span></span><br><span class="line">/<span class="regexp">/拒绝连接可以使用tuna的git-repo镜像</span></span><br><span class="line"><span class="regexp">详情查看网址https:/</span><span class="regexp">/mirrors.tuna.tsinghua.edu.cn/help</span><span class="regexp">/git-repo/</span></span><br></pre></td></tr></table></figure><ul><li>使用每月更新的初始化包</li><li><p>下载地址 <a href="https://mirrors.tuna.tsinghua.edu.cn/aosp-monthly/aosp-latest.tar" target="_blank" rel="noopener">每月更新的初始化包</a></p></li><li><p>由于所有代码都是从隐藏的 .repo 目录中 checkout 出来的，所以只保留了 .repo 目录，下载后解压 再 repo sync 一遍即可得到完整的目录</p></li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">使用方法如下:</span><br><span class="line"></span><br><span class="line">wget -c https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/aosp-mo nthly/</span>aosp-latest.tar <span class="comment"># 下载初始化包</span></span><br><span class="line">tar xf aosp-latest.tar</span><br><span class="line">cd AOSP   <span class="comment"># 解压得到的 AOSP 工程目录</span></span><br><span class="line"><span class="comment"># 这时 ls 的话什么也看不到，因为只有一个隐藏的 .repo 目录</span></span><br><span class="line">repo sync <span class="comment"># 正常同步一遍即可得到完整目录</span></span><br><span class="line"><span class="comment"># 或 repo sync -l 仅checkout代码</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="构建编译环境"><a href="#构建编译环境" class="headerlink" title="构建编译环境"></a>构建编译环境</h3><h4 id="硬件要求"><a href="#硬件要求" class="headerlink" title="硬件要求:"></a>硬件要求:</h4><ul><li>64位的操作系统只能编译2.3.x以上的版本,如果你想要编译2.3.x以下的,那么需要32位的操作系统.<br>  磁盘空间越多越好,至少在100GB以上.意思就是,你可以去买个大点的硬盘了啊<br>  如果你想要在是在虚拟机运行linux,那么至少需要16GB的RAM/swap. </li></ul><h4 id="软件要求"><a href="#软件要求" class="headerlink" title="软件要求"></a>软件要求</h4><ul><li>安装 openJDK 8   <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> update</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> install openjdk-8-jdk</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>依赖设置:</p>   <figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install libx11-<span class="built_in">dev</span>:i386 libreadline6-<span class="built_in">dev</span>:i386 libgl1-mesa-<span class="built_in">dev</span> g++-multilib </span><br><span class="line">sudo apt-<span class="built_in">get</span> install -y git flex bison gperf build-essential libncurses5-<span class="built_in">dev</span>:i386 </span><br><span class="line">sudo apt-<span class="built_in">get</span> install tofrodos python-markdown libxml2-utils xsltproc zlib1g-<span class="built_in">dev</span>:i386 </span><br><span class="line">sudo apt-<span class="built_in">get</span> install dpkg-<span class="built_in">dev</span> libsdl1<span class="number">.2</span>-<span class="built_in">dev</span> libesd0-<span class="built_in">dev</span></span><br><span class="line">sudo apt-<span class="built_in">get</span> install git-core gnupg flex bison gperf build-essential  </span><br><span class="line">sudo apt-<span class="built_in">get</span> install zip curl zlib1g-<span class="built_in">dev</span> gcc-multilib g++-multilib </span><br><span class="line">sudo apt-<span class="built_in">get</span> install libc6-<span class="built_in">dev</span>-i386 </span><br><span class="line">sudo apt-<span class="built_in">get</span> install lib32ncurses5-<span class="built_in">dev</span> x11proto-core-<span class="built_in">dev</span> libx11-<span class="built_in">dev</span> </span><br><span class="line">sudo apt-<span class="built_in">get</span> install libgl1-mesa-<span class="built_in">dev</span> libxml2-utils xsltproc unzip m4</span><br><span class="line">sudo apt-<span class="built_in">get</span> install lib32z-<span class="built_in">dev</span> ccache</span><br></pre></td></tr></table></figure></li><li><p>依赖设置中有可能会出现“无法定位软件包 libesd0-dev” 这个问题</p>   <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">解决方案：</span><br><span class="line">在etc/apt   的sources.<span class="keyword">list</span> 添加镜像源   <span class="keyword">deb</span> http://archive.ubuntu.<span class="keyword">com</span>/ubuntu/ trusty main universe restricted multiverse</span><br><span class="line"></span><br><span class="line">然后 sudo apt-<span class="built_in">get</span> <span class="keyword">update</span>  接着继续使用该命令安装就可以了</span><br></pre></td></tr></table></figure></li><li><p>操作系统要求 </p><p>  Android版本 | 编译要求的Ubuntu最低版本<br>  —|—<br>  Android 6.0至AOSP master | Ubuntu 14.04<br>  Android 2.3.x至Android 5.x | Ubuntu 12.04<br>  Android 1.5至Android 2.2.x | Ubuntu 10.04</p></li><li><p>JDK版本要求</p></li></ul><table><thead><tr><th>Android版本</th><th>编译要求的JDK版本</th></tr></thead><tbody><tr><td>AOSP的Android主线</td><td>OpenJDK 8</td></tr><tr><td>Android 5.x至android 6.0</td><td>Oracle JDK 7</td></tr><tr><td>Android 2.3.x至Android 4.4.x</td><td>Oracle JDK 6</td></tr><tr><td>Android 1.5至Android 2.2.x</td><td>Oracle JDK 5</td></tr></tbody></table><ul><li><p>官方编译环境搭建文档地址</p><p><a href="https://source.android.com/source/initializing#installing-required-packages-ubuntu-1404" target="_blank" rel="noopener">搭建编译环境</a></p></li></ul><h3 id="初始化编译环境"><a href="#初始化编译环境" class="headerlink" title="初始化编译环境"></a>初始化编译环境</h3>   <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">source</span> build/envsetup.<span class="keyword">sh</span> </span><br><span class="line">或者</span><br><span class="line">. build/envsetup.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure><ul><li><p>选择目标</p> <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">. </span>lunch aosp<span class="emphasis">_arm64-eng</span></span><br></pre></td></tr></table></figure></li><li><p>该命令表示针对模拟器进行完整编译，并且所有调试功能均处于启用状态。<br> 如果您没有提供任何参数就运行命令，lunch 将提示您从菜单中选择一个目标。<br> 所有编译目标都采用 BUILD-BUILDTYPE 形式，其中 BUILD 是表示特定功能组合的代号。</p></li><li><p>BUILDTYPE 是以下类型之一：</p><pre><code>编译类型 | 使用情况---|---user | 权限受限；适用于生产环境（没有root权和dedug等）userdebug |在user版本的基础上开放了root权限和debug权限.eng | 开发工程师的版本,拥有最大的权限,此外还附带了许多debug工具</code></pre></li></ul><h3 id="编译源码"><a href="#编译源码" class="headerlink" title="编译源码"></a>编译源码</h3><ul><li><p>您可以使用make编译任何代码。GNUMake可以借助 -jN参数处理并行任务，通常使用的任务数N介于编译时所用计算机上硬件线程数的1-2倍之间。例如，在一台双核 E5520 计算机（2 个 CPU，每个 CPU 4 个内核，每个内核2个线程）上，要实现最快的编译速度，可以使用介于make -j16 到 make -j32 之间的命令。</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">make</span> -j8</span><br></pre></td></tr></table></figure></li><li><p>编译中<br>  <img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Android%20%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/Android%E6%BA%90%E7%A0%81%E7%AD%89%E5%BE%85%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B.png" alt="Android源码等待编译过程"></p></li></ul><h3 id="编译完成"><a href="#编译完成" class="headerlink" title="编译完成"></a>编译完成</h3><p>  <img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Android%20%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/%E7%BC%96%E8%AF%91%E5%AE%8C%E6%88%90.png" alt="编译完成"></p><ul><li><p>运行模拟器</p>   <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//依次输入以下命令（如果是在编译成功源码之后直接想运行模拟器，则直接输入emulator命令就行，因为前面编译源码已经输入过以上两条命令）</span></span><br><span class="line"></span><br><span class="line">. build/envsetup.sh</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">lunch</span><span class="params">(选择刚才你编译源码设置的目标版本)</span></span></span><br><span class="line"></span><br><span class="line">emulator</span><br></pre></td></tr></table></figure><p>   <img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Android%20%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/%E8%BF%90%E8%A1%8C%E6%A8%A1%E6%8B%9F%E5%99%A8.png" alt="运行模拟器"></p></li></ul><h3 id="将源码导入Android-Studio-查看"><a href="#将源码导入Android-Studio-查看" class="headerlink" title="将源码导入Android Studio 查看"></a>将源码导入Android Studio 查看</h3><ul><li><p>编译idegen</p>  <figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source build<span class="regexp">/envsetup.sh /</span>/ 将执行文件设置为临时变量</span><br><span class="line">mmm development<span class="regexp">/tools/idegen/</span>  <span class="regexp">//</span>生成idegen.jar文件（<span class="comment">#### build completed successfully (49 seconds) ###</span><span class="comment"># 标识生成idegen.jar文件）</span></span><br></pre></td></tr></table></figure></li><li><p>执行脚本 idegen.sh</p>  <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">. </span>development/tools/idegen/idegen.sh</span><br></pre></td></tr></table></figure><p>  看到下图，表示编译idegen完成，执行成功后在asop的根目录下生成android.ipr和android.iml两个个文件：</p><ul><li>android.ipr 一般保存了工程相关的设置，比如modules和modules libraries的路径，编译器配置，入口点等。</li><li><p>android.iml 用来描述modules。它包括modules路径、 依赖关系，顺序设置等。一个项目可以包含多个 *.iml 文件。</p><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Android%20%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/%E7%BC%96%E8%AF%91idegen.png" alt="编译idegen"></p></li><li><p>打开Android studio，点击File&gt;Open，选择刚刚生成的android.ipr导入就可以了，依据个人机子性能问题，导入时间有快有慢。</p></li></ul></li></ul><h3 id="编译中遇到的坑"><a href="#编译中遇到的坑" class="headerlink" title="编译中遇到的坑"></a>编译中遇到的坑</h3><ul><li><p>Error: library-pathout/host/linux-x86/lib64/libsepolwrap.so does not exist</p><p><img src="https://github.com/maoqitian/MaoMdPhoto/raw/master/Android%20%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/Android%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%A4%B1%E8%B4%A51.png" alt="Android源码编译失败1"> </p></li><li><p>解决 ： </p><blockquote><p>1.重新同步代码 并加入sudo apt-get install dpkg-dev libsdl1.2-dev libesd0-dev<br>2.确认是否配置好了JDK的环境变量 </p></blockquote></li><li><p>openJDK 配置环境变量方法</p>  <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.用gedit文本编辑器在/etc/profile中添加环境变量：</span><br><span class="line">命令 ： sudo gedit /etc/profile</span><br><span class="line"></span><br><span class="line">2.在打开的/etc/profile文件末尾添加下面几行：</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_HOME</span>=/usr/lib/jvm/java-8-openjdk-amd64</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">JRE_HOME</span>=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre </span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">CLASSPATH</span>=.:$&#123;JAVA_HOME&#125;/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib </span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:$PATH</span><br></pre></td></tr></table></figure></li></ul><h3 id="最后说点"><a href="#最后说点" class="headerlink" title="最后说点"></a>最后说点</h3><ul><li><p>到此，Android源码编译完成，源码编译是一个需要耐心的过程，希望看到文章的你也可以编译成功。文章中如果有错误，请大家给我提出来，大家一起学习进步，如果觉得我的文章给予你帮助，也请给我一个喜欢或者关注。    </p></li><li><p>参考资料</p><p><a href="https://source.android.com/source/initializing#optimizing-a-build-environment" target="_blank" rel="noopener">搭建编译环境</a></p><p><a href="https://blog.csdn.net/mcryeasy/article/details/60466837" target="_blank" rel="noopener">动手实现Android源码（AOSP）的下载、编译、运行、导入、调试</a></p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/" target="_blank" rel="noopener">Android 镜像使用帮助</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;android源码编译的四个流程:1.源码下载;2.构建编译环境;3.编译源码;4运行.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Ubuntu-18-04（虚拟机）环境下编译Android-源码&quot;&gt;&lt;a href=&quot;#Ubuntu-18
      
    
    </summary>
    
      <category term="Android进阶" scheme="https://www.maoqitian.com/categories/Android%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="Android" scheme="https://www.maoqitian.com/tags/Android/"/>
    
      <category term="源码编译" scheme="https://www.maoqitian.com/tags/%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/"/>
    
  </entry>
  
</feed>
